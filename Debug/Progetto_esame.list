
Progetto_esame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08009438  08009438  00019438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009830  08009830  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009838  08009838  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08009840  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000250  08009a90  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08009a90  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015091  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de9  00000000  00000000  00035354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00038140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f77  00000000  00000000  00039520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d9d  00000000  00000000  0003a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185f9  00000000  00000000  00063234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8d87  00000000  00000000  0007b82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067a0  00000000  00000000  001745b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  0017ad54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800941c 	.word	0x0800941c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800941c 	.word	0x0800941c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0f6      	sub	sp, #472	; 0x1d8
 8000eac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int16_t A[3] = {0};
 8000eae:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	809a      	strh	r2, [r3, #4]
	float G[3] = {0}, gyro_values[3] = {0}, acc_values[3] = {0};
 8000eb8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
	float stringa[100] = {0};
 8000edc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000ee0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000eea:	461a      	mov	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f005 fa34 	bl	800635a <memset>
	double acc_norm = 0, gyro_norm = 0;
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f001 f83b 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0e:	f000 f90d 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f98d 	bl	8001230 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 f95b 	bl	80011d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000f1a:	f000 fd57 	bl	80019cc <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000f1e:	f000 fdab 	bl	8001a78 <BSP_GYRO_Init>
  HAL_UART_Init(&huart1);
 8000f22:	487d      	ldr	r0, [pc, #500]	; (8001118 <main+0x270>)
 8000f24:	f003 ff44 	bl	8004db0 <HAL_UART_Init>
  {
	  // Resta in attesa di interrupt dal timer
	 // HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);

	  // get values from Accelerator and Gyroscope
	  BSP_ACCELERO_AccGetXYZ(A);
 8000f28:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fd8b 	bl	8001a48 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(G);
 8000f32:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fde0 	bl	8001afc <BSP_GYRO_GetXYZ>
	   * to set the gyro sensitivity, go to stm32l475e_iot01_gyro.c line 74 and set 245, 500, 1000, 2000
	   * mdps*/

	  /* scale multiplier and division by 1000 to get the G-format, same with gyro, add pow2 to norms:
	   * (maybe useless, lsm6dsl.c already sets sensitivity levels)*/
	  for (i = 0; i < 3; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f42:	e036      	b.n	8000fb2 <main+0x10a>
		  acc_values[i] = A[i];
 8000f44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f4e:	443b      	add	r3, r7
 8000f50:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f66:	443b      	add	r3, r7
 8000f68:	3b40      	subs	r3, #64	; 0x40
 8000f6a:	edc3 7a00 	vstr	s15, [r3]
		  acc_norm += pow((double) acc_values[i], (double) 2);
 8000f6e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f78:	443b      	add	r3, r7
 8000f7a:	3b40      	subs	r3, #64	; 0x40
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fae2 	bl	8000548 <__aeabi_f2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001108 <main+0x260>
 8000f8c:	ec43 2b10 	vmov	d0, r2, r3
 8000f90:	f007 fade 	bl	8008550 <pow>
 8000f94:	ec53 2b10 	vmov	r2, r3, d0
 8000f98:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8000f9c:	f7ff f976 	bl	800028c <__adddf3>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	  for (i = 0; i < 3; i++) {
 8000fa8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000fac:	3301      	adds	r3, #1
 8000fae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fb2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	ddc4      	ble.n	8000f44 <main+0x9c>
	  }
	  for (i = 0; i < 3; i++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fc0:	e037      	b.n	8001032 <main+0x18a>
		  gyro_values[i] = G[i] / SCALE_MULTIPLIER;
 8000fc2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000fcc:	443b      	add	r3, r7
 8000fce:	3b28      	subs	r3, #40	; 0x28
 8000fd0:	ed93 7a00 	vldr	s14, [r3]
 8000fd4:	eddf 6a51 	vldr	s13, [pc, #324]	; 800111c <main+0x274>
 8000fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fdc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000fe6:	443b      	add	r3, r7
 8000fe8:	3b34      	subs	r3, #52	; 0x34
 8000fea:	edc3 7a00 	vstr	s15, [r3]
		  gyro_norm += pow((double) gyro_values[i], (double) 2);
 8000fee:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000ff8:	443b      	add	r3, r7
 8000ffa:	3b34      	subs	r3, #52	; 0x34
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faa2 	bl	8000548 <__aeabi_f2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001108 <main+0x260>
 800100c:	ec43 2b10 	vmov	d0, r2, r3
 8001010:	f007 fa9e 	bl	8008550 <pow>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800101c:	f7ff f936 	bl	800028c <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	  for (i = 0; i < 3; i++) {
 8001028:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001032:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001036:	2b02      	cmp	r3, #2
 8001038:	ddc3      	ble.n	8000fc2 <main+0x11a>
	  }

	  // Get the norm of the vectors to find magnitude:
	  	 acc_norm = sqrt(acc_norm);
 800103a:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800103e:	f007 faf7 	bl	8008630 <sqrt>
 8001042:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
	  	 gyro_norm = sqrt(gyro_norm);
 8001046:	ed97 0b70 	vldr	d0, [r7, #448]	; 0x1c0
 800104a:	f007 faf1 	bl	8008630 <sqrt>
 800104e:	ed87 0b70 	vstr	d0, [r7, #448]	; 0x1c0

	  // Write into the buffer:
	  sprintf(stringa, "$%f %f;", acc_norm, gyro_norm);
 8001052:	4638      	mov	r0, r7
 8001054:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8001058:	e9cd 2300 	strd	r2, r3, [sp]
 800105c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8001060:	492f      	ldr	r1, [pc, #188]	; (8001120 <main+0x278>)
 8001062:	f005 f917 	bl	8006294 <siprintf>

	  // Transmit data to UART (or plotter):
	  HAL_UART_Transmit(&huart1, stringa, sizeof(stringa), 1000);
 8001066:	4639      	mov	r1, r7
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001070:	4829      	ldr	r0, [pc, #164]	; (8001118 <main+0x270>)
 8001072:	f003 feeb 	bl	8004e4c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107a:	f000 ffbb 	bl	8001ff4 <HAL_Delay>

	  if ((acc_norm > ACC_THRESHOLD) || (gyro_norm > GYRO_THRESHOLD)){
 800107e:	a324      	add	r3, pc, #144	; (adr r3, 8001110 <main+0x268>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <main+0x1fe>
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <main+0x27c>)
 8001098:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800109c:	f7ff fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00f      	beq.n	80010c6 <main+0x21e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	481e      	ldr	r0, [pc, #120]	; (8001128 <main+0x280>)
 80010ae:	f001 fa51 	bl	8002554 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2120      	movs	r1, #32
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f001 fa4b 	bl	8002554 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 80010be:	20c8      	movs	r0, #200	; 0xc8
 80010c0:	f000 ff98 	bl	8001ff4 <HAL_Delay>
 80010c4:	e00b      	b.n	80010de <main+0x236>
	  	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <main+0x280>)
 80010ce:	f001 fa41 	bl	8002554 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f001 fa3b 	bl	8002554 <HAL_GPIO_WritePin>
	  }



	  // Re-init string and norms
	  stringa[0] = 0;
 80010de:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80010e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
	  acc_norm = 0;
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	  gyro_norm = 0;
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	  BSP_ACCELERO_AccGetXYZ(A);
 8001104:	e710      	b.n	8000f28 <main+0x80>
 8001106:	bf00      	nop
 8001108:	00000000 	.word	0x00000000
 800110c:	40000000 	.word	0x40000000
 8001110:	00000000 	.word	0x00000000
 8001114:	40906800 	.word	0x40906800
 8001118:	2000026c 	.word	0x2000026c
 800111c:	447a0000 	.word	0x447a0000
 8001120:	08009438 	.word	0x08009438
 8001124:	40080000 	.word	0x40080000
 8001128:	48000400 	.word	0x48000400

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b096      	sub	sp, #88	; 0x58
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2244      	movs	r2, #68	; 0x44
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 f90d 	bl	800635a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001152:	f002 f817 	bl	8003184 <HAL_PWREx_ControlVoltageScaling>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800115c:	f000 f8d0 	bl	8001300 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001160:	2310      	movs	r3, #16
 8001162:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001174:	2301      	movs	r3, #1
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800117c:	2328      	movs	r3, #40	; 0x28
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001180:	2307      	movs	r3, #7
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f84d 	bl	8003230 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800119c:	f000 f8b0 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2303      	movs	r3, #3
 80011a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	2104      	movs	r1, #4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fc15 	bl	80039e8 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011c4:	f000 f89c 	bl	8001300 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3758      	adds	r7, #88	; 0x58
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <MX_USART1_UART_Init+0x5c>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART1_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART1_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART1_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART1_UART_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART1_UART_Init+0x58>)
 8001214:	f003 fdcc 	bl	8004db0 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800121e:	f000 f86f 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000026c 	.word	0x2000026c
 800122c:	40013800 	.word	0x40013800

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xa4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xa4>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_GPIO_Init+0xa4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_GPIO_Init+0xa4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <MX_GPIO_Init+0xa4>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_GPIO_Init+0xa4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2120      	movs	r1, #32
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f001 f969 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <MX_GPIO_Init+0xa8>)
 800128a:	f001 f963 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800128e:	2320      	movs	r3, #32
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f000 ffaa 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_GPIO_Init+0xa8>)
 80012c6:	f000 ff9b 	bl	8002200 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000400 	.word	0x48000400

080012dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	//if (htim == &htim2)
	    //{
	        // Il timer TIM2 è scattato, il microcontrollore si sveglia da Sleep
	    //}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ee:	f000 fe61 	bl	8001fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40012c00 	.word	0x40012c00

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6613      	str	r3, [r2, #96]	; 0x60
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x44>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x44>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ac      	sub	sp, #176	; 0xb0
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2288      	movs	r2, #136	; 0x88
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fff0 	bl	800635a <memset>
  if(huart->Instance==USART1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_UART_MspInit+0xb0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d13a      	bne.n	80013fa <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001384:	2301      	movs	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001388:	2300      	movs	r3, #0
 800138a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fd7f 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800139c:	f7ff ffb0 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6613      	str	r3, [r2, #96]	; 0x60
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0xb8>)
 80013f6:	f000 ff03 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	37b0      	adds	r7, #176	; 0xb0
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40013800 	.word	0x40013800
 8001408:	40021000 	.word	0x40021000
 800140c:	48000400 	.word	0x48000400

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	2019      	movs	r0, #25
 8001426:	f000 fec1 	bl	80021ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800142a:	2019      	movs	r0, #25
 800142c:	f000 feda 	bl	80021e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_InitTick+0x9c>)
 8001432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_InitTick+0x9c>)
 8001436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800143a:	6613      	str	r3, [r2, #96]	; 0x60
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_InitTick+0x9c>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001448:	f107 0210 	add.w	r2, r7, #16
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fc8c 	bl	8003d70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001458:	f002 fc74 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 800145c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_InitTick+0xa0>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	3b01      	subs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_InitTick+0xa4>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_InitTick+0xa8>)
 8001470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_InitTick+0xa4>)
 8001474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001478:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_InitTick+0xa4>)
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_InitTick+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_InitTick+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <HAL_InitTick+0xa4>)
 800148e:	f003 f9bd 	bl	800480c <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_InitTick+0xa4>)
 800149a:	f003 fa19 	bl	80048d0 <HAL_TIM_Base_Start_IT>
 800149e:	4603      	mov	r3, r0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	200002f0 	.word	0x200002f0
 80014b8:	40012c00 	.word	0x40012c00

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800151a:	f003 fa49 	bl	80049b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002f0 	.word	0x200002f0

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001542:	f004 ff5d 	bl	8006400 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
	return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800156a:	e7fe      	b.n	800156a <_exit+0x12>

0800156c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e00a      	b.n	8001594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	4601      	mov	r1, r0
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf0      	blt.n	800157e <_read+0x12>
	}

return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e009      	b.n	80015cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf1      	blt.n	80015b8 <_write+0x12>
	}
	return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_close>:

int _close(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	605a      	str	r2, [r3, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f004 fec2 	bl	8006400 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20018000 	.word	0x20018000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	2000033c 	.word	0x2000033c
 80016b0:	200004f0 	.word	0x200004f0

080016b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopForever+0x2>
 80016dc:	f7ff ffea 	bl	80016b4 <SystemInit>
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <LoopForever+0x6>)
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <LoopForever+0xa>)
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <LoopForever+0xe>)
 80016e6:	2300      	movs	r3, #0
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:
 80016ea:	58d4      	ldr	r4, [r2, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:
 80016f0:	18c4      	adds	r4, r0, r3
 80016f2:	428c      	cmp	r4, r1
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopForever+0x12>)
 80016f8:	4c0a      	ldr	r4, [pc, #40]	; (8001724 <LoopForever+0x16>)
 80016fa:	2300      	movs	r3, #0
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:
 8001702:	42a2      	cmp	r2, r4
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>
 8001706:	f004 fe81 	bl	800640c <__libc_init_array>
 800170a:	f7ff fbcd 	bl	8000ea8 <main>

0800170e <LoopForever>:
 800170e:	e7fe      	b.n	800170e <LoopForever>
 8001710:	20018000 	.word	0x20018000
 8001714:	20000000 	.word	0x20000000
 8001718:	20000250 	.word	0x20000250
 800171c:	08009840 	.word	0x08009840
 8001720:	20000250 	.word	0x20000250
 8001724:	200004ec 	.word	0x200004ec

08001728 <ADC1_2_IRQHandler>:
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>
	...

0800172c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <I2Cx_MspInit+0xa8>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <I2Cx_MspInit+0xa8>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <I2Cx_MspInit+0xa8>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800174c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001750:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001752:	2312      	movs	r3, #18
 8001754:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800175e:	2304      	movs	r3, #4
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481b      	ldr	r0, [pc, #108]	; (80017d8 <I2Cx_MspInit+0xac>)
 800176a:	f000 fd49 	bl	8002200 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <I2Cx_MspInit+0xac>)
 8001776:	f000 fd43 	bl	8002200 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <I2Cx_MspInit+0xa8>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <I2Cx_MspInit+0xa8>)
 8001780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <I2Cx_MspInit+0xa8>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <I2Cx_MspInit+0xa8>)
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <I2Cx_MspInit+0xa8>)
 8001798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800179c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <I2Cx_MspInit+0xa8>)
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <I2Cx_MspInit+0xa8>)
 80017a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	210f      	movs	r1, #15
 80017ae:	2021      	movs	r0, #33	; 0x21
 80017b0:	f000 fcfc 	bl	80021ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80017b4:	2021      	movs	r0, #33	; 0x21
 80017b6:	f000 fd15 	bl	80021e4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	210f      	movs	r1, #15
 80017be:	2022      	movs	r0, #34	; 0x22
 80017c0:	f000 fcf4 	bl	80021ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80017c4:	2022      	movs	r0, #34	; 0x22
 80017c6:	f000 fd0d 	bl	80021e4 <HAL_NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000400 	.word	0x48000400

080017dc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <I2Cx_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <I2Cx_Init+0x58>)
 80017ee:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff89 	bl	800172c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 feb2 	bl	8002584 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001820:	2100      	movs	r1, #0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f001 fc54 	bl	80030d0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005800 	.word	0x40005800
 8001834:	00702681 	.word	0x00702681

08001838 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af04      	add	r7, sp, #16
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	72fb      	strb	r3, [r7, #11]
 800184a:	460b      	mov	r3, r1
 800184c:	813b      	strh	r3, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001856:	7afb      	ldrb	r3, [r7, #11]
 8001858:	b299      	uxth	r1, r3
 800185a:	88f8      	ldrh	r0, [r7, #6]
 800185c:	893a      	ldrh	r2, [r7, #8]
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4603      	mov	r3, r0
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f001 f86e 	bl	8002950 <HAL_I2C_Mem_Read>
 8001874:	4603      	mov	r3, r0
 8001876:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	4619      	mov	r1, r3
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f832 	bl	80018ec <I2Cx_Error>
  }
  return status;
 8001888:	7dfb      	ldrb	r3, [r7, #23]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b08a      	sub	sp, #40	; 0x28
 8001896:	af04      	add	r7, sp, #16
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	4608      	mov	r0, r1
 800189c:	4611      	mov	r1, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	72fb      	strb	r3, [r7, #11]
 80018a4:	460b      	mov	r3, r1
 80018a6:	813b      	strh	r3, [r7, #8]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	b299      	uxth	r1, r3
 80018b4:	88f8      	ldrh	r0, [r7, #6]
 80018b6:	893a      	ldrh	r2, [r7, #8]
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4603      	mov	r3, r0
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 ff2d 	bl	8002728 <HAL_I2C_Mem_Write>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	4619      	mov	r1, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f805 	bl	80018ec <I2Cx_Error>
  }
  return status;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fed2 	bl	80026a2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff6c 	bl	80017dc <I2Cx_Init>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <SENSOR_IO_Init+0x10>)
 8001912:	f7ff ff63 	bl	80017dc <I2Cx_Init>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000340 	.word	0x20000340

08001920 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af02      	add	r7, sp, #8
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
 800192a:	460b      	mov	r3, r1
 800192c:	71bb      	strb	r3, [r7, #6]
 800192e:	4613      	mov	r3, r2
 8001930:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	b29a      	uxth	r2, r3
 8001936:	79f9      	ldrb	r1, [r7, #7]
 8001938:	2301      	movs	r3, #1
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	1d7b      	adds	r3, r7, #5
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2301      	movs	r3, #1
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <SENSOR_IO_Write+0x30>)
 8001944:	f7ff ffa5 	bl	8001892 <I2Cx_WriteMultiple>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000340 	.word	0x20000340

08001954 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af02      	add	r7, sp, #8
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	b29a      	uxth	r2, r3
 800196c:	79f9      	ldrb	r1, [r7, #7]
 800196e:	2301      	movs	r3, #1
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	f107 030f 	add.w	r3, r7, #15
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	4804      	ldr	r0, [pc, #16]	; (800198c <SENSOR_IO_Read+0x38>)
 800197c:	f7ff ff5c 	bl	8001838 <I2Cx_ReadMultiple>

  return read_value;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000340 	.word	0x20000340

08001990 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	603a      	str	r2, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	460b      	mov	r3, r1
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	79f9      	ldrb	r1, [r7, #7]
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2301      	movs	r3, #1
 80019b6:	4804      	ldr	r0, [pc, #16]	; (80019c8 <SENSOR_IO_ReadMultiple+0x38>)
 80019b8:	f7ff ff3e 	bl	8001838 <I2Cx_ReadMultiple>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29b      	uxth	r3, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000340 	.word	0x20000340

080019cc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80019d6:	2300      	movs	r3, #0
 80019d8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <BSP_ACCELERO_Init+0x74>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4798      	blx	r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b6a      	cmp	r3, #106	; 0x6a
 80019e4:	d002      	beq.n	80019ec <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e024      	b.n	8001a36 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <BSP_ACCELERO_Init+0x78>)
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <BSP_ACCELERO_Init+0x74>)
 80019f0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80019f2:	2330      	movs	r3, #48	; 0x30
 80019f4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_8G;
 80019fa:	230c      	movs	r3, #12
 80019fc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80019fe:	2340      	movs	r3, #64	; 0x40
 8001a00:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001a0a:	797a      	ldrb	r2, [r7, #5]
 8001a0c:	7abb      	ldrb	r3, [r7, #10]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001a14:	7a3b      	ldrb	r3, [r7, #8]
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <BSP_ACCELERO_Init+0x78>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	89ba      	ldrh	r2, [r7, #12]
 8001a32:	4610      	mov	r0, r2
 8001a34:	4798      	blx	r3
  }  

  return ret;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000004 	.word	0x20000004
 8001a44:	20000394 	.word	0x20000394

08001a48 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000394 	.word	0x20000394

08001a78 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001a82:	2300      	movs	r3, #0
 8001a84:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <BSP_GYRO_Init+0x7c>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4798      	blx	r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b6a      	cmp	r3, #106	; 0x6a
 8001a90:	d002      	beq.n	8001a98 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e028      	b.n	8001aea <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <BSP_GYRO_Init+0x80>)
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <BSP_GYRO_Init+0x7c>)
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001aa2:	2330      	movs	r3, #48	; 0x30
 8001aa4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001aba:	7aba      	ldrb	r2, [r7, #10]
 8001abc:	797b      	ldrb	r3, [r7, #5]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001ac4:	7a3b      	ldrb	r3, [r7, #8]
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <BSP_GYRO_Init+0x80>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	89ba      	ldrh	r2, [r7, #12]
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000038 	.word	0x20000038
 8001af8:	20000398 	.word	0x20000398

08001afc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <BSP_GYRO_GetXYZ+0x2c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <BSP_GYRO_GetXYZ+0x2c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <BSP_GYRO_GetXYZ+0x2c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
    }
  }
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000398 	.word	0x20000398

08001b2c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	20d4      	movs	r0, #212	; 0xd4
 8001b3e:	f7ff ff09 	bl	8001954 <SENSOR_IO_Read>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001b52:	7bba      	ldrb	r2, [r7, #14]
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2110      	movs	r1, #16
 8001b60:	20d4      	movs	r0, #212	; 0xd4
 8001b62:	f7ff fedd 	bl	8001920 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001b66:	2112      	movs	r1, #18
 8001b68:	20d4      	movs	r0, #212	; 0xd4
 8001b6a:	f7ff fef3 	bl	8001954 <SENSOR_IO_Read>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001b80:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001b82:	7bba      	ldrb	r2, [r7, #14]
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2112      	movs	r1, #18
 8001b90:	20d4      	movs	r0, #212	; 0xd4
 8001b92:	f7ff fec5 	bl	8001920 <SENSOR_IO_Write>
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ba8:	2110      	movs	r1, #16
 8001baa:	20d4      	movs	r0, #212	; 0xd4
 8001bac:	f7ff fed2 	bl	8001954 <SENSOR_IO_Read>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	20d4      	movs	r0, #212	; 0xd4
 8001bc4:	f7ff feac 	bl	8001920 <SENSOR_IO_Write>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001bd4:	f7ff fe9a 	bl	800190c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001bd8:	210f      	movs	r1, #15
 8001bda:	20d4      	movs	r0, #212	; 0xd4
 8001bdc:	f7ff feba 	bl	8001954 <SENSOR_IO_Read>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001bf4:	2115      	movs	r1, #21
 8001bf6:	20d4      	movs	r0, #212	; 0xd4
 8001bf8:	f7ff feac 	bl	8001954 <SENSOR_IO_Read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	f023 0310 	bic.w	r3, r3, #16
 8001c06:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	f043 0310 	orr.w	r3, r3, #16
 8001c14:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2115      	movs	r1, #21
 8001c1c:	20d4      	movs	r0, #212	; 0xd4
 8001c1e:	f7ff fe7f 	bl	8001920 <SENSOR_IO_Write>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001c42:	2110      	movs	r1, #16
 8001c44:	20d4      	movs	r0, #212	; 0xd4
 8001c46:	f7ff fe85 	bl	8001954 <SENSOR_IO_Read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001c4e:	f107 0208 	add.w	r2, r7, #8
 8001c52:	2306      	movs	r3, #6
 8001c54:	2128      	movs	r1, #40	; 0x28
 8001c56:	20d4      	movs	r0, #212	; 0xd4
 8001c58:	f7ff fe9a 	bl	8001990 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	77fb      	strb	r3, [r7, #31]
 8001c60:	e01c      	b.n	8001c9c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	3301      	adds	r3, #1
 8001c68:	3320      	adds	r3, #32
 8001c6a:	443b      	add	r3, r7
 8001c6c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	3320      	adds	r3, #32
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
 8001c8a:	b212      	sxth	r2, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	3320      	adds	r3, #32
 8001c90:	443b      	add	r3, r7
 8001c92:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d9df      	bls.n	8001c62 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d829      	bhi.n	8001d00 <LSM6DSL_AccReadXYZ+0xd4>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <LSM6DSL_AccReadXYZ+0x88>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001ce9 	.word	0x08001ce9
 8001cb8:	08001d01 	.word	0x08001d01
 8001cbc:	08001d01 	.word	0x08001d01
 8001cc0:	08001d01 	.word	0x08001d01
 8001cc4:	08001cfb 	.word	0x08001cfb
 8001cc8:	08001d01 	.word	0x08001d01
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001d01 	.word	0x08001d01
 8001cd4:	08001cef 	.word	0x08001cef
 8001cd8:	08001d01 	.word	0x08001d01
 8001cdc:	08001d01 	.word	0x08001d01
 8001ce0:	08001d01 	.word	0x08001d01
 8001ce4:	08001cf5 	.word	0x08001cf5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <LSM6DSL_AccReadXYZ+0x120>)
 8001cea:	61bb      	str	r3, [r7, #24]
    break;
 8001cec:	e008      	b.n	8001d00 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <LSM6DSL_AccReadXYZ+0x124>)
 8001cf0:	61bb      	str	r3, [r7, #24]
    break;
 8001cf2:	e005      	b.n	8001d00 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <LSM6DSL_AccReadXYZ+0x128>)
 8001cf6:	61bb      	str	r3, [r7, #24]
    break;
 8001cf8:	e002      	b.n	8001d00 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <LSM6DSL_AccReadXYZ+0x12c>)
 8001cfc:	61bb      	str	r3, [r7, #24]
    break;    
 8001cfe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	77fb      	strb	r3, [r7, #31]
 8001d04:	e01a      	b.n	8001d3c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	ee17 2a90 	vmov	r2, s15
 8001d32:	b212      	sxth	r2, r2
 8001d34:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	77fb      	strb	r3, [r7, #31]
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d9e1      	bls.n	8001d06 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	3d79db23 	.word	0x3d79db23
 8001d50:	3df9db23 	.word	0x3df9db23
 8001d54:	3e79db23 	.word	0x3e79db23
 8001d58:	3ef9db23 	.word	0x3ef9db23

08001d5c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001d6a:	2111      	movs	r1, #17
 8001d6c:	20d4      	movs	r0, #212	; 0xd4
 8001d6e:	f7ff fdf1 	bl	8001954 <SENSOR_IO_Read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001d82:	7bba      	ldrb	r2, [r7, #14]
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2111      	movs	r1, #17
 8001d90:	20d4      	movs	r0, #212	; 0xd4
 8001d92:	f7ff fdc5 	bl	8001920 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001d96:	2112      	movs	r1, #18
 8001d98:	20d4      	movs	r0, #212	; 0xd4
 8001d9a:	f7ff fddb 	bl	8001954 <SENSOR_IO_Read>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001db0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001db2:	7bba      	ldrb	r2, [r7, #14]
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2112      	movs	r1, #18
 8001dc0:	20d4      	movs	r0, #212	; 0xd4
 8001dc2:	f7ff fdad 	bl	8001920 <SENSOR_IO_Write>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001dd8:	2111      	movs	r1, #17
 8001dda:	20d4      	movs	r0, #212	; 0xd4
 8001ddc:	f7ff fdba 	bl	8001954 <SENSOR_IO_Read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	461a      	mov	r2, r3
 8001df0:	2111      	movs	r1, #17
 8001df2:	20d4      	movs	r0, #212	; 0xd4
 8001df4:	f7ff fd94 	bl	8001920 <SENSOR_IO_Write>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001e04:	f7ff fd82 	bl	800190c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001e08:	210f      	movs	r1, #15
 8001e0a:	20d4      	movs	r0, #212	; 0xd4
 8001e0c:	f7ff fda2 	bl	8001954 <SENSOR_IO_Read>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001e24:	2116      	movs	r1, #22
 8001e26:	20d4      	movs	r0, #212	; 0xd4
 8001e28:	f7ff fd94 	bl	8001954 <SENSOR_IO_Read>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e36:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e44:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2116      	movs	r1, #22
 8001e4c:	20d4      	movs	r0, #212	; 0xd4
 8001e4e:	f7ff fd67 	bl	8001920 <SENSOR_IO_Write>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001e72:	2111      	movs	r1, #17
 8001e74:	20d4      	movs	r0, #212	; 0xd4
 8001e76:	f7ff fd6d 	bl	8001954 <SENSOR_IO_Read>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001e7e:	f107 0208 	add.w	r2, r7, #8
 8001e82:	2306      	movs	r3, #6
 8001e84:	2122      	movs	r1, #34	; 0x22
 8001e86:	20d4      	movs	r0, #212	; 0xd4
 8001e88:	f7ff fd82 	bl	8001990 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
 8001e90:	e01c      	b.n	8001ecc <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3301      	adds	r3, #1
 8001e98:	3320      	adds	r3, #32
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	3320      	adds	r3, #32
 8001eac:	443b      	add	r3, r7
 8001eae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	b212      	sxth	r2, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	3320      	adds	r3, #32
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001ec6:	7ffb      	ldrb	r3, [r7, #31]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	77fb      	strb	r3, [r7, #31]
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d9df      	bls.n	8001e92 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d829      	bhi.n	8001f30 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001f19 	.word	0x08001f19
 8001ee8:	08001f31 	.word	0x08001f31
 8001eec:	08001f31 	.word	0x08001f31
 8001ef0:	08001f31 	.word	0x08001f31
 8001ef4:	08001f1f 	.word	0x08001f1f
 8001ef8:	08001f31 	.word	0x08001f31
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08001f31 	.word	0x08001f31
 8001f04:	08001f25 	.word	0x08001f25
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	08001f31 	.word	0x08001f31
 8001f10:	08001f31 	.word	0x08001f31
 8001f14:	08001f2b 	.word	0x08001f2b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001f1a:	61bb      	str	r3, [r7, #24]
    break;
 8001f1c:	e008      	b.n	8001f30 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001f20:	61bb      	str	r3, [r7, #24]
    break;
 8001f22:	e005      	b.n	8001f30 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001f26:	61bb      	str	r3, [r7, #24]
    break;
 8001f28:	e002      	b.n	8001f30 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001f2c:	61bb      	str	r3, [r7, #24]
    break;    
 8001f2e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
 8001f34:	e016      	b.n	8001f64 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	3320      	adds	r3, #32
 8001f3c:	443b      	add	r3, r7
 8001f3e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001f5e:	7ffb      	ldrb	r3, [r7, #31]
 8001f60:	3301      	adds	r3, #1
 8001f62:	77fb      	strb	r3, [r7, #31]
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d9e5      	bls.n	8001f36 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	410c0000 	.word	0x410c0000
 8001f78:	418c0000 	.word	0x418c0000
 8001f7c:	420c0000 	.word	0x420c0000
 8001f80:	428c0000 	.word	0x428c0000

08001f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8e:	2003      	movs	r0, #3
 8001f90:	f000 f901 	bl	8002196 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f94:	200f      	movs	r0, #15
 8001f96:	f7ff fa3b 	bl	8001410 <HAL_InitTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	e001      	b.n	8001faa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa6:	f7ff f9b1 	bl	800130c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001faa:	79fb      	ldrb	r3, [r7, #7]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000070 	.word	0x20000070
 8001fd8:	2000039c 	.word	0x2000039c

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2000039c 	.word	0x2000039c

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000070 	.word	0x20000070

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff4c 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021be:	f7ff ff61 	bl	8002084 <__NVIC_GetPriorityGrouping>
 80021c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	6978      	ldr	r0, [r7, #20]
 80021ca:	f7ff ffb1 	bl	8002130 <NVIC_EncodePriority>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff80 	bl	80020dc <__NVIC_SetPriority>
}
 80021dc:	bf00      	nop
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff54 	bl	80020a0 <__NVIC_EnableIRQ>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	e17f      	b.n	8002510 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8171 	beq.w	800250a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d005      	beq.n	8002240 <HAL_GPIO_Init+0x40>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d130      	bne.n	80022a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002276:	2201      	movs	r2, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	f003 0201 	and.w	r2, r3, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d118      	bne.n	80022e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	6939      	ldr	r1, [r7, #16]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80ac 	beq.w	800250a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <HAL_GPIO_Init+0x330>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b6:	4a5e      	ldr	r2, [pc, #376]	; (8002530 <HAL_GPIO_Init+0x330>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6613      	str	r3, [r2, #96]	; 0x60
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <HAL_GPIO_Init+0x330>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ca:	4a5a      	ldr	r2, [pc, #360]	; (8002534 <HAL_GPIO_Init+0x334>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x242>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <HAL_GPIO_Init+0x338>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x23e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4e      	ldr	r2, [pc, #312]	; (800253c <HAL_GPIO_Init+0x33c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x23a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <HAL_GPIO_Init+0x340>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x236>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <HAL_GPIO_Init+0x344>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x232>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <HAL_GPIO_Init+0x348>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x22e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4a      	ldr	r2, [pc, #296]	; (800254c <HAL_GPIO_Init+0x34c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x22a>
 8002426:	2306      	movs	r3, #6
 8002428:	e00c      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800242a:	2307      	movs	r3, #7
 800242c:	e00a      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800242e:	2305      	movs	r3, #5
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x244>
 8002432:	2304      	movs	r3, #4
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x244>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x244>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x244>
 8002442:	2300      	movs	r3, #0
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002454:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_GPIO_Init+0x334>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_GPIO_Init+0x350>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002486:	4a32      	ldr	r2, [pc, #200]	; (8002550 <HAL_GPIO_Init+0x350>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_GPIO_Init+0x350>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_GPIO_Init+0x350>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_GPIO_Init+0x350>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024da:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_GPIO_Init+0x350>)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_GPIO_Init+0x350>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_GPIO_Init+0x350>)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f ae78 	bne.w	8002210 <HAL_GPIO_Init+0x10>
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	48000c00 	.word	0x48000c00
 8002544:	48001000 	.word	0x48001000
 8002548:	48001400 	.word	0x48001400
 800254c:	48001800 	.word	0x48001800
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e081      	b.n	800269a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8a8 	bl	8002700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e006      	b.n	800260c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800260a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d104      	bne.n	800261e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800261c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800262c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69d9      	ldr	r1, [r3, #28]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e021      	b.n	80026f8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f821 	bl	8002714 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	460b      	mov	r3, r1
 800273c:	813b      	strh	r3, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 80f9 	bne.w	8002942 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_I2C_Mem_Write+0x34>
 8002756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0ed      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Mem_Write+0x4e>
 8002772:	2302      	movs	r3, #2
 8002774:	e0e6      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277e:	f7ff fc2d 	bl	8001fdc <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fac3 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d1      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2221      	movs	r2, #33	; 0x21
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c8:	88f8      	ldrh	r0, [r7, #6]
 80027ca:	893a      	ldrh	r2, [r7, #8]
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4603      	mov	r3, r0
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f9d3 	bl	8002b84 <I2C_RequestMemoryWrite>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0a9      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2bff      	cmp	r3, #255	; 0xff
 80027f8:	d90e      	bls.n	8002818 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	b2da      	uxtb	r2, r3
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	2300      	movs	r3, #0
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fc2b 	bl	800306c <I2C_TransferConfig>
 8002816:	e00f      	b.n	8002838 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	2300      	movs	r3, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fc1a 	bl	800306c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 faad 	bl	8002d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e07b      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d034      	beq.n	80028f0 <HAL_I2C_Mem_Write+0x1c8>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d130      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa3f 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04d      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2bff      	cmp	r3, #255	; 0xff
 80028b0:	d90e      	bls.n	80028d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fbcf 	bl	800306c <I2C_TransferConfig>
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fbbe 	bl	800306c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d19e      	bne.n	8002838 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa8c 	bl	8002e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01a      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2220      	movs	r2, #32
 8002914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_I2C_Mem_Write+0x224>)
 8002922:	400b      	ands	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b20      	cmp	r3, #32
 8002974:	f040 80fd 	bne.w	8002b72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_I2C_Mem_Read+0x34>
 800297e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0f1      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_I2C_Mem_Read+0x4e>
 800299a:	2302      	movs	r3, #2
 800299c:	e0ea      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a6:	f7ff fb19 	bl	8001fdc <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f9af 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0d5      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2222      	movs	r2, #34	; 0x22
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f0:	88f8      	ldrh	r0, [r7, #6]
 80029f2:	893a      	ldrh	r2, [r7, #8]
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4603      	mov	r3, r0
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f913 	bl	8002c2c <I2C_RequestMemoryRead>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0ad      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d90e      	bls.n	8002a40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	8979      	ldrh	r1, [r7, #10]
 8002a30:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <HAL_I2C_Mem_Read+0x22c>)
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb17 	bl	800306c <I2C_TransferConfig>
 8002a3e:	e00f      	b.n	8002a60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_I2C_Mem_Read+0x22c>)
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb06 	bl	800306c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	2200      	movs	r2, #0
 8002a68:	2104      	movs	r1, #4
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f956 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07c      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d034      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x1d0>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d130      	bne.n	8002b20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f927 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04d      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2bff      	cmp	r3, #255	; 0xff
 8002ae0:	d90e      	bls.n	8002b00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	22ff      	movs	r2, #255	; 0xff
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fab7 	bl	800306c <I2C_TransferConfig>
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 faa6 	bl	800306c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d19a      	bne.n	8002a60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f974 	bl	8002e1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01a      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2220      	movs	r2, #32
 8002b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_I2C_Mem_Read+0x230>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
  }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	80002400 	.word	0x80002400
 8002b80:	fe00e800 	.word	0xfe00e800

08002b84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <I2C_RequestMemoryWrite+0xa4>)
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa5d 	bl	800306c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8f0 	bl	8002d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e02c      	b.n	8002c20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bcc:	893b      	ldrh	r3, [r7, #8]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd6:	e015      	b.n	8002c04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd8:	893b      	ldrh	r3, [r7, #8]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f8d6 	bl	8002d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e012      	b.n	8002c20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f884 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	80002000 	.word	0x80002000

08002c2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	817b      	strh	r3, [r7, #10]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	813b      	strh	r3, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <I2C_RequestMemoryRead+0xa4>)
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2300      	movs	r3, #0
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fa0a 	bl	800306c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f89d 	bl	8002d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e02c      	b.n	8002cc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c7c:	e015      	b.n	8002caa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7e:	893b      	ldrh	r3, [r7, #8]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f883 	bl	8002d9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e012      	b.n	8002cc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca0:	893b      	ldrh	r3, [r7, #8]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2140      	movs	r1, #64	; 0x40
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f831 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	80002000 	.word	0x80002000

08002cd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d103      	bne.n	8002cf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d007      	beq.n	8002d10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	619a      	str	r2, [r3, #24]
  }
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	e022      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d01e      	beq.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7ff f951 	bl	8001fdc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d113      	bne.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00f      	b.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d0cd      	beq.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da8:	e02c      	b.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f870 	bl	8002e94 <I2C_IsErrorOccurred>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e02a      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d01e      	beq.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7ff f909 	bl	8001fdc <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d113      	bne.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e007      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d1cb      	bne.n	8002daa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e28:	e028      	b.n	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f830 	bl	8002e94 <I2C_IsErrorOccurred>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e026      	b.n	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7ff f8cd 	bl	8001fdc <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d113      	bne.n	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d1cf      	bne.n	8002e2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d075      	beq.n	8002fac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ec8:	e056      	b.n	8002f78 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d052      	beq.n	8002f78 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7ff f883 	bl	8001fdc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_IsErrorOccurred+0x54>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d147      	bne.n	8002f78 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002efa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0a:	d12e      	bne.n	8002f6a <I2C_IsErrorOccurred+0xd6>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f12:	d02a      	beq.n	8002f6a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d027      	beq.n	8002f6a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f2a:	f7ff f857 	bl	8001fdc <HAL_GetTick>
 8002f2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f30:	e01b      	b.n	8002f6a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f32:	f7ff f853 	bl	8001fdc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b19      	cmp	r3, #25
 8002f3e:	d914      	bls.n	8002f6a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d1dc      	bne.n	8002f32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d003      	beq.n	8002f8e <I2C_IsErrorOccurred+0xfa>
 8002f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d09d      	beq.n	8002eca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003012:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800301a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01c      	beq.n	800305c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff fe56 	bl	8002cd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <I2C_IsErrorOccurred+0x1d4>)
 8003034:	400b      	ands	r3, r1
 8003036:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800305c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003060:	4618      	mov	r0, r3
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fe00e800 	.word	0xfe00e800

0800306c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	4613      	mov	r3, r2
 800307c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003084:	7a7b      	ldrb	r3, [r7, #9]
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800308c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	4313      	orrs	r3, r2
 8003096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800309a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	0d5b      	lsrs	r3, r3, #21
 80030a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <I2C_TransferConfig+0x60>)
 80030ac:	430b      	orrs	r3, r1
 80030ae:	43db      	mvns	r3, r3
 80030b0:	ea02 0103 	and.w	r1, r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	03ff63ff 	.word	0x03ff63ff

080030d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d138      	bne.n	8003158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e032      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_PWREx_GetVoltageRange+0x18>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40007000 	.word	0x40007000

08003184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003192:	d130      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d038      	beq.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031aa:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2232      	movs	r2, #50	; 0x32
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c8:	e002      	b.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d102      	bne.n	80031e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f2      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	d110      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e00f      	b.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d007      	beq.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320c:	4a05      	ldr	r2, [pc, #20]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40007000 	.word	0x40007000
 8003228:	20000000 	.word	0x20000000
 800322c:	431bde83 	.word	0x431bde83

08003230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e3ca      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003242:	4b97      	ldr	r3, [pc, #604]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800324c:	4b94      	ldr	r3, [pc, #592]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80e4 	beq.w	800342c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_RCC_OscConfig+0x4a>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	f040 808b 	bne.w	8003388 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8087 	bne.w	8003388 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e3a2      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_RCC_OscConfig+0x7c>
 80032a2:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_OscConfig+0x88>
 80032ac:	4b7c      	ldr	r3, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d223      	bcs.n	8003304 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fd87 	bl	8003dd4 <RCC_SetFlashLatencyFromMSIRange>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e383      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d0:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a72      	ldr	r2, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032d6:	f043 0308 	orr.w	r3, r3, #8
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	496d      	ldr	r1, [pc, #436]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ee:	4b6c      	ldr	r3, [pc, #432]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	4968      	ldr	r1, [pc, #416]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
 8003302:	e025      	b.n	8003350 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003304:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4960      	ldr	r1, [pc, #384]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003322:	4b5f      	ldr	r3, [pc, #380]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	495b      	ldr	r1, [pc, #364]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd47 	bl	8003dd4 <RCC_SetFlashLatencyFromMSIRange>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e343      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003350:	f000 fc4a 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	4950      	ldr	r1, [pc, #320]	; (80034a4 <HAL_RCC_OscConfig+0x274>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
 800336c:	4a4e      	ldr	r2, [pc, #312]	; (80034a8 <HAL_RCC_OscConfig+0x278>)
 800336e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003370:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <HAL_RCC_OscConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe f84b 	bl	8001410 <HAL_InitTick>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d052      	beq.n	800342a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	e327      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d032      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003390:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a42      	ldr	r2, [pc, #264]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800339c:	f7fe fe1e 	bl	8001fdc <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a4:	f7fe fe1a 	bl	8001fdc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e310      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a36      	ldr	r2, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4931      	ldr	r1, [pc, #196]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e0:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	492c      	ldr	r1, [pc, #176]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	e01a      	b.n	800342c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003402:	f7fe fdeb 	bl	8001fdc <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340a:	f7fe fde7 	bl	8001fdc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e2dd      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x1da>
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d074      	beq.n	8003522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b08      	cmp	r3, #8
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x21a>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d10e      	bne.n	8003462 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d10b      	bne.n	8003462 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d064      	beq.n	8003520 <HAL_RCC_OscConfig+0x2f0>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d160      	bne.n	8003520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e2ba      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x24a>
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e026      	b.n	80034c8 <HAL_RCC_OscConfig+0x298>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003482:	d115      	bne.n	80034b0 <HAL_RCC_OscConfig+0x280>
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800348a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x298>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08009440 	.word	0x08009440
 80034a8:	20000000 	.word	0x20000000
 80034ac:	2000006c 	.word	0x2000006c
 80034b0:	4ba0      	ldr	r3, [pc, #640]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a9f      	ldr	r2, [pc, #636]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b9d      	ldr	r3, [pc, #628]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fd84 	bl	8001fdc <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe fd80 	bl	8001fdc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e276      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x2a8>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fd70 	bl	8001fdc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe fd6c 	bl	8001fdc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e262      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x2d0>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d060      	beq.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x310>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d119      	bne.n	800356e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d116      	bne.n	800356e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_OscConfig+0x328>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e23f      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	4973      	ldr	r1, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356c:	e040      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d023      	beq.n	80035be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003576:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fe fd2b 	bl	8001fdc <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358a:	f7fe fd27 	bl	8001fdc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e21d      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359c:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	495f      	ldr	r1, [pc, #380]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
 80035bc:	e018      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5c      	ldr	r2, [pc, #368]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe fd07 	bl	8001fdc <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fe fd03 	bl	8001fdc <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1f9      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03c      	beq.n	8003676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01c      	beq.n	800363e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360a:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe fce2 	bl	8001fdc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe fcde 	bl	8001fdc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1d4      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ef      	beq.n	800361c <HAL_RCC_OscConfig+0x3ec>
 800363c:	e01b      	b.n	8003676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003644:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe fcc5 	bl	8001fdc <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fcc1 	bl	8001fdc <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1b7      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ef      	bne.n	8003656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80a6 	beq.w	80037d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003684:	2300      	movs	r3, #0
 8003686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	4a26      	ldr	r2, [pc, #152]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6593      	str	r3, [r2, #88]	; 0x58
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d118      	bne.n	80036ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036bc:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c8:	f7fe fc88 	bl	8001fdc <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d0:	f7fe fc84 	bl	8001fdc <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e17a      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d108      	bne.n	8003708 <HAL_RCC_OscConfig+0x4d8>
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003706:	e029      	b.n	800375c <HAL_RCC_OscConfig+0x52c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d115      	bne.n	800373c <HAL_RCC_OscConfig+0x50c>
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	4a03      	ldr	r2, [pc, #12]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003730:	e014      	b.n	800375c <HAL_RCC_OscConfig+0x52c>
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	4b9c      	ldr	r3, [pc, #624]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a9b      	ldr	r2, [pc, #620]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800374c:	4b98      	ldr	r3, [pc, #608]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	4a97      	ldr	r2, [pc, #604]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fc3a 	bl	8001fdc <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fe fc36 	bl	8001fdc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e12a      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003782:	4b8b      	ldr	r3, [pc, #556]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ed      	beq.n	800376c <HAL_RCC_OscConfig+0x53c>
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fe fc23 	bl	8001fdc <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe fc1f 	bl	8001fdc <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e113      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b0:	4b7f      	ldr	r3, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ed      	bne.n	800379a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037be:	7ffb      	ldrb	r3, [r7, #31]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c4:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a79      	ldr	r2, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80fe 	beq.w	80039d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	2b02      	cmp	r3, #2
 80037e0:	f040 80d0 	bne.w	8003984 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037e4:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0203 	and.w	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d130      	bne.n	800385a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	3b01      	subs	r3, #1
 8003804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d127      	bne.n	800385a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d11f      	bne.n	800385a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003824:	2a07      	cmp	r2, #7
 8003826:	bf14      	ite	ne
 8003828:	2201      	movne	r2, #1
 800382a:	2200      	moveq	r2, #0
 800382c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800382e:	4293      	cmp	r3, r2
 8003830:	d113      	bne.n	800385a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d109      	bne.n	800385a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d06e      	beq.n	8003938 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d069      	beq.n	8003934 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003860:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0ad      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a4b      	ldr	r2, [pc, #300]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003888:	f7fe fba8 	bl	8001fdc <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe fba4 	bl	8001fdc <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e09a      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a2:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ae:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCC_OscConfig+0x784>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038be:	3a01      	subs	r2, #1
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038c8:	0212      	lsls	r2, r2, #8
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0552      	lsls	r2, r2, #21
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038dc:	0852      	lsrs	r2, r2, #1
 80038de:	3a01      	subs	r2, #1
 80038e0:	0652      	lsls	r2, r2, #25
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038e8:	0912      	lsrs	r2, r2, #4
 80038ea:	0452      	lsls	r2, r2, #17
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4930      	ldr	r1, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2d      	ldr	r2, [pc, #180]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800390c:	f7fe fb66 	bl	8001fdc <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fb62 	bl	8001fdc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e058      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003932:	e050      	b.n	80039d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e04f      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d148      	bne.n	80039d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800395c:	f7fe fb3e 	bl	8001fdc <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fe fb3a 	bl	8001fdc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e030      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x734>
 8003982:	e028      	b.n	80039d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d023      	beq.n	80039d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <HAL_RCC_OscConfig+0x780>)
 8003990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fe fb21 	bl	8001fdc <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399c:	e00c      	b.n	80039b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fb1d 	bl	8001fdc <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d905      	bls.n	80039b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e013      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCC_OscConfig+0x7b0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ec      	bne.n	800399e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x7b0>)
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4905      	ldr	r1, [pc, #20]	; (80039e0 <HAL_RCC_OscConfig+0x7b0>)
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCC_OscConfig+0x7b4>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	60cb      	str	r3, [r1, #12]
 80039d0:	e001      	b.n	80039d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	feeefffc 	.word	0xfeeefffc

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0e7      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b75      	ldr	r3, [pc, #468]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4970      	ldr	r1, [pc, #448]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b6e      	ldr	r3, [pc, #440]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0cf      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d908      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4960      	ldr	r1, [pc, #384]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d04c      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d121      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0a6      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a86:	4b54      	ldr	r3, [pc, #336]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d115      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e09a      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e08e      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aae:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e086      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4943      	ldr	r1, [pc, #268]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fa84 	bl	8001fdc <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fa80 	bl	8001fdc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e06e      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d208      	bcs.n	8003b2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	492b      	ldr	r1, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2e:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d210      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 0207 	bic.w	r2, r3, #7
 8003b44:	4923      	ldr	r1, [pc, #140]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e036      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4918      	ldr	r1, [pc, #96]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4910      	ldr	r1, [pc, #64]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9c:	f000 f824 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	490b      	ldr	r1, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1f4>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1f8>)
 8003bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1fc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fc25 	bl	8001410 <HAL_InitTick>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bca:	7afb      	ldrb	r3, [r7, #11]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08009440 	.word	0x08009440
 8003be0:	20000000 	.word	0x20000000
 8003be4:	2000006c 	.word	0x2000006c

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c00:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d121      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d11e      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c1c:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e005      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c38:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c44:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e004      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d134      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0xac>
 8003c8c:	e005      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c90:	617b      	str	r3, [r7, #20]
      break;
 8003c92:	e005      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c96:	617b      	str	r3, [r7, #20]
      break;
 8003c98:	e002      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	617b      	str	r3, [r7, #20]
      break;
 8003c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	3301      	adds	r3, #1
 8003cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	0e5b      	lsrs	r3, r3, #25
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08009458 	.word	0x08009458
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08009450 	.word	0x08009450

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d48:	f7ff ffda 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08009450 	.word	0x08009450

08003d70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_GetClockConfig+0x5c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0203 	and.w	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <HAL_RCC_GetClockConfig+0x5c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCC_GetClockConfig+0x5c>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCC_GetClockConfig+0x5c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	08db      	lsrs	r3, r3, #3
 8003daa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_RCC_GetClockConfig+0x60>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0207 	and.w	r2, r3, #7
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	601a      	str	r2, [r3, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40022000 	.word	0x40022000

08003dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dec:	f7ff f9bc 	bl	8003168 <HAL_PWREx_GetVoltageRange>
 8003df0:	6178      	str	r0, [r7, #20]
 8003df2:	e014      	b.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e0c:	f7ff f9ac 	bl	8003168 <HAL_PWREx_GetVoltageRange>
 8003e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d10b      	bne.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d919      	bls.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003e30:	d902      	bls.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e32:	2302      	movs	r3, #2
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	e013      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e38:	2301      	movs	r3, #1
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e010      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d902      	bls.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e44:	2303      	movs	r3, #3
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e00a      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d102      	bne.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e50:	2302      	movs	r3, #2
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e004      	b.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d101      	bne.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 0207 	bic.w	r2, r3, #7
 8003e68:	4909      	ldr	r1, [pc, #36]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d001      	beq.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40022000 	.word	0x40022000

08003e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d041      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eb8:	d02a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ebe:	d824      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eca:	d81e      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed4:	d010      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ed6:	e018      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed8:	4b86      	ldr	r3, [pc, #536]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a85      	ldr	r2, [pc, #532]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee4:	e015      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fabb 	bl	8004468 <RCCEx_PLLSAI1_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef6:	e00c      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3320      	adds	r3, #32
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fba6 	bl	8004650 <RCCEx_PLLSAI2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f18:	4b76      	ldr	r3, [pc, #472]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f26:	4973      	ldr	r1, [pc, #460]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d041      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f48:	d02a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f4e:	d824      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f5a:	d81e      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f64:	d010      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f66:	e018      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f68:	4b62      	ldr	r3, [pc, #392]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a61      	ldr	r2, [pc, #388]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f74:	e015      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fa73 	bl	8004468 <RCCEx_PLLSAI1_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f86:	e00c      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3320      	adds	r3, #32
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fb5e 	bl	8004650 <RCCEx_PLLSAI2_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fa8:	4b52      	ldr	r3, [pc, #328]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb6:	494f      	ldr	r1, [pc, #316]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fbe:	e001      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a0 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00d      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fec:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004004:	2301      	movs	r3, #1
 8004006:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004008:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004014:	f7fd ffe2 	bl	8001fdc <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800401a:	e009      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fd ffde 	bl	8001fdc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d902      	bls.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	74fb      	strb	r3, [r7, #19]
        break;
 800402e:	e005      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004030:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ef      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d15c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004042:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01f      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	429a      	cmp	r2, r3
 800405e:	d019      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fd ff9d 	bl	8001fdc <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a4:	e00b      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd ff99 	bl	8001fdc <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d902      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	74fb      	strb	r3, [r7, #19]
            break;
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ec      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d2:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e2:	4904      	ldr	r1, [pc, #16]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ea:	e009      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004100:	7c7b      	ldrb	r3, [r7, #17]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b9e      	ldr	r3, [pc, #632]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a9d      	ldr	r2, [pc, #628]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	4b98      	ldr	r3, [pc, #608]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f023 0203 	bic.w	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	4994      	ldr	r1, [pc, #592]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004140:	4b8f      	ldr	r3, [pc, #572]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 020c 	bic.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	498c      	ldr	r1, [pc, #560]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004162:	4b87      	ldr	r3, [pc, #540]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4983      	ldr	r1, [pc, #524]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004184:	4b7e      	ldr	r3, [pc, #504]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	497b      	ldr	r1, [pc, #492]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a6:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b4:	4972      	ldr	r1, [pc, #456]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c8:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	496a      	ldr	r1, [pc, #424]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ea:	4b65      	ldr	r3, [pc, #404]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	4961      	ldr	r1, [pc, #388]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800420c:	4b5c      	ldr	r3, [pc, #368]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421a:	4959      	ldr	r1, [pc, #356]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	4950      	ldr	r1, [pc, #320]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	4948      	ldr	r1, [pc, #288]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004272:	4b43      	ldr	r3, [pc, #268]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	493f      	ldr	r1, [pc, #252]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d028      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004294:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a2:	4937      	ldr	r1, [pc, #220]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4b32      	ldr	r3, [pc, #200]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a31      	ldr	r2, [pc, #196]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
 80042c0:	e011      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f8c8 	bl	8004468 <RCCEx_PLLSAI1_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d028      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	491f      	ldr	r1, [pc, #124]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004310:	d106      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431c:	60d3      	str	r3, [r2, #12]
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f899 	bl	8004468 <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02b      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	4908      	ldr	r1, [pc, #32]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436e:	d109      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a02      	ldr	r2, [pc, #8]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	e014      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f867 	bl	8004468 <RCCEx_PLLSAI1_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02f      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c2:	4928      	ldr	r1, [pc, #160]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f844 	bl	8004468 <RCCEx_PLLSAI1_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d014      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	74bb      	strb	r3, [r7, #18]
 80043ee:	e011      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3320      	adds	r3, #32
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f925 	bl	8004650 <RCCEx_PLLSAI2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442e:	490d      	ldr	r1, [pc, #52]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800445a:	7cbb      	ldrb	r3, [r7, #18]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000

08004468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004476:	4b75      	ldr	r3, [pc, #468]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004482:	4b72      	ldr	r3, [pc, #456]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0203 	and.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d10d      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
       ||
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800449a:	4b6c      	ldr	r3, [pc, #432]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
       ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d047      	beq.n	800453e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	e044      	b.n	800453e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d018      	beq.n	80044ee <RCCEx_PLLSAI1_Config+0x86>
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d825      	bhi.n	800450c <RCCEx_PLLSAI1_Config+0xa4>
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <RCCEx_PLLSAI1_Config+0x62>
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d009      	beq.n	80044dc <RCCEx_PLLSAI1_Config+0x74>
 80044c8:	e020      	b.n	800450c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ca:	4b60      	ldr	r3, [pc, #384]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11d      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044da:	e01a      	b.n	8004512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044dc:	4b5b      	ldr	r3, [pc, #364]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ec:	e013      	b.n	8004516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ee:	4b57      	ldr	r3, [pc, #348]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044fa:	4b54      	ldr	r3, [pc, #336]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800450a:	e006      	b.n	800451a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e004      	b.n	800451c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800451a:	bf00      	nop
    }

    if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004522:	4b4a      	ldr	r3, [pc, #296]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	3b01      	subs	r3, #1
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	430b      	orrs	r3, r1
 8004538:	4944      	ldr	r1, [pc, #272]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d17d      	bne.n	8004640 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004544:	4b41      	ldr	r3, [pc, #260]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a40      	ldr	r2, [pc, #256]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004550:	f7fd fd44 	bl	8001fdc <HAL_GetTick>
 8004554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004556:	e009      	b.n	800456c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004558:	f7fd fd40 	bl	8001fdc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	73fb      	strb	r3, [r7, #15]
        break;
 800456a:	e005      	b.n	8004578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456c:	4b37      	ldr	r3, [pc, #220]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ef      	bne.n	8004558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d160      	bne.n	8004640 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d111      	bne.n	80045a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800458c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6892      	ldr	r2, [r2, #8]
 8004594:	0211      	lsls	r1, r2, #8
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68d2      	ldr	r2, [r2, #12]
 800459a:	0912      	lsrs	r2, r2, #4
 800459c:	0452      	lsls	r2, r2, #17
 800459e:	430a      	orrs	r2, r1
 80045a0:	492a      	ldr	r1, [pc, #168]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]
 80045a6:	e027      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d112      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ae:	4b27      	ldr	r3, [pc, #156]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6892      	ldr	r2, [r2, #8]
 80045be:	0211      	lsls	r1, r2, #8
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6912      	ldr	r2, [r2, #16]
 80045c4:	0852      	lsrs	r2, r2, #1
 80045c6:	3a01      	subs	r2, #1
 80045c8:	0552      	lsls	r2, r2, #21
 80045ca:	430a      	orrs	r2, r1
 80045cc:	491f      	ldr	r1, [pc, #124]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	610b      	str	r3, [r1, #16]
 80045d2:	e011      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6892      	ldr	r2, [r2, #8]
 80045e4:	0211      	lsls	r1, r2, #8
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6952      	ldr	r2, [r2, #20]
 80045ea:	0852      	lsrs	r2, r2, #1
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0652      	lsls	r2, r2, #25
 80045f0:	430a      	orrs	r2, r1
 80045f2:	4916      	ldr	r1, [pc, #88]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a13      	ldr	r2, [pc, #76]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004602:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fd fcea 	bl	8001fdc <HAL_GetTick>
 8004608:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800460a:	e009      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800460c:	f7fd fce6 	bl	8001fdc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d902      	bls.n	8004620 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	73fb      	strb	r3, [r7, #15]
          break;
 800461e:	e005      	b.n	800462c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ef      	beq.n	800460c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	4904      	ldr	r1, [pc, #16]	; (800464c <RCCEx_PLLSAI1_Config+0x1e4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000

08004650 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d018      	beq.n	800469c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800466a:	4b67      	ldr	r3, [pc, #412]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0203 	and.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d10d      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
       ||
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004682:	4b61      	ldr	r3, [pc, #388]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
       ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d047      	beq.n	8004726 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e044      	b.n	8004726 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d018      	beq.n	80046d6 <RCCEx_PLLSAI2_Config+0x86>
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d825      	bhi.n	80046f4 <RCCEx_PLLSAI2_Config+0xa4>
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d002      	beq.n	80046b2 <RCCEx_PLLSAI2_Config+0x62>
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d009      	beq.n	80046c4 <RCCEx_PLLSAI2_Config+0x74>
 80046b0:	e020      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046b2:	4b55      	ldr	r3, [pc, #340]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11d      	bne.n	80046fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c2:	e01a      	b.n	80046fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d116      	bne.n	80046fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d4:	e013      	b.n	80046fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046d6:	4b4c      	ldr	r3, [pc, #304]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046e2:	4b49      	ldr	r3, [pc, #292]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046f2:	e006      	b.n	8004702 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      break;
 80046f8:	e004      	b.n	8004704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004702:	bf00      	nop
    }

    if(status == HAL_OK)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	430b      	orrs	r3, r1
 8004720:	4939      	ldr	r1, [pc, #228]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d167      	bne.n	80047fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a35      	ldr	r2, [pc, #212]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004738:	f7fd fc50 	bl	8001fdc <HAL_GetTick>
 800473c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800473e:	e009      	b.n	8004754 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004740:	f7fd fc4c 	bl	8001fdc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d902      	bls.n	8004754 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	73fb      	strb	r3, [r7, #15]
        break;
 8004752:	e005      	b.n	8004760 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004754:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ef      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d14a      	bne.n	80047fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d111      	bne.n	8004790 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800476c:	4b26      	ldr	r3, [pc, #152]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6892      	ldr	r2, [r2, #8]
 800477c:	0211      	lsls	r1, r2, #8
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	0912      	lsrs	r2, r2, #4
 8004784:	0452      	lsls	r2, r2, #17
 8004786:	430a      	orrs	r2, r1
 8004788:	491f      	ldr	r1, [pc, #124]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	614b      	str	r3, [r1, #20]
 800478e:	e011      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004790:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	0211      	lsls	r1, r2, #8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6912      	ldr	r2, [r2, #16]
 80047a6:	0852      	lsrs	r2, r2, #1
 80047a8:	3a01      	subs	r2, #1
 80047aa:	0652      	lsls	r2, r2, #25
 80047ac:	430a      	orrs	r2, r1
 80047ae:	4916      	ldr	r1, [pc, #88]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047b4:	4b14      	ldr	r3, [pc, #80]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a13      	ldr	r2, [pc, #76]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd fc0c 	bl	8001fdc <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047c6:	e009      	b.n	80047dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047c8:	f7fd fc08 	bl	8001fdc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d902      	bls.n	80047dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	73fb      	strb	r3, [r7, #15]
          break;
 80047da:	e005      	b.n	80047e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4904      	ldr	r1, [pc, #16]	; (8004808 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e049      	b.n	80048b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f841 	bl	80048ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 f9f8 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d001      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e04f      	b.n	8004988 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <HAL_TIM_Base_Start_IT+0xc4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01d      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x76>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d018      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x76>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_TIM_Base_Start_IT+0xc8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x76>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_TIM_Base_Start_IT+0xcc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x76>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x76>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x76>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d115      	bne.n	8004972 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <HAL_TIM_Base_Start_IT+0xdc>)
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d015      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0xb4>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495e:	d011      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	e008      	b.n	8004984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e000      	b.n	8004986 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40013400 	.word	0x40013400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d122      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d11b      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0202 	mvn.w	r2, #2
 80049dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f905 	bl	8004c02 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8f7 	bl	8004bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f908 	bl	8004c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d122      	bne.n	8004a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d11b      	bne.n	8004a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0204 	mvn.w	r2, #4
 8004a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8db 	bl	8004c02 <HAL_TIM_IC_CaptureCallback>
 8004a4c:	e005      	b.n	8004a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8cd 	bl	8004bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f8de 	bl	8004c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d122      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0208 	mvn.w	r2, #8
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8b1 	bl	8004c02 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8a3 	bl	8004bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8b4 	bl	8004c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d122      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d11b      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0210 	mvn.w	r2, #16
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2208      	movs	r2, #8
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f887 	bl	8004c02 <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f879 	bl	8004bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f88a 	bl	8004c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0201 	mvn.w	r2, #1
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fbd4 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d10e      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d107      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f914 	bl	8004d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6e:	d10e      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d107      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f907 	bl	8004d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d10e      	bne.n	8004bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d107      	bne.n	8004bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f838 	bl	8004c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d10e      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d107      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0220 	mvn.w	r2, #32
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8c7 	bl	8004d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d00f      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3d      	ldr	r2, [pc, #244]	; (8004d58 <TIM_Base_SetConfig+0x118>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <TIM_Base_SetConfig+0x11c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <TIM_Base_SetConfig+0x120>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d108      	bne.n	8004c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01f      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d01b      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <TIM_Base_SetConfig+0x118>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d017      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <TIM_Base_SetConfig+0x11c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <TIM_Base_SetConfig+0x120>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <TIM_Base_SetConfig+0x128>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_Base_SetConfig+0x130>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00f      	beq.n	8004d38 <TIM_Base_SetConfig+0xf8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0xf8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <TIM_Base_SetConfig+0x128>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0xf8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a10      	ldr	r2, [pc, #64]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0xf8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <TIM_Base_SetConfig+0x130>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e040      	b.n	8004e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fabe 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8c0 	bl	8004f74 <UART_SetConfig>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb6c 	bl	80054e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fbf3 	bl	8005628 <UART_CheckIdleState>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	f040 8082 	bne.w	8004f6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_UART_Transmit+0x26>
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07a      	b.n	8004f6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Transmit+0x38>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e073      	b.n	8004f6c <HAL_UART_Transmit+0x120>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2221      	movs	r2, #33	; 0x21
 8004e98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e9a:	f7fd f89f 	bl	8001fdc <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	88fa      	ldrh	r2, [r7, #6]
 8004ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d108      	bne.n	8004ecc <HAL_UART_Transmit+0x80>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e003      	b.n	8004ed4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004edc:	e02d      	b.n	8004f3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fbe6 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e039      	b.n	8004f6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	881a      	ldrh	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	3302      	adds	r3, #2
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	e008      	b.n	8004f28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1cb      	bne.n	8004ede <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2140      	movs	r1, #64	; 0x40
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fbb2 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e005      	b.n	8004f6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3720      	adds	r7, #32
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4ba4      	ldr	r3, [pc, #656]	; (8005234 <UART_SetConfig+0x2c0>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a99      	ldr	r2, [pc, #612]	; (8005238 <UART_SetConfig+0x2c4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a90      	ldr	r2, [pc, #576]	; (800523c <UART_SetConfig+0x2c8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d126      	bne.n	800504c <UART_SetConfig+0xd8>
 8004ffe:	4b90      	ldr	r3, [pc, #576]	; (8005240 <UART_SetConfig+0x2cc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d81b      	bhi.n	8005044 <UART_SetConfig+0xd0>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0xa0>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005025 	.word	0x08005025
 8005018:	08005035 	.word	0x08005035
 800501c:	0800502d 	.word	0x0800502d
 8005020:	0800503d 	.word	0x0800503d
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e116      	b.n	800525a <UART_SetConfig+0x2e6>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e112      	b.n	800525a <UART_SetConfig+0x2e6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e10e      	b.n	800525a <UART_SetConfig+0x2e6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e10a      	b.n	800525a <UART_SetConfig+0x2e6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e106      	b.n	800525a <UART_SetConfig+0x2e6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7c      	ldr	r2, [pc, #496]	; (8005244 <UART_SetConfig+0x2d0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d138      	bne.n	80050c8 <UART_SetConfig+0x154>
 8005056:	4b7a      	ldr	r3, [pc, #488]	; (8005240 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b0c      	cmp	r3, #12
 8005062:	d82d      	bhi.n	80050c0 <UART_SetConfig+0x14c>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0xf8>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080050c1 	.word	0x080050c1
 8005074:	080050c1 	.word	0x080050c1
 8005078:	080050c1 	.word	0x080050c1
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050c1 	.word	0x080050c1
 8005088:	080050c1 	.word	0x080050c1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050c1 	.word	0x080050c1
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050c1 	.word	0x080050c1
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e0d8      	b.n	800525a <UART_SetConfig+0x2e6>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e0d4      	b.n	800525a <UART_SetConfig+0x2e6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e0d0      	b.n	800525a <UART_SetConfig+0x2e6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e0cc      	b.n	800525a <UART_SetConfig+0x2e6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e0c8      	b.n	800525a <UART_SetConfig+0x2e6>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a5e      	ldr	r2, [pc, #376]	; (8005248 <UART_SetConfig+0x2d4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d125      	bne.n	800511e <UART_SetConfig+0x1aa>
 80050d2:	4b5b      	ldr	r3, [pc, #364]	; (8005240 <UART_SetConfig+0x2cc>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d016      	beq.n	800510e <UART_SetConfig+0x19a>
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d818      	bhi.n	8005116 <UART_SetConfig+0x1a2>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d00a      	beq.n	80050fe <UART_SetConfig+0x18a>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d814      	bhi.n	8005116 <UART_SetConfig+0x1a2>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <UART_SetConfig+0x182>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d008      	beq.n	8005106 <UART_SetConfig+0x192>
 80050f4:	e00f      	b.n	8005116 <UART_SetConfig+0x1a2>
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fc:	e0ad      	b.n	800525a <UART_SetConfig+0x2e6>
 80050fe:	2302      	movs	r3, #2
 8005100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005104:	e0a9      	b.n	800525a <UART_SetConfig+0x2e6>
 8005106:	2304      	movs	r3, #4
 8005108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510c:	e0a5      	b.n	800525a <UART_SetConfig+0x2e6>
 800510e:	2308      	movs	r3, #8
 8005110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005114:	e0a1      	b.n	800525a <UART_SetConfig+0x2e6>
 8005116:	2310      	movs	r3, #16
 8005118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511c:	e09d      	b.n	800525a <UART_SetConfig+0x2e6>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4a      	ldr	r2, [pc, #296]	; (800524c <UART_SetConfig+0x2d8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d125      	bne.n	8005174 <UART_SetConfig+0x200>
 8005128:	4b45      	ldr	r3, [pc, #276]	; (8005240 <UART_SetConfig+0x2cc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005132:	2bc0      	cmp	r3, #192	; 0xc0
 8005134:	d016      	beq.n	8005164 <UART_SetConfig+0x1f0>
 8005136:	2bc0      	cmp	r3, #192	; 0xc0
 8005138:	d818      	bhi.n	800516c <UART_SetConfig+0x1f8>
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d00a      	beq.n	8005154 <UART_SetConfig+0x1e0>
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d814      	bhi.n	800516c <UART_SetConfig+0x1f8>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <UART_SetConfig+0x1d8>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d008      	beq.n	800515c <UART_SetConfig+0x1e8>
 800514a:	e00f      	b.n	800516c <UART_SetConfig+0x1f8>
 800514c:	2300      	movs	r3, #0
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e082      	b.n	800525a <UART_SetConfig+0x2e6>
 8005154:	2302      	movs	r3, #2
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e07e      	b.n	800525a <UART_SetConfig+0x2e6>
 800515c:	2304      	movs	r3, #4
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e07a      	b.n	800525a <UART_SetConfig+0x2e6>
 8005164:	2308      	movs	r3, #8
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e076      	b.n	800525a <UART_SetConfig+0x2e6>
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e072      	b.n	800525a <UART_SetConfig+0x2e6>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	; (8005250 <UART_SetConfig+0x2dc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d12a      	bne.n	80051d4 <UART_SetConfig+0x260>
 800517e:	4b30      	ldr	r3, [pc, #192]	; (8005240 <UART_SetConfig+0x2cc>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518c:	d01a      	beq.n	80051c4 <UART_SetConfig+0x250>
 800518e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005192:	d81b      	bhi.n	80051cc <UART_SetConfig+0x258>
 8005194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005198:	d00c      	beq.n	80051b4 <UART_SetConfig+0x240>
 800519a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519e:	d815      	bhi.n	80051cc <UART_SetConfig+0x258>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <UART_SetConfig+0x238>
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d008      	beq.n	80051bc <UART_SetConfig+0x248>
 80051aa:	e00f      	b.n	80051cc <UART_SetConfig+0x258>
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e052      	b.n	800525a <UART_SetConfig+0x2e6>
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e04e      	b.n	800525a <UART_SetConfig+0x2e6>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e04a      	b.n	800525a <UART_SetConfig+0x2e6>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e046      	b.n	800525a <UART_SetConfig+0x2e6>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e042      	b.n	800525a <UART_SetConfig+0x2e6>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <UART_SetConfig+0x2c4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d13a      	bne.n	8005254 <UART_SetConfig+0x2e0>
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <UART_SetConfig+0x2cc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ec:	d01a      	beq.n	8005224 <UART_SetConfig+0x2b0>
 80051ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051f2:	d81b      	bhi.n	800522c <UART_SetConfig+0x2b8>
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f8:	d00c      	beq.n	8005214 <UART_SetConfig+0x2a0>
 80051fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fe:	d815      	bhi.n	800522c <UART_SetConfig+0x2b8>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <UART_SetConfig+0x298>
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d008      	beq.n	800521c <UART_SetConfig+0x2a8>
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x2b8>
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e022      	b.n	800525a <UART_SetConfig+0x2e6>
 8005214:	2302      	movs	r3, #2
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e01e      	b.n	800525a <UART_SetConfig+0x2e6>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e01a      	b.n	800525a <UART_SetConfig+0x2e6>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e016      	b.n	800525a <UART_SetConfig+0x2e6>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e012      	b.n	800525a <UART_SetConfig+0x2e6>
 8005234:	efff69f3 	.word	0xefff69f3
 8005238:	40008000 	.word	0x40008000
 800523c:	40013800 	.word	0x40013800
 8005240:	40021000 	.word	0x40021000
 8005244:	40004400 	.word	0x40004400
 8005248:	40004800 	.word	0x40004800
 800524c:	40004c00 	.word	0x40004c00
 8005250:	40005000 	.word	0x40005000
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a9f      	ldr	r2, [pc, #636]	; (80054dc <UART_SetConfig+0x568>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d17a      	bne.n	800535a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005268:	2b08      	cmp	r3, #8
 800526a:	d824      	bhi.n	80052b6 <UART_SetConfig+0x342>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x300>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005299 	.word	0x08005299
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a1 	.word	0x080052a1
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052a7 	.word	0x080052a7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052b7 	.word	0x080052b7
 8005290:	080052b7 	.word	0x080052b7
 8005294:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe fd3e 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 800529c:	61f8      	str	r0, [r7, #28]
        break;
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b8f      	ldr	r3, [pc, #572]	; (80054e0 <UART_SetConfig+0x56c>)
 80052a2:	61fb      	str	r3, [r7, #28]
        break;
 80052a4:	e00d      	b.n	80052c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe fc9f 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 80052aa:	61f8      	str	r0, [r7, #28]
        break;
 80052ac:	e009      	b.n	80052c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b2:	61fb      	str	r3, [r7, #28]
        break;
 80052b4:	e005      	b.n	80052c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80fb 	beq.w	80054c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4413      	add	r3, r2
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d305      	bcc.n	80052e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d903      	bls.n	80052ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052ec:	e0e8      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2200      	movs	r2, #0
 80052f2:	461c      	mov	r4, r3
 80052f4:	4615      	mov	r5, r2
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	022b      	lsls	r3, r5, #8
 8005300:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005304:	0222      	lsls	r2, r4, #8
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	6849      	ldr	r1, [r1, #4]
 800530a:	0849      	lsrs	r1, r1, #1
 800530c:	2000      	movs	r0, #0
 800530e:	4688      	mov	r8, r1
 8005310:	4681      	mov	r9, r0
 8005312:	eb12 0a08 	adds.w	sl, r2, r8
 8005316:	eb43 0b09 	adc.w	fp, r3, r9
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005328:	4650      	mov	r0, sl
 800532a:	4659      	mov	r1, fp
 800532c:	f7fb fc3c 	bl	8000ba8 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4613      	mov	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800533e:	d308      	bcc.n	8005352 <UART_SetConfig+0x3de>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005346:	d204      	bcs.n	8005352 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	60da      	str	r2, [r3, #12]
 8005350:	e0b6      	b.n	80054c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005358:	e0b2      	b.n	80054c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005362:	d15e      	bne.n	8005422 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005368:	2b08      	cmp	r3, #8
 800536a:	d828      	bhi.n	80053be <UART_SetConfig+0x44a>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x400>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053af 	.word	0x080053af
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005398:	f7fe fcbe 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 800539c:	61f8      	str	r0, [r7, #28]
        break;
 800539e:	e014      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe fcd0 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 80053a4:	61f8      	str	r0, [r7, #28]
        break;
 80053a6:	e010      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <UART_SetConfig+0x56c>)
 80053aa:	61fb      	str	r3, [r7, #28]
        break;
 80053ac:	e00d      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fe fc1b 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 80053b2:	61f8      	str	r0, [r7, #28]
        break;
 80053b4:	e009      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	61fb      	str	r3, [r7, #28]
        break;
 80053bc:	e005      	b.n	80053ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d077      	beq.n	80054c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	005a      	lsls	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	441a      	add	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d916      	bls.n	800541a <UART_SetConfig+0x4a6>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f2:	d212      	bcs.n	800541a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f023 030f 	bic.w	r3, r3, #15
 80053fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	b29b      	uxth	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	b29a      	uxth	r2, r3
 800540a:	8afb      	ldrh	r3, [r7, #22]
 800540c:	4313      	orrs	r3, r2
 800540e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	8afa      	ldrh	r2, [r7, #22]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e052      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005420:	e04e      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005426:	2b08      	cmp	r3, #8
 8005428:	d827      	bhi.n	800547a <UART_SetConfig+0x506>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x4bc>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	0800547b 	.word	0x0800547b
 8005440:	0800546b 	.word	0x0800546b
 8005444:	0800547b 	.word	0x0800547b
 8005448:	0800547b 	.word	0x0800547b
 800544c:	0800547b 	.word	0x0800547b
 8005450:	08005473 	.word	0x08005473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fe fc60 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e014      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800545c:	f7fe fc72 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005460:	61f8      	str	r0, [r7, #28]
        break;
 8005462:	e010      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <UART_SetConfig+0x56c>)
 8005466:	61fb      	str	r3, [r7, #28]
        break;
 8005468:	e00d      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546a:	f7fe fbbd 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 800546e:	61f8      	str	r0, [r7, #28]
        break;
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e005      	b.n	8005486 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005484:	bf00      	nop
    }

    if (pclk != 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	085a      	lsrs	r2, r3, #1
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	441a      	add	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d909      	bls.n	80054ba <UART_SetConfig+0x546>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d205      	bcs.n	80054ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
 80054b8:	e002      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3728      	adds	r7, #40	; 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054da:	bf00      	nop
 80054dc:	40008000 	.word	0x40008000
 80054e0:	00f42400 	.word	0x00f42400

080054e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01a      	beq.n	80055fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e2:	d10a      	bne.n	80055fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005638:	f7fc fcd0 	bl	8001fdc <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10e      	bne.n	800566a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f82d 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e023      	b.n	80056b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d10e      	bne.n	8005696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f817 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e00d      	b.n	80056b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b09c      	sub	sp, #112	; 0x70
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ca:	e0a5      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	f000 80a1 	beq.w	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d6:	f7fc fc81 	bl	8001fdc <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <UART_WaitOnFlagUntilTimeout+0x32>
 80056e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d13e      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005700:	667b      	str	r3, [r7, #100]	; 0x64
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800570c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e6      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	663b      	str	r3, [r7, #96]	; 0x60
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800573e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e067      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d04f      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d147      	bne.n	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005790:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e6      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	613b      	str	r3, [r7, #16]
   return(result);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	66bb      	str	r3, [r7, #104]	; 0x68
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057e4:	623a      	str	r2, [r7, #32]
 80057e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	6a3a      	ldr	r2, [r7, #32]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e010      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	429a      	cmp	r2, r3
 8005834:	f43f af4a 	beq.w	80056cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3770      	adds	r7, #112	; 0x70
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <__cvt>:
 8005842:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005846:	ec55 4b10 	vmov	r4, r5, d0
 800584a:	2d00      	cmp	r5, #0
 800584c:	460e      	mov	r6, r1
 800584e:	4619      	mov	r1, r3
 8005850:	462b      	mov	r3, r5
 8005852:	bfbb      	ittet	lt
 8005854:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005858:	461d      	movlt	r5, r3
 800585a:	2300      	movge	r3, #0
 800585c:	232d      	movlt	r3, #45	; 0x2d
 800585e:	700b      	strb	r3, [r1, #0]
 8005860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005862:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005866:	4691      	mov	r9, r2
 8005868:	f023 0820 	bic.w	r8, r3, #32
 800586c:	bfbc      	itt	lt
 800586e:	4622      	movlt	r2, r4
 8005870:	4614      	movlt	r4, r2
 8005872:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005876:	d005      	beq.n	8005884 <__cvt+0x42>
 8005878:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800587c:	d100      	bne.n	8005880 <__cvt+0x3e>
 800587e:	3601      	adds	r6, #1
 8005880:	2102      	movs	r1, #2
 8005882:	e000      	b.n	8005886 <__cvt+0x44>
 8005884:	2103      	movs	r1, #3
 8005886:	ab03      	add	r3, sp, #12
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	ab02      	add	r3, sp, #8
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	ec45 4b10 	vmov	d0, r4, r5
 8005892:	4653      	mov	r3, sl
 8005894:	4632      	mov	r2, r6
 8005896:	f000 fe6b 	bl	8006570 <_dtoa_r>
 800589a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800589e:	4607      	mov	r7, r0
 80058a0:	d102      	bne.n	80058a8 <__cvt+0x66>
 80058a2:	f019 0f01 	tst.w	r9, #1
 80058a6:	d022      	beq.n	80058ee <__cvt+0xac>
 80058a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058ac:	eb07 0906 	add.w	r9, r7, r6
 80058b0:	d110      	bne.n	80058d4 <__cvt+0x92>
 80058b2:	783b      	ldrb	r3, [r7, #0]
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d10a      	bne.n	80058ce <__cvt+0x8c>
 80058b8:	2200      	movs	r2, #0
 80058ba:	2300      	movs	r3, #0
 80058bc:	4620      	mov	r0, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	f7fb f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80058c4:	b918      	cbnz	r0, 80058ce <__cvt+0x8c>
 80058c6:	f1c6 0601 	rsb	r6, r6, #1
 80058ca:	f8ca 6000 	str.w	r6, [sl]
 80058ce:	f8da 3000 	ldr.w	r3, [sl]
 80058d2:	4499      	add	r9, r3
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	f7fb f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80058e0:	b108      	cbz	r0, 80058e6 <__cvt+0xa4>
 80058e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80058e6:	2230      	movs	r2, #48	; 0x30
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	454b      	cmp	r3, r9
 80058ec:	d307      	bcc.n	80058fe <__cvt+0xbc>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058f2:	1bdb      	subs	r3, r3, r7
 80058f4:	4638      	mov	r0, r7
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	b004      	add	sp, #16
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	1c59      	adds	r1, r3, #1
 8005900:	9103      	str	r1, [sp, #12]
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e7f0      	b.n	80058e8 <__cvt+0xa6>

08005906 <__exponent>:
 8005906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005908:	4603      	mov	r3, r0
 800590a:	2900      	cmp	r1, #0
 800590c:	bfb8      	it	lt
 800590e:	4249      	neglt	r1, r1
 8005910:	f803 2b02 	strb.w	r2, [r3], #2
 8005914:	bfb4      	ite	lt
 8005916:	222d      	movlt	r2, #45	; 0x2d
 8005918:	222b      	movge	r2, #43	; 0x2b
 800591a:	2909      	cmp	r1, #9
 800591c:	7042      	strb	r2, [r0, #1]
 800591e:	dd2a      	ble.n	8005976 <__exponent+0x70>
 8005920:	f10d 0207 	add.w	r2, sp, #7
 8005924:	4617      	mov	r7, r2
 8005926:	260a      	movs	r6, #10
 8005928:	4694      	mov	ip, r2
 800592a:	fb91 f5f6 	sdiv	r5, r1, r6
 800592e:	fb06 1415 	mls	r4, r6, r5, r1
 8005932:	3430      	adds	r4, #48	; 0x30
 8005934:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005938:	460c      	mov	r4, r1
 800593a:	2c63      	cmp	r4, #99	; 0x63
 800593c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005940:	4629      	mov	r1, r5
 8005942:	dcf1      	bgt.n	8005928 <__exponent+0x22>
 8005944:	3130      	adds	r1, #48	; 0x30
 8005946:	f1ac 0402 	sub.w	r4, ip, #2
 800594a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800594e:	1c41      	adds	r1, r0, #1
 8005950:	4622      	mov	r2, r4
 8005952:	42ba      	cmp	r2, r7
 8005954:	d30a      	bcc.n	800596c <__exponent+0x66>
 8005956:	f10d 0209 	add.w	r2, sp, #9
 800595a:	eba2 020c 	sub.w	r2, r2, ip
 800595e:	42bc      	cmp	r4, r7
 8005960:	bf88      	it	hi
 8005962:	2200      	movhi	r2, #0
 8005964:	4413      	add	r3, r2
 8005966:	1a18      	subs	r0, r3, r0
 8005968:	b003      	add	sp, #12
 800596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005970:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005974:	e7ed      	b.n	8005952 <__exponent+0x4c>
 8005976:	2330      	movs	r3, #48	; 0x30
 8005978:	3130      	adds	r1, #48	; 0x30
 800597a:	7083      	strb	r3, [r0, #2]
 800597c:	70c1      	strb	r1, [r0, #3]
 800597e:	1d03      	adds	r3, r0, #4
 8005980:	e7f1      	b.n	8005966 <__exponent+0x60>
	...

08005984 <_printf_float>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	ed2d 8b02 	vpush	{d8}
 800598c:	b08d      	sub	sp, #52	; 0x34
 800598e:	460c      	mov	r4, r1
 8005990:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005994:	4616      	mov	r6, r2
 8005996:	461f      	mov	r7, r3
 8005998:	4605      	mov	r5, r0
 800599a:	f000 fce7 	bl	800636c <_localeconv_r>
 800599e:	f8d0 a000 	ldr.w	sl, [r0]
 80059a2:	4650      	mov	r0, sl
 80059a4:	f7fa fc64 	bl	8000270 <strlen>
 80059a8:	2300      	movs	r3, #0
 80059aa:	930a      	str	r3, [sp, #40]	; 0x28
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	9305      	str	r3, [sp, #20]
 80059b0:	f8d8 3000 	ldr.w	r3, [r8]
 80059b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059b8:	3307      	adds	r3, #7
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	f103 0208 	add.w	r2, r3, #8
 80059c2:	f8c8 2000 	str.w	r2, [r8]
 80059c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ce:	9307      	str	r3, [sp, #28]
 80059d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80059d4:	ee08 0a10 	vmov	s16, r0
 80059d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80059dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e0:	4b9e      	ldr	r3, [pc, #632]	; (8005c5c <_printf_float+0x2d8>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	f7fb f8a1 	bl	8000b2c <__aeabi_dcmpun>
 80059ea:	bb88      	cbnz	r0, 8005a50 <_printf_float+0xcc>
 80059ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059f0:	4b9a      	ldr	r3, [pc, #616]	; (8005c5c <_printf_float+0x2d8>)
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	f7fb f87b 	bl	8000af0 <__aeabi_dcmple>
 80059fa:	bb48      	cbnz	r0, 8005a50 <_printf_float+0xcc>
 80059fc:	2200      	movs	r2, #0
 80059fe:	2300      	movs	r3, #0
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fb f86a 	bl	8000adc <__aeabi_dcmplt>
 8005a08:	b110      	cbz	r0, 8005a10 <_printf_float+0x8c>
 8005a0a:	232d      	movs	r3, #45	; 0x2d
 8005a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a10:	4a93      	ldr	r2, [pc, #588]	; (8005c60 <_printf_float+0x2dc>)
 8005a12:	4b94      	ldr	r3, [pc, #592]	; (8005c64 <_printf_float+0x2e0>)
 8005a14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a18:	bf94      	ite	ls
 8005a1a:	4690      	movls	r8, r2
 8005a1c:	4698      	movhi	r8, r3
 8005a1e:	2303      	movs	r3, #3
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	9b05      	ldr	r3, [sp, #20]
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	f04f 0900 	mov.w	r9, #0
 8005a2e:	9700      	str	r7, [sp, #0]
 8005a30:	4633      	mov	r3, r6
 8005a32:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a34:	4621      	mov	r1, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f9da 	bl	8005df0 <_printf_common>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	f040 8090 	bne.w	8005b62 <_printf_float+0x1de>
 8005a42:	f04f 30ff 	mov.w	r0, #4294967295
 8005a46:	b00d      	add	sp, #52	; 0x34
 8005a48:	ecbd 8b02 	vpop	{d8}
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	4649      	mov	r1, r9
 8005a58:	f7fb f868 	bl	8000b2c <__aeabi_dcmpun>
 8005a5c:	b140      	cbz	r0, 8005a70 <_printf_float+0xec>
 8005a5e:	464b      	mov	r3, r9
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfbc      	itt	lt
 8005a64:	232d      	movlt	r3, #45	; 0x2d
 8005a66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a6a:	4a7f      	ldr	r2, [pc, #508]	; (8005c68 <_printf_float+0x2e4>)
 8005a6c:	4b7f      	ldr	r3, [pc, #508]	; (8005c6c <_printf_float+0x2e8>)
 8005a6e:	e7d1      	b.n	8005a14 <_printf_float+0x90>
 8005a70:	6863      	ldr	r3, [r4, #4]
 8005a72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a76:	9206      	str	r2, [sp, #24]
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	d13f      	bne.n	8005afc <_printf_float+0x178>
 8005a7c:	2306      	movs	r3, #6
 8005a7e:	6063      	str	r3, [r4, #4]
 8005a80:	9b05      	ldr	r3, [sp, #20]
 8005a82:	6861      	ldr	r1, [r4, #4]
 8005a84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9303      	str	r3, [sp, #12]
 8005a8c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a92:	ab09      	add	r3, sp, #36	; 0x24
 8005a94:	ec49 8b10 	vmov	d0, r8, r9
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f7ff fece 	bl	8005842 <__cvt>
 8005aa6:	9b06      	ldr	r3, [sp, #24]
 8005aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aaa:	2b47      	cmp	r3, #71	; 0x47
 8005aac:	4680      	mov	r8, r0
 8005aae:	d108      	bne.n	8005ac2 <_printf_float+0x13e>
 8005ab0:	1cc8      	adds	r0, r1, #3
 8005ab2:	db02      	blt.n	8005aba <_printf_float+0x136>
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	dd41      	ble.n	8005b3e <_printf_float+0x1ba>
 8005aba:	f1ab 0302 	sub.w	r3, fp, #2
 8005abe:	fa5f fb83 	uxtb.w	fp, r3
 8005ac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ac6:	d820      	bhi.n	8005b0a <_printf_float+0x186>
 8005ac8:	3901      	subs	r1, #1
 8005aca:	465a      	mov	r2, fp
 8005acc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8005ad2:	f7ff ff18 	bl	8005906 <__exponent>
 8005ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ad8:	1813      	adds	r3, r2, r0
 8005ada:	2a01      	cmp	r2, #1
 8005adc:	4681      	mov	r9, r0
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	dc02      	bgt.n	8005ae8 <_printf_float+0x164>
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	07d2      	lsls	r2, r2, #31
 8005ae6:	d501      	bpl.n	8005aec <_printf_float+0x168>
 8005ae8:	3301      	adds	r3, #1
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d09c      	beq.n	8005a2e <_printf_float+0xaa>
 8005af4:	232d      	movs	r3, #45	; 0x2d
 8005af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005afa:	e798      	b.n	8005a2e <_printf_float+0xaa>
 8005afc:	9a06      	ldr	r2, [sp, #24]
 8005afe:	2a47      	cmp	r2, #71	; 0x47
 8005b00:	d1be      	bne.n	8005a80 <_printf_float+0xfc>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1bc      	bne.n	8005a80 <_printf_float+0xfc>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e7b9      	b.n	8005a7e <_printf_float+0xfa>
 8005b0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b0e:	d118      	bne.n	8005b42 <_printf_float+0x1be>
 8005b10:	2900      	cmp	r1, #0
 8005b12:	6863      	ldr	r3, [r4, #4]
 8005b14:	dd0b      	ble.n	8005b2e <_printf_float+0x1aa>
 8005b16:	6121      	str	r1, [r4, #16]
 8005b18:	b913      	cbnz	r3, 8005b20 <_printf_float+0x19c>
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d502      	bpl.n	8005b26 <_printf_float+0x1a2>
 8005b20:	3301      	adds	r3, #1
 8005b22:	440b      	add	r3, r1
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b28:	f04f 0900 	mov.w	r9, #0
 8005b2c:	e7de      	b.n	8005aec <_printf_float+0x168>
 8005b2e:	b913      	cbnz	r3, 8005b36 <_printf_float+0x1b2>
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	07d2      	lsls	r2, r2, #31
 8005b34:	d501      	bpl.n	8005b3a <_printf_float+0x1b6>
 8005b36:	3302      	adds	r3, #2
 8005b38:	e7f4      	b.n	8005b24 <_printf_float+0x1a0>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7f2      	b.n	8005b24 <_printf_float+0x1a0>
 8005b3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b44:	4299      	cmp	r1, r3
 8005b46:	db05      	blt.n	8005b54 <_printf_float+0x1d0>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	6121      	str	r1, [r4, #16]
 8005b4c:	07d8      	lsls	r0, r3, #31
 8005b4e:	d5ea      	bpl.n	8005b26 <_printf_float+0x1a2>
 8005b50:	1c4b      	adds	r3, r1, #1
 8005b52:	e7e7      	b.n	8005b24 <_printf_float+0x1a0>
 8005b54:	2900      	cmp	r1, #0
 8005b56:	bfd4      	ite	le
 8005b58:	f1c1 0202 	rsble	r2, r1, #2
 8005b5c:	2201      	movgt	r2, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	e7e0      	b.n	8005b24 <_printf_float+0x1a0>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	055a      	lsls	r2, r3, #21
 8005b66:	d407      	bmi.n	8005b78 <_printf_float+0x1f4>
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	4642      	mov	r2, r8
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	d12c      	bne.n	8005bd0 <_printf_float+0x24c>
 8005b76:	e764      	b.n	8005a42 <_printf_float+0xbe>
 8005b78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b7c:	f240 80e0 	bls.w	8005d40 <_printf_float+0x3bc>
 8005b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	f7fa ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d034      	beq.n	8005bfa <_printf_float+0x276>
 8005b90:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <_printf_float+0x2ec>)
 8005b92:	2301      	movs	r3, #1
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af51 	beq.w	8005a42 <_printf_float+0xbe>
 8005ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	db02      	blt.n	8005bae <_printf_float+0x22a>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	07d8      	lsls	r0, r3, #31
 8005bac:	d510      	bpl.n	8005bd0 <_printf_float+0x24c>
 8005bae:	ee18 3a10 	vmov	r3, s16
 8005bb2:	4652      	mov	r2, sl
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f af41 	beq.w	8005a42 <_printf_float+0xbe>
 8005bc0:	f04f 0800 	mov.w	r8, #0
 8005bc4:	f104 091a 	add.w	r9, r4, #26
 8005bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4543      	cmp	r3, r8
 8005bce:	dc09      	bgt.n	8005be4 <_printf_float+0x260>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	079b      	lsls	r3, r3, #30
 8005bd4:	f100 8107 	bmi.w	8005de6 <_printf_float+0x462>
 8005bd8:	68e0      	ldr	r0, [r4, #12]
 8005bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bdc:	4298      	cmp	r0, r3
 8005bde:	bfb8      	it	lt
 8005be0:	4618      	movlt	r0, r3
 8005be2:	e730      	b.n	8005a46 <_printf_float+0xc2>
 8005be4:	2301      	movs	r3, #1
 8005be6:	464a      	mov	r2, r9
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f af27 	beq.w	8005a42 <_printf_float+0xbe>
 8005bf4:	f108 0801 	add.w	r8, r8, #1
 8005bf8:	e7e6      	b.n	8005bc8 <_printf_float+0x244>
 8005bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dc39      	bgt.n	8005c74 <_printf_float+0x2f0>
 8005c00:	4a1b      	ldr	r2, [pc, #108]	; (8005c70 <_printf_float+0x2ec>)
 8005c02:	2301      	movs	r3, #1
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f af19 	beq.w	8005a42 <_printf_float+0xbe>
 8005c10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d102      	bne.n	8005c1e <_printf_float+0x29a>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	07d9      	lsls	r1, r3, #31
 8005c1c:	d5d8      	bpl.n	8005bd0 <_printf_float+0x24c>
 8005c1e:	ee18 3a10 	vmov	r3, s16
 8005c22:	4652      	mov	r2, sl
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f af09 	beq.w	8005a42 <_printf_float+0xbe>
 8005c30:	f04f 0900 	mov.w	r9, #0
 8005c34:	f104 0a1a 	add.w	sl, r4, #26
 8005c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3a:	425b      	negs	r3, r3
 8005c3c:	454b      	cmp	r3, r9
 8005c3e:	dc01      	bgt.n	8005c44 <_printf_float+0x2c0>
 8005c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c42:	e792      	b.n	8005b6a <_printf_float+0x1e6>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4652      	mov	r2, sl
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f aef7 	beq.w	8005a42 <_printf_float+0xbe>
 8005c54:	f109 0901 	add.w	r9, r9, #1
 8005c58:	e7ee      	b.n	8005c38 <_printf_float+0x2b4>
 8005c5a:	bf00      	nop
 8005c5c:	7fefffff 	.word	0x7fefffff
 8005c60:	08009488 	.word	0x08009488
 8005c64:	0800948c 	.word	0x0800948c
 8005c68:	08009490 	.word	0x08009490
 8005c6c:	08009494 	.word	0x08009494
 8005c70:	08009498 	.word	0x08009498
 8005c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	bfa8      	it	ge
 8005c7c:	461a      	movge	r2, r3
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	4691      	mov	r9, r2
 8005c82:	dc37      	bgt.n	8005cf4 <_printf_float+0x370>
 8005c84:	f04f 0b00 	mov.w	fp, #0
 8005c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c8c:	f104 021a 	add.w	r2, r4, #26
 8005c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	eba3 0309 	sub.w	r3, r3, r9
 8005c98:	455b      	cmp	r3, fp
 8005c9a:	dc33      	bgt.n	8005d04 <_printf_float+0x380>
 8005c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	db3b      	blt.n	8005d1c <_printf_float+0x398>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	07da      	lsls	r2, r3, #31
 8005ca8:	d438      	bmi.n	8005d1c <_printf_float+0x398>
 8005caa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cae:	eba2 0903 	sub.w	r9, r2, r3
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	1ad2      	subs	r2, r2, r3
 8005cb6:	4591      	cmp	r9, r2
 8005cb8:	bfa8      	it	ge
 8005cba:	4691      	movge	r9, r2
 8005cbc:	f1b9 0f00 	cmp.w	r9, #0
 8005cc0:	dc35      	bgt.n	8005d2e <_printf_float+0x3aa>
 8005cc2:	f04f 0800 	mov.w	r8, #0
 8005cc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cca:	f104 0a1a 	add.w	sl, r4, #26
 8005cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	eba3 0309 	sub.w	r3, r3, r9
 8005cd8:	4543      	cmp	r3, r8
 8005cda:	f77f af79 	ble.w	8005bd0 <_printf_float+0x24c>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	f43f aeaa 	beq.w	8005a42 <_printf_float+0xbe>
 8005cee:	f108 0801 	add.w	r8, r8, #1
 8005cf2:	e7ec      	b.n	8005cce <_printf_float+0x34a>
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d1c0      	bne.n	8005c84 <_printf_float+0x300>
 8005d02:	e69e      	b.n	8005a42 <_printf_float+0xbe>
 8005d04:	2301      	movs	r3, #1
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	9205      	str	r2, [sp, #20]
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f ae97 	beq.w	8005a42 <_printf_float+0xbe>
 8005d14:	9a05      	ldr	r2, [sp, #20]
 8005d16:	f10b 0b01 	add.w	fp, fp, #1
 8005d1a:	e7b9      	b.n	8005c90 <_printf_float+0x30c>
 8005d1c:	ee18 3a10 	vmov	r3, s16
 8005d20:	4652      	mov	r2, sl
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d1be      	bne.n	8005caa <_printf_float+0x326>
 8005d2c:	e689      	b.n	8005a42 <_printf_float+0xbe>
 8005d2e:	9a05      	ldr	r2, [sp, #20]
 8005d30:	464b      	mov	r3, r9
 8005d32:	4442      	add	r2, r8
 8005d34:	4631      	mov	r1, r6
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b8      	blx	r7
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d1c1      	bne.n	8005cc2 <_printf_float+0x33e>
 8005d3e:	e680      	b.n	8005a42 <_printf_float+0xbe>
 8005d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d42:	2a01      	cmp	r2, #1
 8005d44:	dc01      	bgt.n	8005d4a <_printf_float+0x3c6>
 8005d46:	07db      	lsls	r3, r3, #31
 8005d48:	d53a      	bpl.n	8005dc0 <_printf_float+0x43c>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	f43f ae74 	beq.w	8005a42 <_printf_float+0xbe>
 8005d5a:	ee18 3a10 	vmov	r3, s16
 8005d5e:	4652      	mov	r2, sl
 8005d60:	4631      	mov	r1, r6
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	f43f ae6b 	beq.w	8005a42 <_printf_float+0xbe>
 8005d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d78:	f7fa fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d7c:	b9d8      	cbnz	r0, 8005db6 <_printf_float+0x432>
 8005d7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d82:	f108 0201 	add.w	r2, r8, #1
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d10e      	bne.n	8005dae <_printf_float+0x42a>
 8005d90:	e657      	b.n	8005a42 <_printf_float+0xbe>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4652      	mov	r2, sl
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f ae50 	beq.w	8005a42 <_printf_float+0xbe>
 8005da2:	f108 0801 	add.w	r8, r8, #1
 8005da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da8:	3b01      	subs	r3, #1
 8005daa:	4543      	cmp	r3, r8
 8005dac:	dcf1      	bgt.n	8005d92 <_printf_float+0x40e>
 8005dae:	464b      	mov	r3, r9
 8005db0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005db4:	e6da      	b.n	8005b6c <_printf_float+0x1e8>
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	f104 0a1a 	add.w	sl, r4, #26
 8005dbe:	e7f2      	b.n	8005da6 <_printf_float+0x422>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	e7df      	b.n	8005d86 <_printf_float+0x402>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	464a      	mov	r2, r9
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	f43f ae36 	beq.w	8005a42 <_printf_float+0xbe>
 8005dd6:	f108 0801 	add.w	r8, r8, #1
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dde:	1a5b      	subs	r3, r3, r1
 8005de0:	4543      	cmp	r3, r8
 8005de2:	dcf0      	bgt.n	8005dc6 <_printf_float+0x442>
 8005de4:	e6f8      	b.n	8005bd8 <_printf_float+0x254>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	f104 0919 	add.w	r9, r4, #25
 8005dee:	e7f4      	b.n	8005dda <_printf_float+0x456>

08005df0 <_printf_common>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	4616      	mov	r6, r2
 8005df6:	4699      	mov	r9, r3
 8005df8:	688a      	ldr	r2, [r1, #8]
 8005dfa:	690b      	ldr	r3, [r1, #16]
 8005dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bfb8      	it	lt
 8005e04:	4613      	movlt	r3, r2
 8005e06:	6033      	str	r3, [r6, #0]
 8005e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	b10a      	cbz	r2, 8005e16 <_printf_common+0x26>
 8005e12:	3301      	adds	r3, #1
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	0699      	lsls	r1, r3, #26
 8005e1a:	bf42      	ittt	mi
 8005e1c:	6833      	ldrmi	r3, [r6, #0]
 8005e1e:	3302      	addmi	r3, #2
 8005e20:	6033      	strmi	r3, [r6, #0]
 8005e22:	6825      	ldr	r5, [r4, #0]
 8005e24:	f015 0506 	ands.w	r5, r5, #6
 8005e28:	d106      	bne.n	8005e38 <_printf_common+0x48>
 8005e2a:	f104 0a19 	add.w	sl, r4, #25
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	6832      	ldr	r2, [r6, #0]
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dc26      	bgt.n	8005e86 <_printf_common+0x96>
 8005e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e3c:	1e13      	subs	r3, r2, #0
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	bf18      	it	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	0692      	lsls	r2, r2, #26
 8005e46:	d42b      	bmi.n	8005ea0 <_printf_common+0xb0>
 8005e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	3001      	adds	r0, #1
 8005e54:	d01e      	beq.n	8005e94 <_printf_common+0xa4>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	f003 0306 	and.w	r3, r3, #6
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	bf02      	ittt	eq
 8005e62:	68e5      	ldreq	r5, [r4, #12]
 8005e64:	6833      	ldreq	r3, [r6, #0]
 8005e66:	1aed      	subeq	r5, r5, r3
 8005e68:	68a3      	ldr	r3, [r4, #8]
 8005e6a:	bf0c      	ite	eq
 8005e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e70:	2500      	movne	r5, #0
 8005e72:	4293      	cmp	r3, r2
 8005e74:	bfc4      	itt	gt
 8005e76:	1a9b      	subgt	r3, r3, r2
 8005e78:	18ed      	addgt	r5, r5, r3
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	341a      	adds	r4, #26
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	d11a      	bne.n	8005eb8 <_printf_common+0xc8>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e008      	b.n	8005e98 <_printf_common+0xa8>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4652      	mov	r2, sl
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	47c0      	blx	r8
 8005e90:	3001      	adds	r0, #1
 8005e92:	d103      	bne.n	8005e9c <_printf_common+0xac>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	e7c6      	b.n	8005e2e <_printf_common+0x3e>
 8005ea0:	18e1      	adds	r1, r4, r3
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	2030      	movs	r0, #48	; 0x30
 8005ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eaa:	4422      	add	r2, r4
 8005eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	e7c7      	b.n	8005e48 <_printf_common+0x58>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4622      	mov	r2, r4
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0e6      	beq.n	8005e94 <_printf_common+0xa4>
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7d9      	b.n	8005e7e <_printf_common+0x8e>
	...

08005ecc <_printf_i>:
 8005ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	7e0f      	ldrb	r7, [r1, #24]
 8005ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ed4:	2f78      	cmp	r7, #120	; 0x78
 8005ed6:	4691      	mov	r9, r2
 8005ed8:	4680      	mov	r8, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	469a      	mov	sl, r3
 8005ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ee2:	d807      	bhi.n	8005ef4 <_printf_i+0x28>
 8005ee4:	2f62      	cmp	r7, #98	; 0x62
 8005ee6:	d80a      	bhi.n	8005efe <_printf_i+0x32>
 8005ee8:	2f00      	cmp	r7, #0
 8005eea:	f000 80d4 	beq.w	8006096 <_printf_i+0x1ca>
 8005eee:	2f58      	cmp	r7, #88	; 0x58
 8005ef0:	f000 80c0 	beq.w	8006074 <_printf_i+0x1a8>
 8005ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005efc:	e03a      	b.n	8005f74 <_printf_i+0xa8>
 8005efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f02:	2b15      	cmp	r3, #21
 8005f04:	d8f6      	bhi.n	8005ef4 <_printf_i+0x28>
 8005f06:	a101      	add	r1, pc, #4	; (adr r1, 8005f0c <_printf_i+0x40>)
 8005f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f79 	.word	0x08005f79
 8005f14:	08005ef5 	.word	0x08005ef5
 8005f18:	08005ef5 	.word	0x08005ef5
 8005f1c:	08005ef5 	.word	0x08005ef5
 8005f20:	08005ef5 	.word	0x08005ef5
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005ef5 	.word	0x08005ef5
 8005f2c:	08005ef5 	.word	0x08005ef5
 8005f30:	08005ef5 	.word	0x08005ef5
 8005f34:	08005ef5 	.word	0x08005ef5
 8005f38:	0800607d 	.word	0x0800607d
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08006037 	.word	0x08006037
 8005f44:	08005ef5 	.word	0x08005ef5
 8005f48:	08005ef5 	.word	0x08005ef5
 8005f4c:	0800609f 	.word	0x0800609f
 8005f50:	08005ef5 	.word	0x08005ef5
 8005f54:	08005fa5 	.word	0x08005fa5
 8005f58:	08005ef5 	.word	0x08005ef5
 8005f5c:	08005ef5 	.word	0x08005ef5
 8005f60:	0800603f 	.word	0x0800603f
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	602a      	str	r2, [r5, #0]
 8005f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f74:	2301      	movs	r3, #1
 8005f76:	e09f      	b.n	80060b8 <_printf_i+0x1ec>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	682b      	ldr	r3, [r5, #0]
 8005f7c:	0607      	lsls	r7, r0, #24
 8005f7e:	f103 0104 	add.w	r1, r3, #4
 8005f82:	6029      	str	r1, [r5, #0]
 8005f84:	d501      	bpl.n	8005f8a <_printf_i+0xbe>
 8005f86:	681e      	ldr	r6, [r3, #0]
 8005f88:	e003      	b.n	8005f92 <_printf_i+0xc6>
 8005f8a:	0646      	lsls	r6, r0, #25
 8005f8c:	d5fb      	bpl.n	8005f86 <_printf_i+0xba>
 8005f8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	da03      	bge.n	8005f9e <_printf_i+0xd2>
 8005f96:	232d      	movs	r3, #45	; 0x2d
 8005f98:	4276      	negs	r6, r6
 8005f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9e:	485a      	ldr	r0, [pc, #360]	; (8006108 <_printf_i+0x23c>)
 8005fa0:	230a      	movs	r3, #10
 8005fa2:	e012      	b.n	8005fca <_printf_i+0xfe>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	1d19      	adds	r1, r3, #4
 8005faa:	6029      	str	r1, [r5, #0]
 8005fac:	0605      	lsls	r5, r0, #24
 8005fae:	d501      	bpl.n	8005fb4 <_printf_i+0xe8>
 8005fb0:	681e      	ldr	r6, [r3, #0]
 8005fb2:	e002      	b.n	8005fba <_printf_i+0xee>
 8005fb4:	0641      	lsls	r1, r0, #25
 8005fb6:	d5fb      	bpl.n	8005fb0 <_printf_i+0xe4>
 8005fb8:	881e      	ldrh	r6, [r3, #0]
 8005fba:	4853      	ldr	r0, [pc, #332]	; (8006108 <_printf_i+0x23c>)
 8005fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2308      	moveq	r3, #8
 8005fc2:	230a      	movne	r3, #10
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fca:	6865      	ldr	r5, [r4, #4]
 8005fcc:	60a5      	str	r5, [r4, #8]
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	bfa2      	ittt	ge
 8005fd2:	6821      	ldrge	r1, [r4, #0]
 8005fd4:	f021 0104 	bicge.w	r1, r1, #4
 8005fd8:	6021      	strge	r1, [r4, #0]
 8005fda:	b90e      	cbnz	r6, 8005fe0 <_printf_i+0x114>
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	d04b      	beq.n	8006078 <_printf_i+0x1ac>
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8005fea:	5dc7      	ldrb	r7, [r0, r7]
 8005fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ff0:	4637      	mov	r7, r6
 8005ff2:	42bb      	cmp	r3, r7
 8005ff4:	460e      	mov	r6, r1
 8005ff6:	d9f4      	bls.n	8005fe2 <_printf_i+0x116>
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d10b      	bne.n	8006014 <_printf_i+0x148>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	07de      	lsls	r6, r3, #31
 8006000:	d508      	bpl.n	8006014 <_printf_i+0x148>
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	6861      	ldr	r1, [r4, #4]
 8006006:	4299      	cmp	r1, r3
 8006008:	bfde      	ittt	le
 800600a:	2330      	movle	r3, #48	; 0x30
 800600c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006014:	1b52      	subs	r2, r2, r5
 8006016:	6122      	str	r2, [r4, #16]
 8006018:	f8cd a000 	str.w	sl, [sp]
 800601c:	464b      	mov	r3, r9
 800601e:	aa03      	add	r2, sp, #12
 8006020:	4621      	mov	r1, r4
 8006022:	4640      	mov	r0, r8
 8006024:	f7ff fee4 	bl	8005df0 <_printf_common>
 8006028:	3001      	adds	r0, #1
 800602a:	d14a      	bne.n	80060c2 <_printf_i+0x1f6>
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	b004      	add	sp, #16
 8006032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f043 0320 	orr.w	r3, r3, #32
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	4833      	ldr	r0, [pc, #204]	; (800610c <_printf_i+0x240>)
 8006040:	2778      	movs	r7, #120	; 0x78
 8006042:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	6829      	ldr	r1, [r5, #0]
 800604a:	061f      	lsls	r7, r3, #24
 800604c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006050:	d402      	bmi.n	8006058 <_printf_i+0x18c>
 8006052:	065f      	lsls	r7, r3, #25
 8006054:	bf48      	it	mi
 8006056:	b2b6      	uxthmi	r6, r6
 8006058:	07df      	lsls	r7, r3, #31
 800605a:	bf48      	it	mi
 800605c:	f043 0320 	orrmi.w	r3, r3, #32
 8006060:	6029      	str	r1, [r5, #0]
 8006062:	bf48      	it	mi
 8006064:	6023      	strmi	r3, [r4, #0]
 8006066:	b91e      	cbnz	r6, 8006070 <_printf_i+0x1a4>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	f023 0320 	bic.w	r3, r3, #32
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	2310      	movs	r3, #16
 8006072:	e7a7      	b.n	8005fc4 <_printf_i+0xf8>
 8006074:	4824      	ldr	r0, [pc, #144]	; (8006108 <_printf_i+0x23c>)
 8006076:	e7e4      	b.n	8006042 <_printf_i+0x176>
 8006078:	4615      	mov	r5, r2
 800607a:	e7bd      	b.n	8005ff8 <_printf_i+0x12c>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	6826      	ldr	r6, [r4, #0]
 8006080:	6961      	ldr	r1, [r4, #20]
 8006082:	1d18      	adds	r0, r3, #4
 8006084:	6028      	str	r0, [r5, #0]
 8006086:	0635      	lsls	r5, r6, #24
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	d501      	bpl.n	8006090 <_printf_i+0x1c4>
 800608c:	6019      	str	r1, [r3, #0]
 800608e:	e002      	b.n	8006096 <_printf_i+0x1ca>
 8006090:	0670      	lsls	r0, r6, #25
 8006092:	d5fb      	bpl.n	800608c <_printf_i+0x1c0>
 8006094:	8019      	strh	r1, [r3, #0]
 8006096:	2300      	movs	r3, #0
 8006098:	6123      	str	r3, [r4, #16]
 800609a:	4615      	mov	r5, r2
 800609c:	e7bc      	b.n	8006018 <_printf_i+0x14c>
 800609e:	682b      	ldr	r3, [r5, #0]
 80060a0:	1d1a      	adds	r2, r3, #4
 80060a2:	602a      	str	r2, [r5, #0]
 80060a4:	681d      	ldr	r5, [r3, #0]
 80060a6:	6862      	ldr	r2, [r4, #4]
 80060a8:	2100      	movs	r1, #0
 80060aa:	4628      	mov	r0, r5
 80060ac:	f7fa f890 	bl	80001d0 <memchr>
 80060b0:	b108      	cbz	r0, 80060b6 <_printf_i+0x1ea>
 80060b2:	1b40      	subs	r0, r0, r5
 80060b4:	6060      	str	r0, [r4, #4]
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	2300      	movs	r3, #0
 80060bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c0:	e7aa      	b.n	8006018 <_printf_i+0x14c>
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	462a      	mov	r2, r5
 80060c6:	4649      	mov	r1, r9
 80060c8:	4640      	mov	r0, r8
 80060ca:	47d0      	blx	sl
 80060cc:	3001      	adds	r0, #1
 80060ce:	d0ad      	beq.n	800602c <_printf_i+0x160>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	079b      	lsls	r3, r3, #30
 80060d4:	d413      	bmi.n	80060fe <_printf_i+0x232>
 80060d6:	68e0      	ldr	r0, [r4, #12]
 80060d8:	9b03      	ldr	r3, [sp, #12]
 80060da:	4298      	cmp	r0, r3
 80060dc:	bfb8      	it	lt
 80060de:	4618      	movlt	r0, r3
 80060e0:	e7a6      	b.n	8006030 <_printf_i+0x164>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4632      	mov	r2, r6
 80060e6:	4649      	mov	r1, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	47d0      	blx	sl
 80060ec:	3001      	adds	r0, #1
 80060ee:	d09d      	beq.n	800602c <_printf_i+0x160>
 80060f0:	3501      	adds	r5, #1
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	9903      	ldr	r1, [sp, #12]
 80060f6:	1a5b      	subs	r3, r3, r1
 80060f8:	42ab      	cmp	r3, r5
 80060fa:	dcf2      	bgt.n	80060e2 <_printf_i+0x216>
 80060fc:	e7eb      	b.n	80060d6 <_printf_i+0x20a>
 80060fe:	2500      	movs	r5, #0
 8006100:	f104 0619 	add.w	r6, r4, #25
 8006104:	e7f5      	b.n	80060f2 <_printf_i+0x226>
 8006106:	bf00      	nop
 8006108:	0800949a 	.word	0x0800949a
 800610c:	080094ab 	.word	0x080094ab

08006110 <std>:
 8006110:	2300      	movs	r3, #0
 8006112:	b510      	push	{r4, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	e9c0 3300 	strd	r3, r3, [r0]
 800611a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800611e:	6083      	str	r3, [r0, #8]
 8006120:	8181      	strh	r1, [r0, #12]
 8006122:	6643      	str	r3, [r0, #100]	; 0x64
 8006124:	81c2      	strh	r2, [r0, #14]
 8006126:	6183      	str	r3, [r0, #24]
 8006128:	4619      	mov	r1, r3
 800612a:	2208      	movs	r2, #8
 800612c:	305c      	adds	r0, #92	; 0x5c
 800612e:	f000 f914 	bl	800635a <memset>
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <std+0x58>)
 8006134:	6263      	str	r3, [r4, #36]	; 0x24
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <std+0x5c>)
 8006138:	62a3      	str	r3, [r4, #40]	; 0x28
 800613a:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <std+0x60>)
 800613c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800613e:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <std+0x64>)
 8006140:	6323      	str	r3, [r4, #48]	; 0x30
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <std+0x68>)
 8006144:	6224      	str	r4, [r4, #32]
 8006146:	429c      	cmp	r4, r3
 8006148:	d006      	beq.n	8006158 <std+0x48>
 800614a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800614e:	4294      	cmp	r4, r2
 8006150:	d002      	beq.n	8006158 <std+0x48>
 8006152:	33d0      	adds	r3, #208	; 0xd0
 8006154:	429c      	cmp	r4, r3
 8006156:	d105      	bne.n	8006164 <std+0x54>
 8006158:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006160:	f000 b978 	b.w	8006454 <__retarget_lock_init_recursive>
 8006164:	bd10      	pop	{r4, pc}
 8006166:	bf00      	nop
 8006168:	080062d5 	.word	0x080062d5
 800616c:	080062f7 	.word	0x080062f7
 8006170:	0800632f 	.word	0x0800632f
 8006174:	08006353 	.word	0x08006353
 8006178:	200003a0 	.word	0x200003a0

0800617c <stdio_exit_handler>:
 800617c:	4a02      	ldr	r2, [pc, #8]	; (8006188 <stdio_exit_handler+0xc>)
 800617e:	4903      	ldr	r1, [pc, #12]	; (800618c <stdio_exit_handler+0x10>)
 8006180:	4803      	ldr	r0, [pc, #12]	; (8006190 <stdio_exit_handler+0x14>)
 8006182:	f000 b869 	b.w	8006258 <_fwalk_sglue>
 8006186:	bf00      	nop
 8006188:	20000074 	.word	0x20000074
 800618c:	08007e09 	.word	0x08007e09
 8006190:	20000080 	.word	0x20000080

08006194 <cleanup_stdio>:
 8006194:	6841      	ldr	r1, [r0, #4]
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <cleanup_stdio+0x34>)
 8006198:	4299      	cmp	r1, r3
 800619a:	b510      	push	{r4, lr}
 800619c:	4604      	mov	r4, r0
 800619e:	d001      	beq.n	80061a4 <cleanup_stdio+0x10>
 80061a0:	f001 fe32 	bl	8007e08 <_fflush_r>
 80061a4:	68a1      	ldr	r1, [r4, #8]
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <cleanup_stdio+0x38>)
 80061a8:	4299      	cmp	r1, r3
 80061aa:	d002      	beq.n	80061b2 <cleanup_stdio+0x1e>
 80061ac:	4620      	mov	r0, r4
 80061ae:	f001 fe2b 	bl	8007e08 <_fflush_r>
 80061b2:	68e1      	ldr	r1, [r4, #12]
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <cleanup_stdio+0x3c>)
 80061b6:	4299      	cmp	r1, r3
 80061b8:	d004      	beq.n	80061c4 <cleanup_stdio+0x30>
 80061ba:	4620      	mov	r0, r4
 80061bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c0:	f001 be22 	b.w	8007e08 <_fflush_r>
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	bf00      	nop
 80061c8:	200003a0 	.word	0x200003a0
 80061cc:	20000408 	.word	0x20000408
 80061d0:	20000470 	.word	0x20000470

080061d4 <global_stdio_init.part.0>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <global_stdio_init.part.0+0x30>)
 80061d8:	4c0b      	ldr	r4, [pc, #44]	; (8006208 <global_stdio_init.part.0+0x34>)
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <global_stdio_init.part.0+0x38>)
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	4620      	mov	r0, r4
 80061e0:	2200      	movs	r2, #0
 80061e2:	2104      	movs	r1, #4
 80061e4:	f7ff ff94 	bl	8006110 <std>
 80061e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061ec:	2201      	movs	r2, #1
 80061ee:	2109      	movs	r1, #9
 80061f0:	f7ff ff8e 	bl	8006110 <std>
 80061f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061f8:	2202      	movs	r2, #2
 80061fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fe:	2112      	movs	r1, #18
 8006200:	f7ff bf86 	b.w	8006110 <std>
 8006204:	200004d8 	.word	0x200004d8
 8006208:	200003a0 	.word	0x200003a0
 800620c:	0800617d 	.word	0x0800617d

08006210 <__sfp_lock_acquire>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__sfp_lock_acquire+0x8>)
 8006212:	f000 b920 	b.w	8006456 <__retarget_lock_acquire_recursive>
 8006216:	bf00      	nop
 8006218:	200004e1 	.word	0x200004e1

0800621c <__sfp_lock_release>:
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <__sfp_lock_release+0x8>)
 800621e:	f000 b91b 	b.w	8006458 <__retarget_lock_release_recursive>
 8006222:	bf00      	nop
 8006224:	200004e1 	.word	0x200004e1

08006228 <__sinit>:
 8006228:	b510      	push	{r4, lr}
 800622a:	4604      	mov	r4, r0
 800622c:	f7ff fff0 	bl	8006210 <__sfp_lock_acquire>
 8006230:	6a23      	ldr	r3, [r4, #32]
 8006232:	b11b      	cbz	r3, 800623c <__sinit+0x14>
 8006234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006238:	f7ff bff0 	b.w	800621c <__sfp_lock_release>
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <__sinit+0x28>)
 800623e:	6223      	str	r3, [r4, #32]
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <__sinit+0x2c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f5      	bne.n	8006234 <__sinit+0xc>
 8006248:	f7ff ffc4 	bl	80061d4 <global_stdio_init.part.0>
 800624c:	e7f2      	b.n	8006234 <__sinit+0xc>
 800624e:	bf00      	nop
 8006250:	08006195 	.word	0x08006195
 8006254:	200004d8 	.word	0x200004d8

08006258 <_fwalk_sglue>:
 8006258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800625c:	4607      	mov	r7, r0
 800625e:	4688      	mov	r8, r1
 8006260:	4614      	mov	r4, r2
 8006262:	2600      	movs	r6, #0
 8006264:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006268:	f1b9 0901 	subs.w	r9, r9, #1
 800626c:	d505      	bpl.n	800627a <_fwalk_sglue+0x22>
 800626e:	6824      	ldr	r4, [r4, #0]
 8006270:	2c00      	cmp	r4, #0
 8006272:	d1f7      	bne.n	8006264 <_fwalk_sglue+0xc>
 8006274:	4630      	mov	r0, r6
 8006276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d907      	bls.n	8006290 <_fwalk_sglue+0x38>
 8006280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006284:	3301      	adds	r3, #1
 8006286:	d003      	beq.n	8006290 <_fwalk_sglue+0x38>
 8006288:	4629      	mov	r1, r5
 800628a:	4638      	mov	r0, r7
 800628c:	47c0      	blx	r8
 800628e:	4306      	orrs	r6, r0
 8006290:	3568      	adds	r5, #104	; 0x68
 8006292:	e7e9      	b.n	8006268 <_fwalk_sglue+0x10>

08006294 <siprintf>:
 8006294:	b40e      	push	{r1, r2, r3}
 8006296:	b500      	push	{lr}
 8006298:	b09c      	sub	sp, #112	; 0x70
 800629a:	ab1d      	add	r3, sp, #116	; 0x74
 800629c:	9002      	str	r0, [sp, #8]
 800629e:	9006      	str	r0, [sp, #24]
 80062a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062a4:	4809      	ldr	r0, [pc, #36]	; (80062cc <siprintf+0x38>)
 80062a6:	9107      	str	r1, [sp, #28]
 80062a8:	9104      	str	r1, [sp, #16]
 80062aa:	4909      	ldr	r1, [pc, #36]	; (80062d0 <siprintf+0x3c>)
 80062ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b0:	9105      	str	r1, [sp, #20]
 80062b2:	6800      	ldr	r0, [r0, #0]
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	a902      	add	r1, sp, #8
 80062b8:	f001 fc22 	bl	8007b00 <_svfiprintf_r>
 80062bc:	9b02      	ldr	r3, [sp, #8]
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	b01c      	add	sp, #112	; 0x70
 80062c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c8:	b003      	add	sp, #12
 80062ca:	4770      	bx	lr
 80062cc:	200000cc 	.word	0x200000cc
 80062d0:	ffff0208 	.word	0xffff0208

080062d4 <__sread>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	460c      	mov	r4, r1
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	f000 f86c 	bl	80063b8 <_read_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	bfab      	itete	ge
 80062e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062e6:	89a3      	ldrhlt	r3, [r4, #12]
 80062e8:	181b      	addge	r3, r3, r0
 80062ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ee:	bfac      	ite	ge
 80062f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062f2:	81a3      	strhlt	r3, [r4, #12]
 80062f4:	bd10      	pop	{r4, pc}

080062f6 <__swrite>:
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	461f      	mov	r7, r3
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	05db      	lsls	r3, r3, #23
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	4616      	mov	r6, r2
 8006306:	d505      	bpl.n	8006314 <__swrite+0x1e>
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	2302      	movs	r3, #2
 800630e:	2200      	movs	r2, #0
 8006310:	f000 f840 	bl	8006394 <_lseek_r>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	f000 b857 	b.w	80063dc <_write_r>

0800632e <__sseek>:
 800632e:	b510      	push	{r4, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006336:	f000 f82d 	bl	8006394 <_lseek_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	bf15      	itete	ne
 8006340:	6560      	strne	r0, [r4, #84]	; 0x54
 8006342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800634a:	81a3      	strheq	r3, [r4, #12]
 800634c:	bf18      	it	ne
 800634e:	81a3      	strhne	r3, [r4, #12]
 8006350:	bd10      	pop	{r4, pc}

08006352 <__sclose>:
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	f000 b80d 	b.w	8006374 <_close_r>

0800635a <memset>:
 800635a:	4402      	add	r2, r0
 800635c:	4603      	mov	r3, r0
 800635e:	4293      	cmp	r3, r2
 8006360:	d100      	bne.n	8006364 <memset+0xa>
 8006362:	4770      	bx	lr
 8006364:	f803 1b01 	strb.w	r1, [r3], #1
 8006368:	e7f9      	b.n	800635e <memset+0x4>
	...

0800636c <_localeconv_r>:
 800636c:	4800      	ldr	r0, [pc, #0]	; (8006370 <_localeconv_r+0x4>)
 800636e:	4770      	bx	lr
 8006370:	200001c0 	.word	0x200001c0

08006374 <_close_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	; (8006390 <_close_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fb f92d 	bl	80015de <_close>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_close_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_close_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200004dc 	.word	0x200004dc

08006394 <_lseek_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	; (80063b4 <_lseek_r+0x20>)
 8006398:	4604      	mov	r4, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fb f942 	bl	800162c <_lseek>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_lseek_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_lseek_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	200004dc 	.word	0x200004dc

080063b8 <_read_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_read_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb f8d0 	bl	800156c <_read>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_read_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_read_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200004dc 	.word	0x200004dc

080063dc <_write_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	; (80063fc <_write_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fb f8db 	bl	80015a6 <_write>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_write_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_write_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	200004dc 	.word	0x200004dc

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	200000cc 	.word	0x200000cc

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4d0d      	ldr	r5, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2600      	movs	r6, #0
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4d0b      	ldr	r5, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f002 fffc 	bl	800941c <_init>
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2600      	movs	r6, #0
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f855 3b04 	ldr.w	r3, [r5], #4
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f855 3b04 	ldr.w	r3, [r5], #4
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08009838 	.word	0x08009838
 8006448:	08009838 	.word	0x08009838
 800644c:	08009838 	.word	0x08009838
 8006450:	0800983c 	.word	0x0800983c

08006454 <__retarget_lock_init_recursive>:
 8006454:	4770      	bx	lr

08006456 <__retarget_lock_acquire_recursive>:
 8006456:	4770      	bx	lr

08006458 <__retarget_lock_release_recursive>:
 8006458:	4770      	bx	lr

0800645a <quorem>:
 800645a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645e:	6903      	ldr	r3, [r0, #16]
 8006460:	690c      	ldr	r4, [r1, #16]
 8006462:	42a3      	cmp	r3, r4
 8006464:	4607      	mov	r7, r0
 8006466:	db7e      	blt.n	8006566 <quorem+0x10c>
 8006468:	3c01      	subs	r4, #1
 800646a:	f101 0814 	add.w	r8, r1, #20
 800646e:	f100 0514 	add.w	r5, r0, #20
 8006472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800647c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006480:	3301      	adds	r3, #1
 8006482:	429a      	cmp	r2, r3
 8006484:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800648c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006490:	d331      	bcc.n	80064f6 <quorem+0x9c>
 8006492:	f04f 0e00 	mov.w	lr, #0
 8006496:	4640      	mov	r0, r8
 8006498:	46ac      	mov	ip, r5
 800649a:	46f2      	mov	sl, lr
 800649c:	f850 2b04 	ldr.w	r2, [r0], #4
 80064a0:	b293      	uxth	r3, r2
 80064a2:	fb06 e303 	mla	r3, r6, r3, lr
 80064a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064aa:	0c1a      	lsrs	r2, r3, #16
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ebaa 0303 	sub.w	r3, sl, r3
 80064b2:	f8dc a000 	ldr.w	sl, [ip]
 80064b6:	fa13 f38a 	uxtah	r3, r3, sl
 80064ba:	fb06 220e 	mla	r2, r6, lr, r2
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	9b00      	ldr	r3, [sp, #0]
 80064c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064c6:	b292      	uxth	r2, r2
 80064c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80064d4:	4581      	cmp	r9, r0
 80064d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064da:	f84c 3b04 	str.w	r3, [ip], #4
 80064de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064e2:	d2db      	bcs.n	800649c <quorem+0x42>
 80064e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80064e8:	b92b      	cbnz	r3, 80064f6 <quorem+0x9c>
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	429d      	cmp	r5, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	d32c      	bcc.n	800654e <quorem+0xf4>
 80064f4:	613c      	str	r4, [r7, #16]
 80064f6:	4638      	mov	r0, r7
 80064f8:	f001 f9a8 	bl	800784c <__mcmp>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	db22      	blt.n	8006546 <quorem+0xec>
 8006500:	3601      	adds	r6, #1
 8006502:	4629      	mov	r1, r5
 8006504:	2000      	movs	r0, #0
 8006506:	f858 2b04 	ldr.w	r2, [r8], #4
 800650a:	f8d1 c000 	ldr.w	ip, [r1]
 800650e:	b293      	uxth	r3, r2
 8006510:	1ac3      	subs	r3, r0, r3
 8006512:	0c12      	lsrs	r2, r2, #16
 8006514:	fa13 f38c 	uxtah	r3, r3, ip
 8006518:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800651c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006526:	45c1      	cmp	r9, r8
 8006528:	f841 3b04 	str.w	r3, [r1], #4
 800652c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006530:	d2e9      	bcs.n	8006506 <quorem+0xac>
 8006532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653a:	b922      	cbnz	r2, 8006546 <quorem+0xec>
 800653c:	3b04      	subs	r3, #4
 800653e:	429d      	cmp	r5, r3
 8006540:	461a      	mov	r2, r3
 8006542:	d30a      	bcc.n	800655a <quorem+0x100>
 8006544:	613c      	str	r4, [r7, #16]
 8006546:	4630      	mov	r0, r6
 8006548:	b003      	add	sp, #12
 800654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	3b04      	subs	r3, #4
 8006552:	2a00      	cmp	r2, #0
 8006554:	d1ce      	bne.n	80064f4 <quorem+0x9a>
 8006556:	3c01      	subs	r4, #1
 8006558:	e7c9      	b.n	80064ee <quorem+0x94>
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	3b04      	subs	r3, #4
 800655e:	2a00      	cmp	r2, #0
 8006560:	d1f0      	bne.n	8006544 <quorem+0xea>
 8006562:	3c01      	subs	r4, #1
 8006564:	e7eb      	b.n	800653e <quorem+0xe4>
 8006566:	2000      	movs	r0, #0
 8006568:	e7ee      	b.n	8006548 <quorem+0xee>
 800656a:	0000      	movs	r0, r0
 800656c:	0000      	movs	r0, r0
	...

08006570 <_dtoa_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	ed2d 8b04 	vpush	{d8-d9}
 8006578:	69c5      	ldr	r5, [r0, #28]
 800657a:	b093      	sub	sp, #76	; 0x4c
 800657c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006580:	ec57 6b10 	vmov	r6, r7, d0
 8006584:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006588:	9107      	str	r1, [sp, #28]
 800658a:	4604      	mov	r4, r0
 800658c:	920a      	str	r2, [sp, #40]	; 0x28
 800658e:	930d      	str	r3, [sp, #52]	; 0x34
 8006590:	b975      	cbnz	r5, 80065b0 <_dtoa_r+0x40>
 8006592:	2010      	movs	r0, #16
 8006594:	f000 fe2a 	bl	80071ec <malloc>
 8006598:	4602      	mov	r2, r0
 800659a:	61e0      	str	r0, [r4, #28]
 800659c:	b920      	cbnz	r0, 80065a8 <_dtoa_r+0x38>
 800659e:	4bae      	ldr	r3, [pc, #696]	; (8006858 <_dtoa_r+0x2e8>)
 80065a0:	21ef      	movs	r1, #239	; 0xef
 80065a2:	48ae      	ldr	r0, [pc, #696]	; (800685c <_dtoa_r+0x2ec>)
 80065a4:	f001 fc90 	bl	8007ec8 <__assert_func>
 80065a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ac:	6005      	str	r5, [r0, #0]
 80065ae:	60c5      	str	r5, [r0, #12]
 80065b0:	69e3      	ldr	r3, [r4, #28]
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	b151      	cbz	r1, 80065cc <_dtoa_r+0x5c>
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	604a      	str	r2, [r1, #4]
 80065ba:	2301      	movs	r3, #1
 80065bc:	4093      	lsls	r3, r2
 80065be:	608b      	str	r3, [r1, #8]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 ff07 	bl	80073d4 <_Bfree>
 80065c6:	69e3      	ldr	r3, [r4, #28]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	1e3b      	subs	r3, r7, #0
 80065ce:	bfbb      	ittet	lt
 80065d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065d4:	9303      	strlt	r3, [sp, #12]
 80065d6:	2300      	movge	r3, #0
 80065d8:	2201      	movlt	r2, #1
 80065da:	bfac      	ite	ge
 80065dc:	f8c8 3000 	strge.w	r3, [r8]
 80065e0:	f8c8 2000 	strlt.w	r2, [r8]
 80065e4:	4b9e      	ldr	r3, [pc, #632]	; (8006860 <_dtoa_r+0x2f0>)
 80065e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80065ea:	ea33 0308 	bics.w	r3, r3, r8
 80065ee:	d11b      	bne.n	8006628 <_dtoa_r+0xb8>
 80065f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80065fc:	4333      	orrs	r3, r6
 80065fe:	f000 8593 	beq.w	8007128 <_dtoa_r+0xbb8>
 8006602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006604:	b963      	cbnz	r3, 8006620 <_dtoa_r+0xb0>
 8006606:	4b97      	ldr	r3, [pc, #604]	; (8006864 <_dtoa_r+0x2f4>)
 8006608:	e027      	b.n	800665a <_dtoa_r+0xea>
 800660a:	4b97      	ldr	r3, [pc, #604]	; (8006868 <_dtoa_r+0x2f8>)
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	9800      	ldr	r0, [sp, #0]
 8006616:	b013      	add	sp, #76	; 0x4c
 8006618:	ecbd 8b04 	vpop	{d8-d9}
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006620:	4b90      	ldr	r3, [pc, #576]	; (8006864 <_dtoa_r+0x2f4>)
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	3303      	adds	r3, #3
 8006626:	e7f3      	b.n	8006610 <_dtoa_r+0xa0>
 8006628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	ec51 0b17 	vmov	r0, r1, d7
 8006632:	eeb0 8a47 	vmov.f32	s16, s14
 8006636:	eef0 8a67 	vmov.f32	s17, s15
 800663a:	2300      	movs	r3, #0
 800663c:	f7fa fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006640:	4681      	mov	r9, r0
 8006642:	b160      	cbz	r0, 800665e <_dtoa_r+0xee>
 8006644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006646:	2301      	movs	r3, #1
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8568 	beq.w	8007122 <_dtoa_r+0xbb2>
 8006652:	4b86      	ldr	r3, [pc, #536]	; (800686c <_dtoa_r+0x2fc>)
 8006654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	e7da      	b.n	8006614 <_dtoa_r+0xa4>
 800665e:	aa10      	add	r2, sp, #64	; 0x40
 8006660:	a911      	add	r1, sp, #68	; 0x44
 8006662:	4620      	mov	r0, r4
 8006664:	eeb0 0a48 	vmov.f32	s0, s16
 8006668:	eef0 0a68 	vmov.f32	s1, s17
 800666c:	f001 f994 	bl	8007998 <__d2b>
 8006670:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006674:	4682      	mov	sl, r0
 8006676:	2d00      	cmp	r5, #0
 8006678:	d07f      	beq.n	800677a <_dtoa_r+0x20a>
 800667a:	ee18 3a90 	vmov	r3, s17
 800667e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006682:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006686:	ec51 0b18 	vmov	r0, r1, d8
 800668a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800668e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006692:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006696:	4619      	mov	r1, r3
 8006698:	2200      	movs	r2, #0
 800669a:	4b75      	ldr	r3, [pc, #468]	; (8006870 <_dtoa_r+0x300>)
 800669c:	f7f9 fdf4 	bl	8000288 <__aeabi_dsub>
 80066a0:	a367      	add	r3, pc, #412	; (adr r3, 8006840 <_dtoa_r+0x2d0>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	a367      	add	r3, pc, #412	; (adr r3, 8006848 <_dtoa_r+0x2d8>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 fdec 	bl	800028c <__adddf3>
 80066b4:	4606      	mov	r6, r0
 80066b6:	4628      	mov	r0, r5
 80066b8:	460f      	mov	r7, r1
 80066ba:	f7f9 ff33 	bl	8000524 <__aeabi_i2d>
 80066be:	a364      	add	r3, pc, #400	; (adr r3, 8006850 <_dtoa_r+0x2e0>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 ff98 	bl	80005f8 <__aeabi_dmul>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7f9 fddc 	bl	800028c <__adddf3>
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fa fa3e 	bl	8000b58 <__aeabi_d2iz>
 80066dc:	2200      	movs	r2, #0
 80066de:	4683      	mov	fp, r0
 80066e0:	2300      	movs	r3, #0
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7fa f9f9 	bl	8000adc <__aeabi_dcmplt>
 80066ea:	b148      	cbz	r0, 8006700 <_dtoa_r+0x190>
 80066ec:	4658      	mov	r0, fp
 80066ee:	f7f9 ff19 	bl	8000524 <__aeabi_i2d>
 80066f2:	4632      	mov	r2, r6
 80066f4:	463b      	mov	r3, r7
 80066f6:	f7fa f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80066fa:	b908      	cbnz	r0, 8006700 <_dtoa_r+0x190>
 80066fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006700:	f1bb 0f16 	cmp.w	fp, #22
 8006704:	d857      	bhi.n	80067b6 <_dtoa_r+0x246>
 8006706:	4b5b      	ldr	r3, [pc, #364]	; (8006874 <_dtoa_r+0x304>)
 8006708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	ec51 0b18 	vmov	r0, r1, d8
 8006714:	f7fa f9e2 	bl	8000adc <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d04e      	beq.n	80067ba <_dtoa_r+0x24a>
 800671c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006720:	2300      	movs	r3, #0
 8006722:	930c      	str	r3, [sp, #48]	; 0x30
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	1b5b      	subs	r3, r3, r5
 8006728:	1e5a      	subs	r2, r3, #1
 800672a:	bf45      	ittet	mi
 800672c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006730:	9305      	strmi	r3, [sp, #20]
 8006732:	2300      	movpl	r3, #0
 8006734:	2300      	movmi	r3, #0
 8006736:	9206      	str	r2, [sp, #24]
 8006738:	bf54      	ite	pl
 800673a:	9305      	strpl	r3, [sp, #20]
 800673c:	9306      	strmi	r3, [sp, #24]
 800673e:	f1bb 0f00 	cmp.w	fp, #0
 8006742:	db3c      	blt.n	80067be <_dtoa_r+0x24e>
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800674a:	445b      	add	r3, fp
 800674c:	9306      	str	r3, [sp, #24]
 800674e:	2300      	movs	r3, #0
 8006750:	9308      	str	r3, [sp, #32]
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	2b09      	cmp	r3, #9
 8006756:	d868      	bhi.n	800682a <_dtoa_r+0x2ba>
 8006758:	2b05      	cmp	r3, #5
 800675a:	bfc4      	itt	gt
 800675c:	3b04      	subgt	r3, #4
 800675e:	9307      	strgt	r3, [sp, #28]
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	f1a3 0302 	sub.w	r3, r3, #2
 8006766:	bfcc      	ite	gt
 8006768:	2500      	movgt	r5, #0
 800676a:	2501      	movle	r5, #1
 800676c:	2b03      	cmp	r3, #3
 800676e:	f200 8085 	bhi.w	800687c <_dtoa_r+0x30c>
 8006772:	e8df f003 	tbb	[pc, r3]
 8006776:	3b2e      	.short	0x3b2e
 8006778:	5839      	.short	0x5839
 800677a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800677e:	441d      	add	r5, r3
 8006780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006784:	2b20      	cmp	r3, #32
 8006786:	bfc1      	itttt	gt
 8006788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800678c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006790:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006794:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006798:	bfd6      	itet	le
 800679a:	f1c3 0320 	rsble	r3, r3, #32
 800679e:	ea48 0003 	orrgt.w	r0, r8, r3
 80067a2:	fa06 f003 	lslle.w	r0, r6, r3
 80067a6:	f7f9 fead 	bl	8000504 <__aeabi_ui2d>
 80067aa:	2201      	movs	r2, #1
 80067ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067b0:	3d01      	subs	r5, #1
 80067b2:	920e      	str	r2, [sp, #56]	; 0x38
 80067b4:	e76f      	b.n	8006696 <_dtoa_r+0x126>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e7b3      	b.n	8006722 <_dtoa_r+0x1b2>
 80067ba:	900c      	str	r0, [sp, #48]	; 0x30
 80067bc:	e7b2      	b.n	8006724 <_dtoa_r+0x1b4>
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	eba3 030b 	sub.w	r3, r3, fp
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	f1cb 0300 	rsb	r3, fp, #0
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	2300      	movs	r3, #0
 80067ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d0:	e7bf      	b.n	8006752 <_dtoa_r+0x1e2>
 80067d2:	2300      	movs	r3, #0
 80067d4:	9309      	str	r3, [sp, #36]	; 0x24
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	2b00      	cmp	r3, #0
 80067da:	dc52      	bgt.n	8006882 <_dtoa_r+0x312>
 80067dc:	2301      	movs	r3, #1
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	9304      	str	r3, [sp, #16]
 80067e2:	461a      	mov	r2, r3
 80067e4:	920a      	str	r2, [sp, #40]	; 0x28
 80067e6:	e00b      	b.n	8006800 <_dtoa_r+0x290>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f3      	b.n	80067d4 <_dtoa_r+0x264>
 80067ec:	2300      	movs	r3, #0
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f2:	445b      	add	r3, fp
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	bfb8      	it	lt
 80067fe:	2301      	movlt	r3, #1
 8006800:	69e0      	ldr	r0, [r4, #28]
 8006802:	2100      	movs	r1, #0
 8006804:	2204      	movs	r2, #4
 8006806:	f102 0614 	add.w	r6, r2, #20
 800680a:	429e      	cmp	r6, r3
 800680c:	d93d      	bls.n	800688a <_dtoa_r+0x31a>
 800680e:	6041      	str	r1, [r0, #4]
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fd9f 	bl	8007354 <_Balloc>
 8006816:	9000      	str	r0, [sp, #0]
 8006818:	2800      	cmp	r0, #0
 800681a:	d139      	bne.n	8006890 <_dtoa_r+0x320>
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <_dtoa_r+0x308>)
 800681e:	4602      	mov	r2, r0
 8006820:	f240 11af 	movw	r1, #431	; 0x1af
 8006824:	e6bd      	b.n	80065a2 <_dtoa_r+0x32>
 8006826:	2301      	movs	r3, #1
 8006828:	e7e1      	b.n	80067ee <_dtoa_r+0x27e>
 800682a:	2501      	movs	r5, #1
 800682c:	2300      	movs	r3, #0
 800682e:	9307      	str	r3, [sp, #28]
 8006830:	9509      	str	r5, [sp, #36]	; 0x24
 8006832:	f04f 33ff 	mov.w	r3, #4294967295
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	2200      	movs	r2, #0
 800683c:	2312      	movs	r3, #18
 800683e:	e7d1      	b.n	80067e4 <_dtoa_r+0x274>
 8006840:	636f4361 	.word	0x636f4361
 8006844:	3fd287a7 	.word	0x3fd287a7
 8006848:	8b60c8b3 	.word	0x8b60c8b3
 800684c:	3fc68a28 	.word	0x3fc68a28
 8006850:	509f79fb 	.word	0x509f79fb
 8006854:	3fd34413 	.word	0x3fd34413
 8006858:	080094c9 	.word	0x080094c9
 800685c:	080094e0 	.word	0x080094e0
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	080094c5 	.word	0x080094c5
 8006868:	080094bc 	.word	0x080094bc
 800686c:	08009499 	.word	0x08009499
 8006870:	3ff80000 	.word	0x3ff80000
 8006874:	080095d0 	.word	0x080095d0
 8006878:	08009538 	.word	0x08009538
 800687c:	2301      	movs	r3, #1
 800687e:	9309      	str	r3, [sp, #36]	; 0x24
 8006880:	e7d7      	b.n	8006832 <_dtoa_r+0x2c2>
 8006882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	e7ba      	b.n	8006800 <_dtoa_r+0x290>
 800688a:	3101      	adds	r1, #1
 800688c:	0052      	lsls	r2, r2, #1
 800688e:	e7ba      	b.n	8006806 <_dtoa_r+0x296>
 8006890:	69e3      	ldr	r3, [r4, #28]
 8006892:	9a00      	ldr	r2, [sp, #0]
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	2b0e      	cmp	r3, #14
 800689a:	f200 80a8 	bhi.w	80069ee <_dtoa_r+0x47e>
 800689e:	2d00      	cmp	r5, #0
 80068a0:	f000 80a5 	beq.w	80069ee <_dtoa_r+0x47e>
 80068a4:	f1bb 0f00 	cmp.w	fp, #0
 80068a8:	dd38      	ble.n	800691c <_dtoa_r+0x3ac>
 80068aa:	4bc0      	ldr	r3, [pc, #768]	; (8006bac <_dtoa_r+0x63c>)
 80068ac:	f00b 020f 	and.w	r2, fp, #15
 80068b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80068bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80068c0:	d019      	beq.n	80068f6 <_dtoa_r+0x386>
 80068c2:	4bbb      	ldr	r3, [pc, #748]	; (8006bb0 <_dtoa_r+0x640>)
 80068c4:	ec51 0b18 	vmov	r0, r1, d8
 80068c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068cc:	f7f9 ffbe 	bl	800084c <__aeabi_ddiv>
 80068d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d4:	f008 080f 	and.w	r8, r8, #15
 80068d8:	2503      	movs	r5, #3
 80068da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006bb0 <_dtoa_r+0x640>
 80068de:	f1b8 0f00 	cmp.w	r8, #0
 80068e2:	d10a      	bne.n	80068fa <_dtoa_r+0x38a>
 80068e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e8:	4632      	mov	r2, r6
 80068ea:	463b      	mov	r3, r7
 80068ec:	f7f9 ffae 	bl	800084c <__aeabi_ddiv>
 80068f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f4:	e02b      	b.n	800694e <_dtoa_r+0x3de>
 80068f6:	2502      	movs	r5, #2
 80068f8:	e7ef      	b.n	80068da <_dtoa_r+0x36a>
 80068fa:	f018 0f01 	tst.w	r8, #1
 80068fe:	d008      	beq.n	8006912 <_dtoa_r+0x3a2>
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006908:	f7f9 fe76 	bl	80005f8 <__aeabi_dmul>
 800690c:	3501      	adds	r5, #1
 800690e:	4606      	mov	r6, r0
 8006910:	460f      	mov	r7, r1
 8006912:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006916:	f109 0908 	add.w	r9, r9, #8
 800691a:	e7e0      	b.n	80068de <_dtoa_r+0x36e>
 800691c:	f000 809f 	beq.w	8006a5e <_dtoa_r+0x4ee>
 8006920:	f1cb 0600 	rsb	r6, fp, #0
 8006924:	4ba1      	ldr	r3, [pc, #644]	; (8006bac <_dtoa_r+0x63c>)
 8006926:	4fa2      	ldr	r7, [pc, #648]	; (8006bb0 <_dtoa_r+0x640>)
 8006928:	f006 020f 	and.w	r2, r6, #15
 800692c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	ec51 0b18 	vmov	r0, r1, d8
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006940:	1136      	asrs	r6, r6, #4
 8006942:	2300      	movs	r3, #0
 8006944:	2502      	movs	r5, #2
 8006946:	2e00      	cmp	r6, #0
 8006948:	d17e      	bne.n	8006a48 <_dtoa_r+0x4d8>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1d0      	bne.n	80068f0 <_dtoa_r+0x380>
 800694e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006950:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8084 	beq.w	8006a62 <_dtoa_r+0x4f2>
 800695a:	4b96      	ldr	r3, [pc, #600]	; (8006bb4 <_dtoa_r+0x644>)
 800695c:	2200      	movs	r2, #0
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8bb 	bl	8000adc <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	d07b      	beq.n	8006a62 <_dtoa_r+0x4f2>
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d078      	beq.n	8006a62 <_dtoa_r+0x4f2>
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	dd39      	ble.n	80069ea <_dtoa_r+0x47a>
 8006976:	4b90      	ldr	r3, [pc, #576]	; (8006bb8 <_dtoa_r+0x648>)
 8006978:	2200      	movs	r2, #0
 800697a:	4640      	mov	r0, r8
 800697c:	4649      	mov	r1, r9
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006986:	9e01      	ldr	r6, [sp, #4]
 8006988:	f10b 37ff 	add.w	r7, fp, #4294967295
 800698c:	3501      	adds	r5, #1
 800698e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006992:	4628      	mov	r0, r5
 8006994:	f7f9 fdc6 	bl	8000524 <__aeabi_i2d>
 8006998:	4642      	mov	r2, r8
 800699a:	464b      	mov	r3, r9
 800699c:	f7f9 fe2c 	bl	80005f8 <__aeabi_dmul>
 80069a0:	4b86      	ldr	r3, [pc, #536]	; (8006bbc <_dtoa_r+0x64c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	f7f9 fc72 	bl	800028c <__adddf3>
 80069a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d158      	bne.n	8006a68 <_dtoa_r+0x4f8>
 80069b6:	4b82      	ldr	r3, [pc, #520]	; (8006bc0 <_dtoa_r+0x650>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fc63 	bl	8000288 <__aeabi_dsub>
 80069c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c6:	4680      	mov	r8, r0
 80069c8:	4689      	mov	r9, r1
 80069ca:	f7fa f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8296 	bne.w	8006f00 <_dtoa_r+0x990>
 80069d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80069d8:	4640      	mov	r0, r8
 80069da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069de:	4649      	mov	r1, r9
 80069e0:	f7fa f87c 	bl	8000adc <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 8289 	bne.w	8006efc <_dtoa_r+0x98c>
 80069ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80069ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f2c0 814e 	blt.w	8006c92 <_dtoa_r+0x722>
 80069f6:	f1bb 0f0e 	cmp.w	fp, #14
 80069fa:	f300 814a 	bgt.w	8006c92 <_dtoa_r+0x722>
 80069fe:	4b6b      	ldr	r3, [pc, #428]	; (8006bac <_dtoa_r+0x63c>)
 8006a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f280 80dc 	bge.w	8006bc8 <_dtoa_r+0x658>
 8006a10:	9b04      	ldr	r3, [sp, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f300 80d8 	bgt.w	8006bc8 <_dtoa_r+0x658>
 8006a18:	f040 826f 	bne.w	8006efa <_dtoa_r+0x98a>
 8006a1c:	4b68      	ldr	r3, [pc, #416]	; (8006bc0 <_dtoa_r+0x650>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7f9 fde8 	bl	80005f8 <__aeabi_dmul>
 8006a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a2c:	f7fa f86a 	bl	8000b04 <__aeabi_dcmpge>
 8006a30:	9e04      	ldr	r6, [sp, #16]
 8006a32:	4637      	mov	r7, r6
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f040 8245 	bne.w	8006ec4 <_dtoa_r+0x954>
 8006a3a:	9d00      	ldr	r5, [sp, #0]
 8006a3c:	2331      	movs	r3, #49	; 0x31
 8006a3e:	f805 3b01 	strb.w	r3, [r5], #1
 8006a42:	f10b 0b01 	add.w	fp, fp, #1
 8006a46:	e241      	b.n	8006ecc <_dtoa_r+0x95c>
 8006a48:	07f2      	lsls	r2, r6, #31
 8006a4a:	d505      	bpl.n	8006a58 <_dtoa_r+0x4e8>
 8006a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a50:	f7f9 fdd2 	bl	80005f8 <__aeabi_dmul>
 8006a54:	3501      	adds	r5, #1
 8006a56:	2301      	movs	r3, #1
 8006a58:	1076      	asrs	r6, r6, #1
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	e773      	b.n	8006946 <_dtoa_r+0x3d6>
 8006a5e:	2502      	movs	r5, #2
 8006a60:	e775      	b.n	800694e <_dtoa_r+0x3de>
 8006a62:	9e04      	ldr	r6, [sp, #16]
 8006a64:	465f      	mov	r7, fp
 8006a66:	e792      	b.n	800698e <_dtoa_r+0x41e>
 8006a68:	9900      	ldr	r1, [sp, #0]
 8006a6a:	4b50      	ldr	r3, [pc, #320]	; (8006bac <_dtoa_r+0x63c>)
 8006a6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a70:	4431      	add	r1, r6
 8006a72:	9102      	str	r1, [sp, #8]
 8006a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a76:	eeb0 9a47 	vmov.f32	s18, s14
 8006a7a:	eef0 9a67 	vmov.f32	s19, s15
 8006a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d044      	beq.n	8006b14 <_dtoa_r+0x5a4>
 8006a8a:	494e      	ldr	r1, [pc, #312]	; (8006bc4 <_dtoa_r+0x654>)
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 fedd 	bl	800084c <__aeabi_ddiv>
 8006a92:	ec53 2b19 	vmov	r2, r3, d9
 8006a96:	f7f9 fbf7 	bl	8000288 <__aeabi_dsub>
 8006a9a:	9d00      	ldr	r5, [sp, #0]
 8006a9c:	ec41 0b19 	vmov	d9, r0, r1
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7fa f858 	bl	8000b58 <__aeabi_d2iz>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	f7f9 fd3b 	bl	8000524 <__aeabi_i2d>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	f7f9 fbe7 	bl	8000288 <__aeabi_dsub>
 8006aba:	3630      	adds	r6, #48	; 0x30
 8006abc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac0:	ec53 2b19 	vmov	r2, r3, d9
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	f7fa f808 	bl	8000adc <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d164      	bne.n	8006b9a <_dtoa_r+0x62a>
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	4937      	ldr	r1, [pc, #220]	; (8006bb4 <_dtoa_r+0x644>)
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7f9 fbd6 	bl	8000288 <__aeabi_dsub>
 8006adc:	ec53 2b19 	vmov	r2, r3, d9
 8006ae0:	f7f9 fffc 	bl	8000adc <__aeabi_dcmplt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f040 80b6 	bne.w	8006c56 <_dtoa_r+0x6e6>
 8006aea:	9b02      	ldr	r3, [sp, #8]
 8006aec:	429d      	cmp	r5, r3
 8006aee:	f43f af7c 	beq.w	80069ea <_dtoa_r+0x47a>
 8006af2:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <_dtoa_r+0x648>)
 8006af4:	ec51 0b19 	vmov	r0, r1, d9
 8006af8:	2200      	movs	r2, #0
 8006afa:	f7f9 fd7d 	bl	80005f8 <__aeabi_dmul>
 8006afe:	4b2e      	ldr	r3, [pc, #184]	; (8006bb8 <_dtoa_r+0x648>)
 8006b00:	ec41 0b19 	vmov	d9, r0, r1
 8006b04:	2200      	movs	r2, #0
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	e7c5      	b.n	8006aa0 <_dtoa_r+0x530>
 8006b14:	ec51 0b17 	vmov	r0, r1, d7
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	9b02      	ldr	r3, [sp, #8]
 8006b1e:	9d00      	ldr	r5, [sp, #0]
 8006b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b22:	ec41 0b19 	vmov	d9, r0, r1
 8006b26:	4649      	mov	r1, r9
 8006b28:	4640      	mov	r0, r8
 8006b2a:	f7fa f815 	bl	8000b58 <__aeabi_d2iz>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	f7f9 fcf8 	bl	8000524 <__aeabi_i2d>
 8006b34:	3630      	adds	r6, #48	; 0x30
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	f805 6b01 	strb.w	r6, [r5], #1
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	429d      	cmp	r5, r3
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	4689      	mov	r9, r1
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	d124      	bne.n	8006b9e <_dtoa_r+0x62e>
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <_dtoa_r+0x654>)
 8006b56:	ec51 0b19 	vmov	r0, r1, d9
 8006b5a:	f7f9 fb97 	bl	800028c <__adddf3>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	f7f9 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d173      	bne.n	8006c56 <_dtoa_r+0x6e6>
 8006b6e:	ec53 2b19 	vmov	r2, r3, d9
 8006b72:	4914      	ldr	r1, [pc, #80]	; (8006bc4 <_dtoa_r+0x654>)
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7f9 fb87 	bl	8000288 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 ffab 	bl	8000adc <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f af2f 	beq.w	80069ea <_dtoa_r+0x47a>
 8006b8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b8e:	1e6b      	subs	r3, r5, #1
 8006b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d0f8      	beq.n	8006b8c <_dtoa_r+0x61c>
 8006b9a:	46bb      	mov	fp, r7
 8006b9c:	e04a      	b.n	8006c34 <_dtoa_r+0x6c4>
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <_dtoa_r+0x648>)
 8006ba0:	f7f9 fd2a 	bl	80005f8 <__aeabi_dmul>
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	e7bd      	b.n	8006b26 <_dtoa_r+0x5b6>
 8006baa:	bf00      	nop
 8006bac:	080095d0 	.word	0x080095d0
 8006bb0:	080095a8 	.word	0x080095a8
 8006bb4:	3ff00000 	.word	0x3ff00000
 8006bb8:	40240000 	.word	0x40240000
 8006bbc:	401c0000 	.word	0x401c0000
 8006bc0:	40140000 	.word	0x40140000
 8006bc4:	3fe00000 	.word	0x3fe00000
 8006bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bcc:	9d00      	ldr	r5, [sp, #0]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7f9 fe39 	bl	800084c <__aeabi_ddiv>
 8006bda:	f7f9 ffbd 	bl	8000b58 <__aeabi_d2iz>
 8006bde:	9001      	str	r0, [sp, #4]
 8006be0:	f7f9 fca0 	bl	8000524 <__aeabi_i2d>
 8006be4:	4642      	mov	r2, r8
 8006be6:	464b      	mov	r3, r9
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 fb48 	bl	8000288 <__aeabi_dsub>
 8006bf8:	9e01      	ldr	r6, [sp, #4]
 8006bfa:	9f04      	ldr	r7, [sp, #16]
 8006bfc:	3630      	adds	r6, #48	; 0x30
 8006bfe:	f805 6b01 	strb.w	r6, [r5], #1
 8006c02:	9e00      	ldr	r6, [sp, #0]
 8006c04:	1bae      	subs	r6, r5, r6
 8006c06:	42b7      	cmp	r7, r6
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	d134      	bne.n	8006c78 <_dtoa_r+0x708>
 8006c0e:	f7f9 fb3d 	bl	800028c <__adddf3>
 8006c12:	4642      	mov	r2, r8
 8006c14:	464b      	mov	r3, r9
 8006c16:	4606      	mov	r6, r0
 8006c18:	460f      	mov	r7, r1
 8006c1a:	f7f9 ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1e:	b9c8      	cbnz	r0, 8006c54 <_dtoa_r+0x6e4>
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	4630      	mov	r0, r6
 8006c26:	4639      	mov	r1, r7
 8006c28:	f7f9 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c2c:	b110      	cbz	r0, 8006c34 <_dtoa_r+0x6c4>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	07db      	lsls	r3, r3, #31
 8006c32:	d40f      	bmi.n	8006c54 <_dtoa_r+0x6e4>
 8006c34:	4651      	mov	r1, sl
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 fbcc 	bl	80073d4 <_Bfree>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c40:	702b      	strb	r3, [r5, #0]
 8006c42:	f10b 0301 	add.w	r3, fp, #1
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f43f ace2 	beq.w	8006614 <_dtoa_r+0xa4>
 8006c50:	601d      	str	r5, [r3, #0]
 8006c52:	e4df      	b.n	8006614 <_dtoa_r+0xa4>
 8006c54:	465f      	mov	r7, fp
 8006c56:	462b      	mov	r3, r5
 8006c58:	461d      	mov	r5, r3
 8006c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5e:	2a39      	cmp	r2, #57	; 0x39
 8006c60:	d106      	bne.n	8006c70 <_dtoa_r+0x700>
 8006c62:	9a00      	ldr	r2, [sp, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d1f7      	bne.n	8006c58 <_dtoa_r+0x6e8>
 8006c68:	9900      	ldr	r1, [sp, #0]
 8006c6a:	2230      	movs	r2, #48	; 0x30
 8006c6c:	3701      	adds	r7, #1
 8006c6e:	700a      	strb	r2, [r1, #0]
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	3201      	adds	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e790      	b.n	8006b9a <_dtoa_r+0x62a>
 8006c78:	4ba3      	ldr	r3, [pc, #652]	; (8006f08 <_dtoa_r+0x998>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f7f9 fcbc 	bl	80005f8 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	f7f9 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d09e      	beq.n	8006bce <_dtoa_r+0x65e>
 8006c90:	e7d0      	b.n	8006c34 <_dtoa_r+0x6c4>
 8006c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	f000 80ca 	beq.w	8006e2e <_dtoa_r+0x8be>
 8006c9a:	9a07      	ldr	r2, [sp, #28]
 8006c9c:	2a01      	cmp	r2, #1
 8006c9e:	f300 80ad 	bgt.w	8006dfc <_dtoa_r+0x88c>
 8006ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	f000 80a5 	beq.w	8006df4 <_dtoa_r+0x884>
 8006caa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cae:	9e08      	ldr	r6, [sp, #32]
 8006cb0:	9d05      	ldr	r5, [sp, #20]
 8006cb2:	9a05      	ldr	r2, [sp, #20]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	9205      	str	r2, [sp, #20]
 8006cb8:	9a06      	ldr	r2, [sp, #24]
 8006cba:	2101      	movs	r1, #1
 8006cbc:	441a      	add	r2, r3
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	9206      	str	r2, [sp, #24]
 8006cc2:	f000 fc3d 	bl	8007540 <__i2b>
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	b165      	cbz	r5, 8006ce4 <_dtoa_r+0x774>
 8006cca:	9b06      	ldr	r3, [sp, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd09      	ble.n	8006ce4 <_dtoa_r+0x774>
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	bfa8      	it	ge
 8006cd6:	462b      	movge	r3, r5
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	9205      	str	r2, [sp, #20]
 8006cdc:	9a06      	ldr	r2, [sp, #24]
 8006cde:	1aed      	subs	r5, r5, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	9306      	str	r3, [sp, #24]
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	b1f3      	cbz	r3, 8006d26 <_dtoa_r+0x7b6>
 8006ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80a3 	beq.w	8006e36 <_dtoa_r+0x8c6>
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	dd10      	ble.n	8006d16 <_dtoa_r+0x7a6>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fce1 	bl	80076c0 <__pow5mult>
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4601      	mov	r1, r0
 8006d02:	4607      	mov	r7, r0
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fc31 	bl	800756c <__multiply>
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 fb60 	bl	80073d4 <_Bfree>
 8006d14:	46c2      	mov	sl, r8
 8006d16:	9b08      	ldr	r3, [sp, #32]
 8006d18:	1b9a      	subs	r2, r3, r6
 8006d1a:	d004      	beq.n	8006d26 <_dtoa_r+0x7b6>
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fcce 	bl	80076c0 <__pow5mult>
 8006d24:	4682      	mov	sl, r0
 8006d26:	2101      	movs	r1, #1
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fc09 	bl	8007540 <__i2b>
 8006d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	f340 8081 	ble.w	8006e3a <_dtoa_r+0x8ca>
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 fcbf 	bl	80076c0 <__pow5mult>
 8006d42:	9b07      	ldr	r3, [sp, #28]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	4606      	mov	r6, r0
 8006d48:	dd7a      	ble.n	8006e40 <_dtoa_r+0x8d0>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	6933      	ldr	r3, [r6, #16]
 8006d50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d54:	6918      	ldr	r0, [r3, #16]
 8006d56:	f000 fba5 	bl	80074a4 <__hi0bits>
 8006d5a:	f1c0 0020 	rsb	r0, r0, #32
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	4418      	add	r0, r3
 8006d62:	f010 001f 	ands.w	r0, r0, #31
 8006d66:	f000 8094 	beq.w	8006e92 <_dtoa_r+0x922>
 8006d6a:	f1c0 0320 	rsb	r3, r0, #32
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	f340 8085 	ble.w	8006e7e <_dtoa_r+0x90e>
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	f1c0 001c 	rsb	r0, r0, #28
 8006d7a:	4403      	add	r3, r0
 8006d7c:	9305      	str	r3, [sp, #20]
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	4403      	add	r3, r0
 8006d82:	4405      	add	r5, r0
 8006d84:	9306      	str	r3, [sp, #24]
 8006d86:	9b05      	ldr	r3, [sp, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dd05      	ble.n	8006d98 <_dtoa_r+0x828>
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fcef 	bl	8007774 <__lshift>
 8006d96:	4682      	mov	sl, r0
 8006d98:	9b06      	ldr	r3, [sp, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dd05      	ble.n	8006daa <_dtoa_r+0x83a>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	461a      	mov	r2, r3
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 fce6 	bl	8007774 <__lshift>
 8006da8:	4606      	mov	r6, r0
 8006daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d072      	beq.n	8006e96 <_dtoa_r+0x926>
 8006db0:	4631      	mov	r1, r6
 8006db2:	4650      	mov	r0, sl
 8006db4:	f000 fd4a 	bl	800784c <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	da6c      	bge.n	8006e96 <_dtoa_r+0x926>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fb28 	bl	8007418 <__multadd>
 8006dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dce:	4682      	mov	sl, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81b0 	beq.w	8007136 <_dtoa_r+0xbc6>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4639      	mov	r1, r7
 8006dda:	220a      	movs	r2, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fb1b 	bl	8007418 <__multadd>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	4607      	mov	r7, r0
 8006de8:	f300 8096 	bgt.w	8006f18 <_dtoa_r+0x9a8>
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	dc59      	bgt.n	8006ea6 <_dtoa_r+0x936>
 8006df2:	e091      	b.n	8006f18 <_dtoa_r+0x9a8>
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dfa:	e758      	b.n	8006cae <_dtoa_r+0x73e>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	1e5e      	subs	r6, r3, #1
 8006e00:	9b08      	ldr	r3, [sp, #32]
 8006e02:	42b3      	cmp	r3, r6
 8006e04:	bfbf      	itttt	lt
 8006e06:	9b08      	ldrlt	r3, [sp, #32]
 8006e08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006e0a:	9608      	strlt	r6, [sp, #32]
 8006e0c:	1af3      	sublt	r3, r6, r3
 8006e0e:	bfb4      	ite	lt
 8006e10:	18d2      	addlt	r2, r2, r3
 8006e12:	1b9e      	subge	r6, r3, r6
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	bfbc      	itt	lt
 8006e18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006e1a:	2600      	movlt	r6, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bfb7      	itett	lt
 8006e20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006e24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006e28:	1a9d      	sublt	r5, r3, r2
 8006e2a:	2300      	movlt	r3, #0
 8006e2c:	e741      	b.n	8006cb2 <_dtoa_r+0x742>
 8006e2e:	9e08      	ldr	r6, [sp, #32]
 8006e30:	9d05      	ldr	r5, [sp, #20]
 8006e32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e34:	e748      	b.n	8006cc8 <_dtoa_r+0x758>
 8006e36:	9a08      	ldr	r2, [sp, #32]
 8006e38:	e770      	b.n	8006d1c <_dtoa_r+0x7ac>
 8006e3a:	9b07      	ldr	r3, [sp, #28]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	dc19      	bgt.n	8006e74 <_dtoa_r+0x904>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	b9bb      	cbnz	r3, 8006e74 <_dtoa_r+0x904>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e4a:	b99b      	cbnz	r3, 8006e74 <_dtoa_r+0x904>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	0d1b      	lsrs	r3, r3, #20
 8006e54:	051b      	lsls	r3, r3, #20
 8006e56:	b183      	cbz	r3, 8006e7a <_dtoa_r+0x90a>
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	9b06      	ldr	r3, [sp, #24]
 8006e60:	3301      	adds	r3, #1
 8006e62:	9306      	str	r3, [sp, #24]
 8006e64:	f04f 0801 	mov.w	r8, #1
 8006e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f47f af6f 	bne.w	8006d4e <_dtoa_r+0x7de>
 8006e70:	2001      	movs	r0, #1
 8006e72:	e774      	b.n	8006d5e <_dtoa_r+0x7ee>
 8006e74:	f04f 0800 	mov.w	r8, #0
 8006e78:	e7f6      	b.n	8006e68 <_dtoa_r+0x8f8>
 8006e7a:	4698      	mov	r8, r3
 8006e7c:	e7f4      	b.n	8006e68 <_dtoa_r+0x8f8>
 8006e7e:	d082      	beq.n	8006d86 <_dtoa_r+0x816>
 8006e80:	9a05      	ldr	r2, [sp, #20]
 8006e82:	331c      	adds	r3, #28
 8006e84:	441a      	add	r2, r3
 8006e86:	9205      	str	r2, [sp, #20]
 8006e88:	9a06      	ldr	r2, [sp, #24]
 8006e8a:	441a      	add	r2, r3
 8006e8c:	441d      	add	r5, r3
 8006e8e:	9206      	str	r2, [sp, #24]
 8006e90:	e779      	b.n	8006d86 <_dtoa_r+0x816>
 8006e92:	4603      	mov	r3, r0
 8006e94:	e7f4      	b.n	8006e80 <_dtoa_r+0x910>
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc37      	bgt.n	8006f0c <_dtoa_r+0x99c>
 8006e9c:	9b07      	ldr	r3, [sp, #28]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	dd34      	ble.n	8006f0c <_dtoa_r+0x99c>
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	b963      	cbnz	r3, 8006ec4 <_dtoa_r+0x954>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	2205      	movs	r2, #5
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fab2 	bl	8007418 <__multadd>
 8006eb4:	4601      	mov	r1, r0
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	4650      	mov	r0, sl
 8006eba:	f000 fcc7 	bl	800784c <__mcmp>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f73f adbb 	bgt.w	8006a3a <_dtoa_r+0x4ca>
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	9d00      	ldr	r5, [sp, #0]
 8006ec8:	ea6f 0b03 	mvn.w	fp, r3
 8006ecc:	f04f 0800 	mov.w	r8, #0
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 fa7e 	bl	80073d4 <_Bfree>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	f43f aeab 	beq.w	8006c34 <_dtoa_r+0x6c4>
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	d005      	beq.n	8006ef0 <_dtoa_r+0x980>
 8006ee4:	45b8      	cmp	r8, r7
 8006ee6:	d003      	beq.n	8006ef0 <_dtoa_r+0x980>
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 fa72 	bl	80073d4 <_Bfree>
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fa6e 	bl	80073d4 <_Bfree>
 8006ef8:	e69c      	b.n	8006c34 <_dtoa_r+0x6c4>
 8006efa:	2600      	movs	r6, #0
 8006efc:	4637      	mov	r7, r6
 8006efe:	e7e1      	b.n	8006ec4 <_dtoa_r+0x954>
 8006f00:	46bb      	mov	fp, r7
 8006f02:	4637      	mov	r7, r6
 8006f04:	e599      	b.n	8006a3a <_dtoa_r+0x4ca>
 8006f06:	bf00      	nop
 8006f08:	40240000 	.word	0x40240000
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80c8 	beq.w	80070a4 <_dtoa_r+0xb34>
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	dd05      	ble.n	8006f28 <_dtoa_r+0x9b8>
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fc27 	bl	8007774 <__lshift>
 8006f26:	4607      	mov	r7, r0
 8006f28:	f1b8 0f00 	cmp.w	r8, #0
 8006f2c:	d05b      	beq.n	8006fe6 <_dtoa_r+0xa76>
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fa0f 	bl	8007354 <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b928      	cbnz	r0, 8006f46 <_dtoa_r+0x9d6>
 8006f3a:	4b83      	ldr	r3, [pc, #524]	; (8007148 <_dtoa_r+0xbd8>)
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f42:	f7ff bb2e 	b.w	80065a2 <_dtoa_r+0x32>
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	3202      	adds	r2, #2
 8006f4a:	0092      	lsls	r2, r2, #2
 8006f4c:	f107 010c 	add.w	r1, r7, #12
 8006f50:	300c      	adds	r0, #12
 8006f52:	f000 ffab 	bl	8007eac <memcpy>
 8006f56:	2201      	movs	r2, #1
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fc0a 	bl	8007774 <__lshift>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	9308      	str	r3, [sp, #32]
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	46b8      	mov	r8, r7
 8006f76:	9306      	str	r3, [sp, #24]
 8006f78:	4607      	mov	r7, r0
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4650      	mov	r0, sl
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	f7ff fa69 	bl	800645a <quorem>
 8006f88:	4641      	mov	r1, r8
 8006f8a:	9002      	str	r0, [sp, #8]
 8006f8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f90:	4650      	mov	r0, sl
 8006f92:	f000 fc5b 	bl	800784c <__mcmp>
 8006f96:	463a      	mov	r2, r7
 8006f98:	9005      	str	r0, [sp, #20]
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fc71 	bl	8007884 <__mdiff>
 8006fa2:	68c2      	ldr	r2, [r0, #12]
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	bb02      	cbnz	r2, 8006fea <_dtoa_r+0xa7a>
 8006fa8:	4601      	mov	r1, r0
 8006faa:	4650      	mov	r0, sl
 8006fac:	f000 fc4e 	bl	800784c <__mcmp>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb8:	f000 fa0c 	bl	80073d4 <_Bfree>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc0:	9d04      	ldr	r5, [sp, #16]
 8006fc2:	ea43 0102 	orr.w	r1, r3, r2
 8006fc6:	9b06      	ldr	r3, [sp, #24]
 8006fc8:	4319      	orrs	r1, r3
 8006fca:	d110      	bne.n	8006fee <_dtoa_r+0xa7e>
 8006fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fd0:	d029      	beq.n	8007026 <_dtoa_r+0xab6>
 8006fd2:	9b05      	ldr	r3, [sp, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dd02      	ble.n	8006fde <_dtoa_r+0xa6e>
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	f883 9000 	strb.w	r9, [r3]
 8006fe4:	e774      	b.n	8006ed0 <_dtoa_r+0x960>
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	e7ba      	b.n	8006f60 <_dtoa_r+0x9f0>
 8006fea:	2201      	movs	r2, #1
 8006fec:	e7e1      	b.n	8006fb2 <_dtoa_r+0xa42>
 8006fee:	9b05      	ldr	r3, [sp, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	db04      	blt.n	8006ffe <_dtoa_r+0xa8e>
 8006ff4:	9907      	ldr	r1, [sp, #28]
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	9906      	ldr	r1, [sp, #24]
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	d120      	bne.n	8007040 <_dtoa_r+0xad0>
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	dded      	ble.n	8006fde <_dtoa_r+0xa6e>
 8007002:	4651      	mov	r1, sl
 8007004:	2201      	movs	r2, #1
 8007006:	4620      	mov	r0, r4
 8007008:	f000 fbb4 	bl	8007774 <__lshift>
 800700c:	4631      	mov	r1, r6
 800700e:	4682      	mov	sl, r0
 8007010:	f000 fc1c 	bl	800784c <__mcmp>
 8007014:	2800      	cmp	r0, #0
 8007016:	dc03      	bgt.n	8007020 <_dtoa_r+0xab0>
 8007018:	d1e1      	bne.n	8006fde <_dtoa_r+0xa6e>
 800701a:	f019 0f01 	tst.w	r9, #1
 800701e:	d0de      	beq.n	8006fde <_dtoa_r+0xa6e>
 8007020:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007024:	d1d8      	bne.n	8006fd8 <_dtoa_r+0xa68>
 8007026:	9a01      	ldr	r2, [sp, #4]
 8007028:	2339      	movs	r3, #57	; 0x39
 800702a:	7013      	strb	r3, [r2, #0]
 800702c:	462b      	mov	r3, r5
 800702e:	461d      	mov	r5, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007036:	2a39      	cmp	r2, #57	; 0x39
 8007038:	d06c      	beq.n	8007114 <_dtoa_r+0xba4>
 800703a:	3201      	adds	r2, #1
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e747      	b.n	8006ed0 <_dtoa_r+0x960>
 8007040:	2a00      	cmp	r2, #0
 8007042:	dd07      	ble.n	8007054 <_dtoa_r+0xae4>
 8007044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007048:	d0ed      	beq.n	8007026 <_dtoa_r+0xab6>
 800704a:	9a01      	ldr	r2, [sp, #4]
 800704c:	f109 0301 	add.w	r3, r9, #1
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	e73d      	b.n	8006ed0 <_dtoa_r+0x960>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	9a08      	ldr	r2, [sp, #32]
 8007058:	f803 9c01 	strb.w	r9, [r3, #-1]
 800705c:	4293      	cmp	r3, r2
 800705e:	d043      	beq.n	80070e8 <_dtoa_r+0xb78>
 8007060:	4651      	mov	r1, sl
 8007062:	2300      	movs	r3, #0
 8007064:	220a      	movs	r2, #10
 8007066:	4620      	mov	r0, r4
 8007068:	f000 f9d6 	bl	8007418 <__multadd>
 800706c:	45b8      	cmp	r8, r7
 800706e:	4682      	mov	sl, r0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	f04f 020a 	mov.w	r2, #10
 8007078:	4641      	mov	r1, r8
 800707a:	4620      	mov	r0, r4
 800707c:	d107      	bne.n	800708e <_dtoa_r+0xb1e>
 800707e:	f000 f9cb 	bl	8007418 <__multadd>
 8007082:	4680      	mov	r8, r0
 8007084:	4607      	mov	r7, r0
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	3301      	adds	r3, #1
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	e775      	b.n	8006f7a <_dtoa_r+0xa0a>
 800708e:	f000 f9c3 	bl	8007418 <__multadd>
 8007092:	4639      	mov	r1, r7
 8007094:	4680      	mov	r8, r0
 8007096:	2300      	movs	r3, #0
 8007098:	220a      	movs	r2, #10
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f9bc 	bl	8007418 <__multadd>
 80070a0:	4607      	mov	r7, r0
 80070a2:	e7f0      	b.n	8007086 <_dtoa_r+0xb16>
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	9d00      	ldr	r5, [sp, #0]
 80070aa:	4631      	mov	r1, r6
 80070ac:	4650      	mov	r0, sl
 80070ae:	f7ff f9d4 	bl	800645a <quorem>
 80070b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070b6:	9b00      	ldr	r3, [sp, #0]
 80070b8:	f805 9b01 	strb.w	r9, [r5], #1
 80070bc:	1aea      	subs	r2, r5, r3
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	dd07      	ble.n	80070d4 <_dtoa_r+0xb64>
 80070c4:	4651      	mov	r1, sl
 80070c6:	2300      	movs	r3, #0
 80070c8:	220a      	movs	r2, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f9a4 	bl	8007418 <__multadd>
 80070d0:	4682      	mov	sl, r0
 80070d2:	e7ea      	b.n	80070aa <_dtoa_r+0xb3a>
 80070d4:	9b01      	ldr	r3, [sp, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bfc8      	it	gt
 80070da:	461d      	movgt	r5, r3
 80070dc:	9b00      	ldr	r3, [sp, #0]
 80070de:	bfd8      	it	le
 80070e0:	2501      	movle	r5, #1
 80070e2:	441d      	add	r5, r3
 80070e4:	f04f 0800 	mov.w	r8, #0
 80070e8:	4651      	mov	r1, sl
 80070ea:	2201      	movs	r2, #1
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fb41 	bl	8007774 <__lshift>
 80070f2:	4631      	mov	r1, r6
 80070f4:	4682      	mov	sl, r0
 80070f6:	f000 fba9 	bl	800784c <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	dc96      	bgt.n	800702c <_dtoa_r+0xabc>
 80070fe:	d102      	bne.n	8007106 <_dtoa_r+0xb96>
 8007100:	f019 0f01 	tst.w	r9, #1
 8007104:	d192      	bne.n	800702c <_dtoa_r+0xabc>
 8007106:	462b      	mov	r3, r5
 8007108:	461d      	mov	r5, r3
 800710a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710e:	2a30      	cmp	r2, #48	; 0x30
 8007110:	d0fa      	beq.n	8007108 <_dtoa_r+0xb98>
 8007112:	e6dd      	b.n	8006ed0 <_dtoa_r+0x960>
 8007114:	9a00      	ldr	r2, [sp, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d189      	bne.n	800702e <_dtoa_r+0xabe>
 800711a:	f10b 0b01 	add.w	fp, fp, #1
 800711e:	2331      	movs	r3, #49	; 0x31
 8007120:	e796      	b.n	8007050 <_dtoa_r+0xae0>
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <_dtoa_r+0xbdc>)
 8007124:	f7ff ba99 	b.w	800665a <_dtoa_r+0xea>
 8007128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800712a:	2b00      	cmp	r3, #0
 800712c:	f47f aa6d 	bne.w	800660a <_dtoa_r+0x9a>
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <_dtoa_r+0xbe0>)
 8007132:	f7ff ba92 	b.w	800665a <_dtoa_r+0xea>
 8007136:	9b01      	ldr	r3, [sp, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	dcb5      	bgt.n	80070a8 <_dtoa_r+0xb38>
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	2b02      	cmp	r3, #2
 8007140:	f73f aeb1 	bgt.w	8006ea6 <_dtoa_r+0x936>
 8007144:	e7b0      	b.n	80070a8 <_dtoa_r+0xb38>
 8007146:	bf00      	nop
 8007148:	08009538 	.word	0x08009538
 800714c:	08009498 	.word	0x08009498
 8007150:	080094bc 	.word	0x080094bc

08007154 <_free_r>:
 8007154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007156:	2900      	cmp	r1, #0
 8007158:	d044      	beq.n	80071e4 <_free_r+0x90>
 800715a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715e:	9001      	str	r0, [sp, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f1a1 0404 	sub.w	r4, r1, #4
 8007166:	bfb8      	it	lt
 8007168:	18e4      	addlt	r4, r4, r3
 800716a:	f000 f8e7 	bl	800733c <__malloc_lock>
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <_free_r+0x94>)
 8007170:	9801      	ldr	r0, [sp, #4]
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	b933      	cbnz	r3, 8007184 <_free_r+0x30>
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	6014      	str	r4, [r2, #0]
 800717a:	b003      	add	sp, #12
 800717c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007180:	f000 b8e2 	b.w	8007348 <__malloc_unlock>
 8007184:	42a3      	cmp	r3, r4
 8007186:	d908      	bls.n	800719a <_free_r+0x46>
 8007188:	6825      	ldr	r5, [r4, #0]
 800718a:	1961      	adds	r1, r4, r5
 800718c:	428b      	cmp	r3, r1
 800718e:	bf01      	itttt	eq
 8007190:	6819      	ldreq	r1, [r3, #0]
 8007192:	685b      	ldreq	r3, [r3, #4]
 8007194:	1949      	addeq	r1, r1, r5
 8007196:	6021      	streq	r1, [r4, #0]
 8007198:	e7ed      	b.n	8007176 <_free_r+0x22>
 800719a:	461a      	mov	r2, r3
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	b10b      	cbz	r3, 80071a4 <_free_r+0x50>
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d9fa      	bls.n	800719a <_free_r+0x46>
 80071a4:	6811      	ldr	r1, [r2, #0]
 80071a6:	1855      	adds	r5, r2, r1
 80071a8:	42a5      	cmp	r5, r4
 80071aa:	d10b      	bne.n	80071c4 <_free_r+0x70>
 80071ac:	6824      	ldr	r4, [r4, #0]
 80071ae:	4421      	add	r1, r4
 80071b0:	1854      	adds	r4, r2, r1
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	6011      	str	r1, [r2, #0]
 80071b6:	d1e0      	bne.n	800717a <_free_r+0x26>
 80071b8:	681c      	ldr	r4, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	6053      	str	r3, [r2, #4]
 80071be:	440c      	add	r4, r1
 80071c0:	6014      	str	r4, [r2, #0]
 80071c2:	e7da      	b.n	800717a <_free_r+0x26>
 80071c4:	d902      	bls.n	80071cc <_free_r+0x78>
 80071c6:	230c      	movs	r3, #12
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	e7d6      	b.n	800717a <_free_r+0x26>
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	1961      	adds	r1, r4, r5
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf04      	itt	eq
 80071d4:	6819      	ldreq	r1, [r3, #0]
 80071d6:	685b      	ldreq	r3, [r3, #4]
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	bf04      	itt	eq
 80071dc:	1949      	addeq	r1, r1, r5
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	6054      	str	r4, [r2, #4]
 80071e2:	e7ca      	b.n	800717a <_free_r+0x26>
 80071e4:	b003      	add	sp, #12
 80071e6:	bd30      	pop	{r4, r5, pc}
 80071e8:	200004e4 	.word	0x200004e4

080071ec <malloc>:
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <malloc+0xc>)
 80071ee:	4601      	mov	r1, r0
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f000 b823 	b.w	800723c <_malloc_r>
 80071f6:	bf00      	nop
 80071f8:	200000cc 	.word	0x200000cc

080071fc <sbrk_aligned>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4e0e      	ldr	r6, [pc, #56]	; (8007238 <sbrk_aligned+0x3c>)
 8007200:	460c      	mov	r4, r1
 8007202:	6831      	ldr	r1, [r6, #0]
 8007204:	4605      	mov	r5, r0
 8007206:	b911      	cbnz	r1, 800720e <sbrk_aligned+0x12>
 8007208:	f000 fe40 	bl	8007e8c <_sbrk_r>
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 fe3b 	bl	8007e8c <_sbrk_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d00a      	beq.n	8007230 <sbrk_aligned+0x34>
 800721a:	1cc4      	adds	r4, r0, #3
 800721c:	f024 0403 	bic.w	r4, r4, #3
 8007220:	42a0      	cmp	r0, r4
 8007222:	d007      	beq.n	8007234 <sbrk_aligned+0x38>
 8007224:	1a21      	subs	r1, r4, r0
 8007226:	4628      	mov	r0, r5
 8007228:	f000 fe30 	bl	8007e8c <_sbrk_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d101      	bne.n	8007234 <sbrk_aligned+0x38>
 8007230:	f04f 34ff 	mov.w	r4, #4294967295
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	200004e8 	.word	0x200004e8

0800723c <_malloc_r>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	1ccd      	adds	r5, r1, #3
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	2d00      	cmp	r5, #0
 8007250:	4607      	mov	r7, r0
 8007252:	db01      	blt.n	8007258 <_malloc_r+0x1c>
 8007254:	42a9      	cmp	r1, r5
 8007256:	d905      	bls.n	8007264 <_malloc_r+0x28>
 8007258:	230c      	movs	r3, #12
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	2600      	movs	r6, #0
 800725e:	4630      	mov	r0, r6
 8007260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007338 <_malloc_r+0xfc>
 8007268:	f000 f868 	bl	800733c <__malloc_lock>
 800726c:	f8d8 3000 	ldr.w	r3, [r8]
 8007270:	461c      	mov	r4, r3
 8007272:	bb5c      	cbnz	r4, 80072cc <_malloc_r+0x90>
 8007274:	4629      	mov	r1, r5
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ffc0 	bl	80071fc <sbrk_aligned>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	4604      	mov	r4, r0
 8007280:	d155      	bne.n	800732e <_malloc_r+0xf2>
 8007282:	f8d8 4000 	ldr.w	r4, [r8]
 8007286:	4626      	mov	r6, r4
 8007288:	2e00      	cmp	r6, #0
 800728a:	d145      	bne.n	8007318 <_malloc_r+0xdc>
 800728c:	2c00      	cmp	r4, #0
 800728e:	d048      	beq.n	8007322 <_malloc_r+0xe6>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	4631      	mov	r1, r6
 8007294:	4638      	mov	r0, r7
 8007296:	eb04 0903 	add.w	r9, r4, r3
 800729a:	f000 fdf7 	bl	8007e8c <_sbrk_r>
 800729e:	4581      	cmp	r9, r0
 80072a0:	d13f      	bne.n	8007322 <_malloc_r+0xe6>
 80072a2:	6821      	ldr	r1, [r4, #0]
 80072a4:	1a6d      	subs	r5, r5, r1
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ffa7 	bl	80071fc <sbrk_aligned>
 80072ae:	3001      	adds	r0, #1
 80072b0:	d037      	beq.n	8007322 <_malloc_r+0xe6>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	442b      	add	r3, r5
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	f8d8 3000 	ldr.w	r3, [r8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d038      	beq.n	8007332 <_malloc_r+0xf6>
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	42a2      	cmp	r2, r4
 80072c4:	d12b      	bne.n	800731e <_malloc_r+0xe2>
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	e00f      	b.n	80072ec <_malloc_r+0xb0>
 80072cc:	6822      	ldr	r2, [r4, #0]
 80072ce:	1b52      	subs	r2, r2, r5
 80072d0:	d41f      	bmi.n	8007312 <_malloc_r+0xd6>
 80072d2:	2a0b      	cmp	r2, #11
 80072d4:	d917      	bls.n	8007306 <_malloc_r+0xca>
 80072d6:	1961      	adds	r1, r4, r5
 80072d8:	42a3      	cmp	r3, r4
 80072da:	6025      	str	r5, [r4, #0]
 80072dc:	bf18      	it	ne
 80072de:	6059      	strne	r1, [r3, #4]
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	bf08      	it	eq
 80072e4:	f8c8 1000 	streq.w	r1, [r8]
 80072e8:	5162      	str	r2, [r4, r5]
 80072ea:	604b      	str	r3, [r1, #4]
 80072ec:	4638      	mov	r0, r7
 80072ee:	f104 060b 	add.w	r6, r4, #11
 80072f2:	f000 f829 	bl	8007348 <__malloc_unlock>
 80072f6:	f026 0607 	bic.w	r6, r6, #7
 80072fa:	1d23      	adds	r3, r4, #4
 80072fc:	1af2      	subs	r2, r6, r3
 80072fe:	d0ae      	beq.n	800725e <_malloc_r+0x22>
 8007300:	1b9b      	subs	r3, r3, r6
 8007302:	50a3      	str	r3, [r4, r2]
 8007304:	e7ab      	b.n	800725e <_malloc_r+0x22>
 8007306:	42a3      	cmp	r3, r4
 8007308:	6862      	ldr	r2, [r4, #4]
 800730a:	d1dd      	bne.n	80072c8 <_malloc_r+0x8c>
 800730c:	f8c8 2000 	str.w	r2, [r8]
 8007310:	e7ec      	b.n	80072ec <_malloc_r+0xb0>
 8007312:	4623      	mov	r3, r4
 8007314:	6864      	ldr	r4, [r4, #4]
 8007316:	e7ac      	b.n	8007272 <_malloc_r+0x36>
 8007318:	4634      	mov	r4, r6
 800731a:	6876      	ldr	r6, [r6, #4]
 800731c:	e7b4      	b.n	8007288 <_malloc_r+0x4c>
 800731e:	4613      	mov	r3, r2
 8007320:	e7cc      	b.n	80072bc <_malloc_r+0x80>
 8007322:	230c      	movs	r3, #12
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4638      	mov	r0, r7
 8007328:	f000 f80e 	bl	8007348 <__malloc_unlock>
 800732c:	e797      	b.n	800725e <_malloc_r+0x22>
 800732e:	6025      	str	r5, [r4, #0]
 8007330:	e7dc      	b.n	80072ec <_malloc_r+0xb0>
 8007332:	605b      	str	r3, [r3, #4]
 8007334:	deff      	udf	#255	; 0xff
 8007336:	bf00      	nop
 8007338:	200004e4 	.word	0x200004e4

0800733c <__malloc_lock>:
 800733c:	4801      	ldr	r0, [pc, #4]	; (8007344 <__malloc_lock+0x8>)
 800733e:	f7ff b88a 	b.w	8006456 <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	200004e0 	.word	0x200004e0

08007348 <__malloc_unlock>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__malloc_unlock+0x8>)
 800734a:	f7ff b885 	b.w	8006458 <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	200004e0 	.word	0x200004e0

08007354 <_Balloc>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	69c6      	ldr	r6, [r0, #28]
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	b976      	cbnz	r6, 800737c <_Balloc+0x28>
 800735e:	2010      	movs	r0, #16
 8007360:	f7ff ff44 	bl	80071ec <malloc>
 8007364:	4602      	mov	r2, r0
 8007366:	61e0      	str	r0, [r4, #28]
 8007368:	b920      	cbnz	r0, 8007374 <_Balloc+0x20>
 800736a:	4b18      	ldr	r3, [pc, #96]	; (80073cc <_Balloc+0x78>)
 800736c:	4818      	ldr	r0, [pc, #96]	; (80073d0 <_Balloc+0x7c>)
 800736e:	216b      	movs	r1, #107	; 0x6b
 8007370:	f000 fdaa 	bl	8007ec8 <__assert_func>
 8007374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007378:	6006      	str	r6, [r0, #0]
 800737a:	60c6      	str	r6, [r0, #12]
 800737c:	69e6      	ldr	r6, [r4, #28]
 800737e:	68f3      	ldr	r3, [r6, #12]
 8007380:	b183      	cbz	r3, 80073a4 <_Balloc+0x50>
 8007382:	69e3      	ldr	r3, [r4, #28]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800738a:	b9b8      	cbnz	r0, 80073bc <_Balloc+0x68>
 800738c:	2101      	movs	r1, #1
 800738e:	fa01 f605 	lsl.w	r6, r1, r5
 8007392:	1d72      	adds	r2, r6, #5
 8007394:	0092      	lsls	r2, r2, #2
 8007396:	4620      	mov	r0, r4
 8007398:	f000 fdb4 	bl	8007f04 <_calloc_r>
 800739c:	b160      	cbz	r0, 80073b8 <_Balloc+0x64>
 800739e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073a2:	e00e      	b.n	80073c2 <_Balloc+0x6e>
 80073a4:	2221      	movs	r2, #33	; 0x21
 80073a6:	2104      	movs	r1, #4
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fdab 	bl	8007f04 <_calloc_r>
 80073ae:	69e3      	ldr	r3, [r4, #28]
 80073b0:	60f0      	str	r0, [r6, #12]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e4      	bne.n	8007382 <_Balloc+0x2e>
 80073b8:	2000      	movs	r0, #0
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	6802      	ldr	r2, [r0, #0]
 80073be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073c2:	2300      	movs	r3, #0
 80073c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073c8:	e7f7      	b.n	80073ba <_Balloc+0x66>
 80073ca:	bf00      	nop
 80073cc:	080094c9 	.word	0x080094c9
 80073d0:	08009549 	.word	0x08009549

080073d4 <_Bfree>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	69c6      	ldr	r6, [r0, #28]
 80073d8:	4605      	mov	r5, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	b976      	cbnz	r6, 80073fc <_Bfree+0x28>
 80073de:	2010      	movs	r0, #16
 80073e0:	f7ff ff04 	bl	80071ec <malloc>
 80073e4:	4602      	mov	r2, r0
 80073e6:	61e8      	str	r0, [r5, #28]
 80073e8:	b920      	cbnz	r0, 80073f4 <_Bfree+0x20>
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <_Bfree+0x3c>)
 80073ec:	4809      	ldr	r0, [pc, #36]	; (8007414 <_Bfree+0x40>)
 80073ee:	218f      	movs	r1, #143	; 0x8f
 80073f0:	f000 fd6a 	bl	8007ec8 <__assert_func>
 80073f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f8:	6006      	str	r6, [r0, #0]
 80073fa:	60c6      	str	r6, [r0, #12]
 80073fc:	b13c      	cbz	r4, 800740e <_Bfree+0x3a>
 80073fe:	69eb      	ldr	r3, [r5, #28]
 8007400:	6862      	ldr	r2, [r4, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007408:	6021      	str	r1, [r4, #0]
 800740a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	080094c9 	.word	0x080094c9
 8007414:	08009549 	.word	0x08009549

08007418 <__multadd>:
 8007418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741c:	690d      	ldr	r5, [r1, #16]
 800741e:	4607      	mov	r7, r0
 8007420:	460c      	mov	r4, r1
 8007422:	461e      	mov	r6, r3
 8007424:	f101 0c14 	add.w	ip, r1, #20
 8007428:	2000      	movs	r0, #0
 800742a:	f8dc 3000 	ldr.w	r3, [ip]
 800742e:	b299      	uxth	r1, r3
 8007430:	fb02 6101 	mla	r1, r2, r1, r6
 8007434:	0c1e      	lsrs	r6, r3, #16
 8007436:	0c0b      	lsrs	r3, r1, #16
 8007438:	fb02 3306 	mla	r3, r2, r6, r3
 800743c:	b289      	uxth	r1, r1
 800743e:	3001      	adds	r0, #1
 8007440:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007444:	4285      	cmp	r5, r0
 8007446:	f84c 1b04 	str.w	r1, [ip], #4
 800744a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800744e:	dcec      	bgt.n	800742a <__multadd+0x12>
 8007450:	b30e      	cbz	r6, 8007496 <__multadd+0x7e>
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	42ab      	cmp	r3, r5
 8007456:	dc19      	bgt.n	800748c <__multadd+0x74>
 8007458:	6861      	ldr	r1, [r4, #4]
 800745a:	4638      	mov	r0, r7
 800745c:	3101      	adds	r1, #1
 800745e:	f7ff ff79 	bl	8007354 <_Balloc>
 8007462:	4680      	mov	r8, r0
 8007464:	b928      	cbnz	r0, 8007472 <__multadd+0x5a>
 8007466:	4602      	mov	r2, r0
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <__multadd+0x84>)
 800746a:	480d      	ldr	r0, [pc, #52]	; (80074a0 <__multadd+0x88>)
 800746c:	21ba      	movs	r1, #186	; 0xba
 800746e:	f000 fd2b 	bl	8007ec8 <__assert_func>
 8007472:	6922      	ldr	r2, [r4, #16]
 8007474:	3202      	adds	r2, #2
 8007476:	f104 010c 	add.w	r1, r4, #12
 800747a:	0092      	lsls	r2, r2, #2
 800747c:	300c      	adds	r0, #12
 800747e:	f000 fd15 	bl	8007eac <memcpy>
 8007482:	4621      	mov	r1, r4
 8007484:	4638      	mov	r0, r7
 8007486:	f7ff ffa5 	bl	80073d4 <_Bfree>
 800748a:	4644      	mov	r4, r8
 800748c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007490:	3501      	adds	r5, #1
 8007492:	615e      	str	r6, [r3, #20]
 8007494:	6125      	str	r5, [r4, #16]
 8007496:	4620      	mov	r0, r4
 8007498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800749c:	08009538 	.word	0x08009538
 80074a0:	08009549 	.word	0x08009549

080074a4 <__hi0bits>:
 80074a4:	0c03      	lsrs	r3, r0, #16
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	b9d3      	cbnz	r3, 80074e0 <__hi0bits+0x3c>
 80074aa:	0400      	lsls	r0, r0, #16
 80074ac:	2310      	movs	r3, #16
 80074ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074b2:	bf04      	itt	eq
 80074b4:	0200      	lsleq	r0, r0, #8
 80074b6:	3308      	addeq	r3, #8
 80074b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074bc:	bf04      	itt	eq
 80074be:	0100      	lsleq	r0, r0, #4
 80074c0:	3304      	addeq	r3, #4
 80074c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074c6:	bf04      	itt	eq
 80074c8:	0080      	lsleq	r0, r0, #2
 80074ca:	3302      	addeq	r3, #2
 80074cc:	2800      	cmp	r0, #0
 80074ce:	db05      	blt.n	80074dc <__hi0bits+0x38>
 80074d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074d4:	f103 0301 	add.w	r3, r3, #1
 80074d8:	bf08      	it	eq
 80074da:	2320      	moveq	r3, #32
 80074dc:	4618      	mov	r0, r3
 80074de:	4770      	bx	lr
 80074e0:	2300      	movs	r3, #0
 80074e2:	e7e4      	b.n	80074ae <__hi0bits+0xa>

080074e4 <__lo0bits>:
 80074e4:	6803      	ldr	r3, [r0, #0]
 80074e6:	f013 0207 	ands.w	r2, r3, #7
 80074ea:	d00c      	beq.n	8007506 <__lo0bits+0x22>
 80074ec:	07d9      	lsls	r1, r3, #31
 80074ee:	d422      	bmi.n	8007536 <__lo0bits+0x52>
 80074f0:	079a      	lsls	r2, r3, #30
 80074f2:	bf49      	itett	mi
 80074f4:	085b      	lsrmi	r3, r3, #1
 80074f6:	089b      	lsrpl	r3, r3, #2
 80074f8:	6003      	strmi	r3, [r0, #0]
 80074fa:	2201      	movmi	r2, #1
 80074fc:	bf5c      	itt	pl
 80074fe:	6003      	strpl	r3, [r0, #0]
 8007500:	2202      	movpl	r2, #2
 8007502:	4610      	mov	r0, r2
 8007504:	4770      	bx	lr
 8007506:	b299      	uxth	r1, r3
 8007508:	b909      	cbnz	r1, 800750e <__lo0bits+0x2a>
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	2210      	movs	r2, #16
 800750e:	b2d9      	uxtb	r1, r3
 8007510:	b909      	cbnz	r1, 8007516 <__lo0bits+0x32>
 8007512:	3208      	adds	r2, #8
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	0719      	lsls	r1, r3, #28
 8007518:	bf04      	itt	eq
 800751a:	091b      	lsreq	r3, r3, #4
 800751c:	3204      	addeq	r2, #4
 800751e:	0799      	lsls	r1, r3, #30
 8007520:	bf04      	itt	eq
 8007522:	089b      	lsreq	r3, r3, #2
 8007524:	3202      	addeq	r2, #2
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	d403      	bmi.n	8007532 <__lo0bits+0x4e>
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	f102 0201 	add.w	r2, r2, #1
 8007530:	d003      	beq.n	800753a <__lo0bits+0x56>
 8007532:	6003      	str	r3, [r0, #0]
 8007534:	e7e5      	b.n	8007502 <__lo0bits+0x1e>
 8007536:	2200      	movs	r2, #0
 8007538:	e7e3      	b.n	8007502 <__lo0bits+0x1e>
 800753a:	2220      	movs	r2, #32
 800753c:	e7e1      	b.n	8007502 <__lo0bits+0x1e>
	...

08007540 <__i2b>:
 8007540:	b510      	push	{r4, lr}
 8007542:	460c      	mov	r4, r1
 8007544:	2101      	movs	r1, #1
 8007546:	f7ff ff05 	bl	8007354 <_Balloc>
 800754a:	4602      	mov	r2, r0
 800754c:	b928      	cbnz	r0, 800755a <__i2b+0x1a>
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <__i2b+0x24>)
 8007550:	4805      	ldr	r0, [pc, #20]	; (8007568 <__i2b+0x28>)
 8007552:	f240 1145 	movw	r1, #325	; 0x145
 8007556:	f000 fcb7 	bl	8007ec8 <__assert_func>
 800755a:	2301      	movs	r3, #1
 800755c:	6144      	str	r4, [r0, #20]
 800755e:	6103      	str	r3, [r0, #16]
 8007560:	bd10      	pop	{r4, pc}
 8007562:	bf00      	nop
 8007564:	08009538 	.word	0x08009538
 8007568:	08009549 	.word	0x08009549

0800756c <__multiply>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	4691      	mov	r9, r2
 8007572:	690a      	ldr	r2, [r1, #16]
 8007574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007578:	429a      	cmp	r2, r3
 800757a:	bfb8      	it	lt
 800757c:	460b      	movlt	r3, r1
 800757e:	460c      	mov	r4, r1
 8007580:	bfbc      	itt	lt
 8007582:	464c      	movlt	r4, r9
 8007584:	4699      	movlt	r9, r3
 8007586:	6927      	ldr	r7, [r4, #16]
 8007588:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800758c:	68a3      	ldr	r3, [r4, #8]
 800758e:	6861      	ldr	r1, [r4, #4]
 8007590:	eb07 060a 	add.w	r6, r7, sl
 8007594:	42b3      	cmp	r3, r6
 8007596:	b085      	sub	sp, #20
 8007598:	bfb8      	it	lt
 800759a:	3101      	addlt	r1, #1
 800759c:	f7ff feda 	bl	8007354 <_Balloc>
 80075a0:	b930      	cbnz	r0, 80075b0 <__multiply+0x44>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b44      	ldr	r3, [pc, #272]	; (80076b8 <__multiply+0x14c>)
 80075a6:	4845      	ldr	r0, [pc, #276]	; (80076bc <__multiply+0x150>)
 80075a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075ac:	f000 fc8c 	bl	8007ec8 <__assert_func>
 80075b0:	f100 0514 	add.w	r5, r0, #20
 80075b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075b8:	462b      	mov	r3, r5
 80075ba:	2200      	movs	r2, #0
 80075bc:	4543      	cmp	r3, r8
 80075be:	d321      	bcc.n	8007604 <__multiply+0x98>
 80075c0:	f104 0314 	add.w	r3, r4, #20
 80075c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075c8:	f109 0314 	add.w	r3, r9, #20
 80075cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	1b3a      	subs	r2, r7, r4
 80075d4:	3a15      	subs	r2, #21
 80075d6:	f022 0203 	bic.w	r2, r2, #3
 80075da:	3204      	adds	r2, #4
 80075dc:	f104 0115 	add.w	r1, r4, #21
 80075e0:	428f      	cmp	r7, r1
 80075e2:	bf38      	it	cc
 80075e4:	2204      	movcc	r2, #4
 80075e6:	9201      	str	r2, [sp, #4]
 80075e8:	9a02      	ldr	r2, [sp, #8]
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d80c      	bhi.n	800760a <__multiply+0x9e>
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	dd03      	ble.n	80075fc <__multiply+0x90>
 80075f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05b      	beq.n	80076b4 <__multiply+0x148>
 80075fc:	6106      	str	r6, [r0, #16]
 80075fe:	b005      	add	sp, #20
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	f843 2b04 	str.w	r2, [r3], #4
 8007608:	e7d8      	b.n	80075bc <__multiply+0x50>
 800760a:	f8b3 a000 	ldrh.w	sl, [r3]
 800760e:	f1ba 0f00 	cmp.w	sl, #0
 8007612:	d024      	beq.n	800765e <__multiply+0xf2>
 8007614:	f104 0e14 	add.w	lr, r4, #20
 8007618:	46a9      	mov	r9, r5
 800761a:	f04f 0c00 	mov.w	ip, #0
 800761e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007622:	f8d9 1000 	ldr.w	r1, [r9]
 8007626:	fa1f fb82 	uxth.w	fp, r2
 800762a:	b289      	uxth	r1, r1
 800762c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007630:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007634:	f8d9 2000 	ldr.w	r2, [r9]
 8007638:	4461      	add	r1, ip
 800763a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800763e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007646:	b289      	uxth	r1, r1
 8007648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800764c:	4577      	cmp	r7, lr
 800764e:	f849 1b04 	str.w	r1, [r9], #4
 8007652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007656:	d8e2      	bhi.n	800761e <__multiply+0xb2>
 8007658:	9a01      	ldr	r2, [sp, #4]
 800765a:	f845 c002 	str.w	ip, [r5, r2]
 800765e:	9a03      	ldr	r2, [sp, #12]
 8007660:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007664:	3304      	adds	r3, #4
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	d021      	beq.n	80076b0 <__multiply+0x144>
 800766c:	6829      	ldr	r1, [r5, #0]
 800766e:	f104 0c14 	add.w	ip, r4, #20
 8007672:	46ae      	mov	lr, r5
 8007674:	f04f 0a00 	mov.w	sl, #0
 8007678:	f8bc b000 	ldrh.w	fp, [ip]
 800767c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007680:	fb09 220b 	mla	r2, r9, fp, r2
 8007684:	4452      	add	r2, sl
 8007686:	b289      	uxth	r1, r1
 8007688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800768c:	f84e 1b04 	str.w	r1, [lr], #4
 8007690:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007698:	f8be 1000 	ldrh.w	r1, [lr]
 800769c:	fb09 110a 	mla	r1, r9, sl, r1
 80076a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076a4:	4567      	cmp	r7, ip
 80076a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076aa:	d8e5      	bhi.n	8007678 <__multiply+0x10c>
 80076ac:	9a01      	ldr	r2, [sp, #4]
 80076ae:	50a9      	str	r1, [r5, r2]
 80076b0:	3504      	adds	r5, #4
 80076b2:	e799      	b.n	80075e8 <__multiply+0x7c>
 80076b4:	3e01      	subs	r6, #1
 80076b6:	e79b      	b.n	80075f0 <__multiply+0x84>
 80076b8:	08009538 	.word	0x08009538
 80076bc:	08009549 	.word	0x08009549

080076c0 <__pow5mult>:
 80076c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c4:	4615      	mov	r5, r2
 80076c6:	f012 0203 	ands.w	r2, r2, #3
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	d007      	beq.n	80076e0 <__pow5mult+0x20>
 80076d0:	4c25      	ldr	r4, [pc, #148]	; (8007768 <__pow5mult+0xa8>)
 80076d2:	3a01      	subs	r2, #1
 80076d4:	2300      	movs	r3, #0
 80076d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076da:	f7ff fe9d 	bl	8007418 <__multadd>
 80076de:	4607      	mov	r7, r0
 80076e0:	10ad      	asrs	r5, r5, #2
 80076e2:	d03d      	beq.n	8007760 <__pow5mult+0xa0>
 80076e4:	69f4      	ldr	r4, [r6, #28]
 80076e6:	b97c      	cbnz	r4, 8007708 <__pow5mult+0x48>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f7ff fd7f 	bl	80071ec <malloc>
 80076ee:	4602      	mov	r2, r0
 80076f0:	61f0      	str	r0, [r6, #28]
 80076f2:	b928      	cbnz	r0, 8007700 <__pow5mult+0x40>
 80076f4:	4b1d      	ldr	r3, [pc, #116]	; (800776c <__pow5mult+0xac>)
 80076f6:	481e      	ldr	r0, [pc, #120]	; (8007770 <__pow5mult+0xb0>)
 80076f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80076fc:	f000 fbe4 	bl	8007ec8 <__assert_func>
 8007700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007704:	6004      	str	r4, [r0, #0]
 8007706:	60c4      	str	r4, [r0, #12]
 8007708:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800770c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007710:	b94c      	cbnz	r4, 8007726 <__pow5mult+0x66>
 8007712:	f240 2171 	movw	r1, #625	; 0x271
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ff12 	bl	8007540 <__i2b>
 800771c:	2300      	movs	r3, #0
 800771e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007722:	4604      	mov	r4, r0
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	f04f 0900 	mov.w	r9, #0
 800772a:	07eb      	lsls	r3, r5, #31
 800772c:	d50a      	bpl.n	8007744 <__pow5mult+0x84>
 800772e:	4639      	mov	r1, r7
 8007730:	4622      	mov	r2, r4
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ff1a 	bl	800756c <__multiply>
 8007738:	4639      	mov	r1, r7
 800773a:	4680      	mov	r8, r0
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff fe49 	bl	80073d4 <_Bfree>
 8007742:	4647      	mov	r7, r8
 8007744:	106d      	asrs	r5, r5, #1
 8007746:	d00b      	beq.n	8007760 <__pow5mult+0xa0>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	b938      	cbnz	r0, 800775c <__pow5mult+0x9c>
 800774c:	4622      	mov	r2, r4
 800774e:	4621      	mov	r1, r4
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff ff0b 	bl	800756c <__multiply>
 8007756:	6020      	str	r0, [r4, #0]
 8007758:	f8c0 9000 	str.w	r9, [r0]
 800775c:	4604      	mov	r4, r0
 800775e:	e7e4      	b.n	800772a <__pow5mult+0x6a>
 8007760:	4638      	mov	r0, r7
 8007762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007766:	bf00      	nop
 8007768:	08009698 	.word	0x08009698
 800776c:	080094c9 	.word	0x080094c9
 8007770:	08009549 	.word	0x08009549

08007774 <__lshift>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	460c      	mov	r4, r1
 800777a:	6849      	ldr	r1, [r1, #4]
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	4607      	mov	r7, r0
 8007786:	4691      	mov	r9, r2
 8007788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800778c:	f108 0601 	add.w	r6, r8, #1
 8007790:	42b3      	cmp	r3, r6
 8007792:	db0b      	blt.n	80077ac <__lshift+0x38>
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff fddd 	bl	8007354 <_Balloc>
 800779a:	4605      	mov	r5, r0
 800779c:	b948      	cbnz	r0, 80077b2 <__lshift+0x3e>
 800779e:	4602      	mov	r2, r0
 80077a0:	4b28      	ldr	r3, [pc, #160]	; (8007844 <__lshift+0xd0>)
 80077a2:	4829      	ldr	r0, [pc, #164]	; (8007848 <__lshift+0xd4>)
 80077a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077a8:	f000 fb8e 	bl	8007ec8 <__assert_func>
 80077ac:	3101      	adds	r1, #1
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	e7ee      	b.n	8007790 <__lshift+0x1c>
 80077b2:	2300      	movs	r3, #0
 80077b4:	f100 0114 	add.w	r1, r0, #20
 80077b8:	f100 0210 	add.w	r2, r0, #16
 80077bc:	4618      	mov	r0, r3
 80077be:	4553      	cmp	r3, sl
 80077c0:	db33      	blt.n	800782a <__lshift+0xb6>
 80077c2:	6920      	ldr	r0, [r4, #16]
 80077c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077c8:	f104 0314 	add.w	r3, r4, #20
 80077cc:	f019 091f 	ands.w	r9, r9, #31
 80077d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077d8:	d02b      	beq.n	8007832 <__lshift+0xbe>
 80077da:	f1c9 0e20 	rsb	lr, r9, #32
 80077de:	468a      	mov	sl, r1
 80077e0:	2200      	movs	r2, #0
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	fa00 f009 	lsl.w	r0, r0, r9
 80077e8:	4310      	orrs	r0, r2
 80077ea:	f84a 0b04 	str.w	r0, [sl], #4
 80077ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f2:	459c      	cmp	ip, r3
 80077f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80077f8:	d8f3      	bhi.n	80077e2 <__lshift+0x6e>
 80077fa:	ebac 0304 	sub.w	r3, ip, r4
 80077fe:	3b15      	subs	r3, #21
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	3304      	adds	r3, #4
 8007806:	f104 0015 	add.w	r0, r4, #21
 800780a:	4584      	cmp	ip, r0
 800780c:	bf38      	it	cc
 800780e:	2304      	movcc	r3, #4
 8007810:	50ca      	str	r2, [r1, r3]
 8007812:	b10a      	cbz	r2, 8007818 <__lshift+0xa4>
 8007814:	f108 0602 	add.w	r6, r8, #2
 8007818:	3e01      	subs	r6, #1
 800781a:	4638      	mov	r0, r7
 800781c:	612e      	str	r6, [r5, #16]
 800781e:	4621      	mov	r1, r4
 8007820:	f7ff fdd8 	bl	80073d4 <_Bfree>
 8007824:	4628      	mov	r0, r5
 8007826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782a:	f842 0f04 	str.w	r0, [r2, #4]!
 800782e:	3301      	adds	r3, #1
 8007830:	e7c5      	b.n	80077be <__lshift+0x4a>
 8007832:	3904      	subs	r1, #4
 8007834:	f853 2b04 	ldr.w	r2, [r3], #4
 8007838:	f841 2f04 	str.w	r2, [r1, #4]!
 800783c:	459c      	cmp	ip, r3
 800783e:	d8f9      	bhi.n	8007834 <__lshift+0xc0>
 8007840:	e7ea      	b.n	8007818 <__lshift+0xa4>
 8007842:	bf00      	nop
 8007844:	08009538 	.word	0x08009538
 8007848:	08009549 	.word	0x08009549

0800784c <__mcmp>:
 800784c:	b530      	push	{r4, r5, lr}
 800784e:	6902      	ldr	r2, [r0, #16]
 8007850:	690c      	ldr	r4, [r1, #16]
 8007852:	1b12      	subs	r2, r2, r4
 8007854:	d10e      	bne.n	8007874 <__mcmp+0x28>
 8007856:	f100 0314 	add.w	r3, r0, #20
 800785a:	3114      	adds	r1, #20
 800785c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007864:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007868:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800786c:	42a5      	cmp	r5, r4
 800786e:	d003      	beq.n	8007878 <__mcmp+0x2c>
 8007870:	d305      	bcc.n	800787e <__mcmp+0x32>
 8007872:	2201      	movs	r2, #1
 8007874:	4610      	mov	r0, r2
 8007876:	bd30      	pop	{r4, r5, pc}
 8007878:	4283      	cmp	r3, r0
 800787a:	d3f3      	bcc.n	8007864 <__mcmp+0x18>
 800787c:	e7fa      	b.n	8007874 <__mcmp+0x28>
 800787e:	f04f 32ff 	mov.w	r2, #4294967295
 8007882:	e7f7      	b.n	8007874 <__mcmp+0x28>

08007884 <__mdiff>:
 8007884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	4606      	mov	r6, r0
 800788c:	4611      	mov	r1, r2
 800788e:	4620      	mov	r0, r4
 8007890:	4690      	mov	r8, r2
 8007892:	f7ff ffdb 	bl	800784c <__mcmp>
 8007896:	1e05      	subs	r5, r0, #0
 8007898:	d110      	bne.n	80078bc <__mdiff+0x38>
 800789a:	4629      	mov	r1, r5
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff fd59 	bl	8007354 <_Balloc>
 80078a2:	b930      	cbnz	r0, 80078b2 <__mdiff+0x2e>
 80078a4:	4b3a      	ldr	r3, [pc, #232]	; (8007990 <__mdiff+0x10c>)
 80078a6:	4602      	mov	r2, r0
 80078a8:	f240 2137 	movw	r1, #567	; 0x237
 80078ac:	4839      	ldr	r0, [pc, #228]	; (8007994 <__mdiff+0x110>)
 80078ae:	f000 fb0b 	bl	8007ec8 <__assert_func>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	bfa4      	itt	ge
 80078be:	4643      	movge	r3, r8
 80078c0:	46a0      	movge	r8, r4
 80078c2:	4630      	mov	r0, r6
 80078c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078c8:	bfa6      	itte	ge
 80078ca:	461c      	movge	r4, r3
 80078cc:	2500      	movge	r5, #0
 80078ce:	2501      	movlt	r5, #1
 80078d0:	f7ff fd40 	bl	8007354 <_Balloc>
 80078d4:	b920      	cbnz	r0, 80078e0 <__mdiff+0x5c>
 80078d6:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <__mdiff+0x10c>)
 80078d8:	4602      	mov	r2, r0
 80078da:	f240 2145 	movw	r1, #581	; 0x245
 80078de:	e7e5      	b.n	80078ac <__mdiff+0x28>
 80078e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078e4:	6926      	ldr	r6, [r4, #16]
 80078e6:	60c5      	str	r5, [r0, #12]
 80078e8:	f104 0914 	add.w	r9, r4, #20
 80078ec:	f108 0514 	add.w	r5, r8, #20
 80078f0:	f100 0e14 	add.w	lr, r0, #20
 80078f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078fc:	f108 0210 	add.w	r2, r8, #16
 8007900:	46f2      	mov	sl, lr
 8007902:	2100      	movs	r1, #0
 8007904:	f859 3b04 	ldr.w	r3, [r9], #4
 8007908:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800790c:	fa11 f88b 	uxtah	r8, r1, fp
 8007910:	b299      	uxth	r1, r3
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	eba8 0801 	sub.w	r8, r8, r1
 8007918:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800791c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007920:	fa1f f888 	uxth.w	r8, r8
 8007924:	1419      	asrs	r1, r3, #16
 8007926:	454e      	cmp	r6, r9
 8007928:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800792c:	f84a 3b04 	str.w	r3, [sl], #4
 8007930:	d8e8      	bhi.n	8007904 <__mdiff+0x80>
 8007932:	1b33      	subs	r3, r6, r4
 8007934:	3b15      	subs	r3, #21
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	3304      	adds	r3, #4
 800793c:	3415      	adds	r4, #21
 800793e:	42a6      	cmp	r6, r4
 8007940:	bf38      	it	cc
 8007942:	2304      	movcc	r3, #4
 8007944:	441d      	add	r5, r3
 8007946:	4473      	add	r3, lr
 8007948:	469e      	mov	lr, r3
 800794a:	462e      	mov	r6, r5
 800794c:	4566      	cmp	r6, ip
 800794e:	d30e      	bcc.n	800796e <__mdiff+0xea>
 8007950:	f10c 0203 	add.w	r2, ip, #3
 8007954:	1b52      	subs	r2, r2, r5
 8007956:	f022 0203 	bic.w	r2, r2, #3
 800795a:	3d03      	subs	r5, #3
 800795c:	45ac      	cmp	ip, r5
 800795e:	bf38      	it	cc
 8007960:	2200      	movcc	r2, #0
 8007962:	4413      	add	r3, r2
 8007964:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007968:	b17a      	cbz	r2, 800798a <__mdiff+0x106>
 800796a:	6107      	str	r7, [r0, #16]
 800796c:	e7a4      	b.n	80078b8 <__mdiff+0x34>
 800796e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007972:	fa11 f288 	uxtah	r2, r1, r8
 8007976:	1414      	asrs	r4, r2, #16
 8007978:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800797c:	b292      	uxth	r2, r2
 800797e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007982:	f84e 2b04 	str.w	r2, [lr], #4
 8007986:	1421      	asrs	r1, r4, #16
 8007988:	e7e0      	b.n	800794c <__mdiff+0xc8>
 800798a:	3f01      	subs	r7, #1
 800798c:	e7ea      	b.n	8007964 <__mdiff+0xe0>
 800798e:	bf00      	nop
 8007990:	08009538 	.word	0x08009538
 8007994:	08009549 	.word	0x08009549

08007998 <__d2b>:
 8007998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800799c:	460f      	mov	r7, r1
 800799e:	2101      	movs	r1, #1
 80079a0:	ec59 8b10 	vmov	r8, r9, d0
 80079a4:	4616      	mov	r6, r2
 80079a6:	f7ff fcd5 	bl	8007354 <_Balloc>
 80079aa:	4604      	mov	r4, r0
 80079ac:	b930      	cbnz	r0, 80079bc <__d2b+0x24>
 80079ae:	4602      	mov	r2, r0
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <__d2b+0xac>)
 80079b2:	4825      	ldr	r0, [pc, #148]	; (8007a48 <__d2b+0xb0>)
 80079b4:	f240 310f 	movw	r1, #783	; 0x30f
 80079b8:	f000 fa86 	bl	8007ec8 <__assert_func>
 80079bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079c4:	bb2d      	cbnz	r5, 8007a12 <__d2b+0x7a>
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	f1b8 0300 	subs.w	r3, r8, #0
 80079cc:	d026      	beq.n	8007a1c <__d2b+0x84>
 80079ce:	4668      	mov	r0, sp
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	f7ff fd87 	bl	80074e4 <__lo0bits>
 80079d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079da:	b1e8      	cbz	r0, 8007a18 <__d2b+0x80>
 80079dc:	f1c0 0320 	rsb	r3, r0, #32
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	430b      	orrs	r3, r1
 80079e6:	40c2      	lsrs	r2, r0
 80079e8:	6163      	str	r3, [r4, #20]
 80079ea:	9201      	str	r2, [sp, #4]
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	61a3      	str	r3, [r4, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bf14      	ite	ne
 80079f4:	2202      	movne	r2, #2
 80079f6:	2201      	moveq	r2, #1
 80079f8:	6122      	str	r2, [r4, #16]
 80079fa:	b1bd      	cbz	r5, 8007a2c <__d2b+0x94>
 80079fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a00:	4405      	add	r5, r0
 8007a02:	603d      	str	r5, [r7, #0]
 8007a04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	b003      	add	sp, #12
 8007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a16:	e7d6      	b.n	80079c6 <__d2b+0x2e>
 8007a18:	6161      	str	r1, [r4, #20]
 8007a1a:	e7e7      	b.n	80079ec <__d2b+0x54>
 8007a1c:	a801      	add	r0, sp, #4
 8007a1e:	f7ff fd61 	bl	80074e4 <__lo0bits>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	6163      	str	r3, [r4, #20]
 8007a26:	3020      	adds	r0, #32
 8007a28:	2201      	movs	r2, #1
 8007a2a:	e7e5      	b.n	80079f8 <__d2b+0x60>
 8007a2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a34:	6038      	str	r0, [r7, #0]
 8007a36:	6918      	ldr	r0, [r3, #16]
 8007a38:	f7ff fd34 	bl	80074a4 <__hi0bits>
 8007a3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a40:	e7e2      	b.n	8007a08 <__d2b+0x70>
 8007a42:	bf00      	nop
 8007a44:	08009538 	.word	0x08009538
 8007a48:	08009549 	.word	0x08009549

08007a4c <__ssputs_r>:
 8007a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	688e      	ldr	r6, [r1, #8]
 8007a52:	461f      	mov	r7, r3
 8007a54:	42be      	cmp	r6, r7
 8007a56:	680b      	ldr	r3, [r1, #0]
 8007a58:	4682      	mov	sl, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4690      	mov	r8, r2
 8007a5e:	d82c      	bhi.n	8007aba <__ssputs_r+0x6e>
 8007a60:	898a      	ldrh	r2, [r1, #12]
 8007a62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a66:	d026      	beq.n	8007ab6 <__ssputs_r+0x6a>
 8007a68:	6965      	ldr	r5, [r4, #20]
 8007a6a:	6909      	ldr	r1, [r1, #16]
 8007a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a70:	eba3 0901 	sub.w	r9, r3, r1
 8007a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a78:	1c7b      	adds	r3, r7, #1
 8007a7a:	444b      	add	r3, r9
 8007a7c:	106d      	asrs	r5, r5, #1
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	bf38      	it	cc
 8007a82:	461d      	movcc	r5, r3
 8007a84:	0553      	lsls	r3, r2, #21
 8007a86:	d527      	bpl.n	8007ad8 <__ssputs_r+0x8c>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7ff fbd7 	bl	800723c <_malloc_r>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	b360      	cbz	r0, 8007aec <__ssputs_r+0xa0>
 8007a92:	6921      	ldr	r1, [r4, #16]
 8007a94:	464a      	mov	r2, r9
 8007a96:	f000 fa09 	bl	8007eac <memcpy>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	6126      	str	r6, [r4, #16]
 8007aa8:	6165      	str	r5, [r4, #20]
 8007aaa:	444e      	add	r6, r9
 8007aac:	eba5 0509 	sub.w	r5, r5, r9
 8007ab0:	6026      	str	r6, [r4, #0]
 8007ab2:	60a5      	str	r5, [r4, #8]
 8007ab4:	463e      	mov	r6, r7
 8007ab6:	42be      	cmp	r6, r7
 8007ab8:	d900      	bls.n	8007abc <__ssputs_r+0x70>
 8007aba:	463e      	mov	r6, r7
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	4632      	mov	r2, r6
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	f000 f9c9 	bl	8007e58 <memmove>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	1b9b      	subs	r3, r3, r6
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	4433      	add	r3, r6
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad8:	462a      	mov	r2, r5
 8007ada:	f000 fa3b 	bl	8007f54 <_realloc_r>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d1e0      	bne.n	8007aa6 <__ssputs_r+0x5a>
 8007ae4:	6921      	ldr	r1, [r4, #16]
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f7ff fb34 	bl	8007154 <_free_r>
 8007aec:	230c      	movs	r3, #12
 8007aee:	f8ca 3000 	str.w	r3, [sl]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	e7e9      	b.n	8007ad4 <__ssputs_r+0x88>

08007b00 <_svfiprintf_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	4698      	mov	r8, r3
 8007b06:	898b      	ldrh	r3, [r1, #12]
 8007b08:	061b      	lsls	r3, r3, #24
 8007b0a:	b09d      	sub	sp, #116	; 0x74
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	4614      	mov	r4, r2
 8007b12:	d50e      	bpl.n	8007b32 <_svfiprintf_r+0x32>
 8007b14:	690b      	ldr	r3, [r1, #16]
 8007b16:	b963      	cbnz	r3, 8007b32 <_svfiprintf_r+0x32>
 8007b18:	2140      	movs	r1, #64	; 0x40
 8007b1a:	f7ff fb8f 	bl	800723c <_malloc_r>
 8007b1e:	6028      	str	r0, [r5, #0]
 8007b20:	6128      	str	r0, [r5, #16]
 8007b22:	b920      	cbnz	r0, 8007b2e <_svfiprintf_r+0x2e>
 8007b24:	230c      	movs	r3, #12
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	e0d0      	b.n	8007cd0 <_svfiprintf_r+0x1d0>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	616b      	str	r3, [r5, #20]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9309      	str	r3, [sp, #36]	; 0x24
 8007b36:	2320      	movs	r3, #32
 8007b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b40:	2330      	movs	r3, #48	; 0x30
 8007b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ce8 <_svfiprintf_r+0x1e8>
 8007b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4a:	f04f 0901 	mov.w	r9, #1
 8007b4e:	4623      	mov	r3, r4
 8007b50:	469a      	mov	sl, r3
 8007b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b56:	b10a      	cbz	r2, 8007b5c <_svfiprintf_r+0x5c>
 8007b58:	2a25      	cmp	r2, #37	; 0x25
 8007b5a:	d1f9      	bne.n	8007b50 <_svfiprintf_r+0x50>
 8007b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b60:	d00b      	beq.n	8007b7a <_svfiprintf_r+0x7a>
 8007b62:	465b      	mov	r3, fp
 8007b64:	4622      	mov	r2, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ff6f 	bl	8007a4c <__ssputs_r>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f000 80a9 	beq.w	8007cc6 <_svfiprintf_r+0x1c6>
 8007b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b76:	445a      	add	r2, fp
 8007b78:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80a1 	beq.w	8007cc6 <_svfiprintf_r+0x1c6>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8e:	f10a 0a01 	add.w	sl, sl, #1
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9c:	4654      	mov	r4, sl
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba4:	4850      	ldr	r0, [pc, #320]	; (8007ce8 <_svfiprintf_r+0x1e8>)
 8007ba6:	f7f8 fb13 	bl	80001d0 <memchr>
 8007baa:	9a04      	ldr	r2, [sp, #16]
 8007bac:	b9d8      	cbnz	r0, 8007be6 <_svfiprintf_r+0xe6>
 8007bae:	06d0      	lsls	r0, r2, #27
 8007bb0:	bf44      	itt	mi
 8007bb2:	2320      	movmi	r3, #32
 8007bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb8:	0711      	lsls	r1, r2, #28
 8007bba:	bf44      	itt	mi
 8007bbc:	232b      	movmi	r3, #43	; 0x2b
 8007bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc8:	d015      	beq.n	8007bf6 <_svfiprintf_r+0xf6>
 8007bca:	9a07      	ldr	r2, [sp, #28]
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f04f 0c0a 	mov.w	ip, #10
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bda:	3b30      	subs	r3, #48	; 0x30
 8007bdc:	2b09      	cmp	r3, #9
 8007bde:	d94d      	bls.n	8007c7c <_svfiprintf_r+0x17c>
 8007be0:	b1b0      	cbz	r0, 8007c10 <_svfiprintf_r+0x110>
 8007be2:	9207      	str	r2, [sp, #28]
 8007be4:	e014      	b.n	8007c10 <_svfiprintf_r+0x110>
 8007be6:	eba0 0308 	sub.w	r3, r0, r8
 8007bea:	fa09 f303 	lsl.w	r3, r9, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	46a2      	mov	sl, r4
 8007bf4:	e7d2      	b.n	8007b9c <_svfiprintf_r+0x9c>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	1d19      	adds	r1, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	9103      	str	r1, [sp, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bfbb      	ittet	lt
 8007c02:	425b      	neglt	r3, r3
 8007c04:	f042 0202 	orrlt.w	r2, r2, #2
 8007c08:	9307      	strge	r3, [sp, #28]
 8007c0a:	9307      	strlt	r3, [sp, #28]
 8007c0c:	bfb8      	it	lt
 8007c0e:	9204      	strlt	r2, [sp, #16]
 8007c10:	7823      	ldrb	r3, [r4, #0]
 8007c12:	2b2e      	cmp	r3, #46	; 0x2e
 8007c14:	d10c      	bne.n	8007c30 <_svfiprintf_r+0x130>
 8007c16:	7863      	ldrb	r3, [r4, #1]
 8007c18:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1a:	d134      	bne.n	8007c86 <_svfiprintf_r+0x186>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	9203      	str	r2, [sp, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfb8      	it	lt
 8007c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2c:	3402      	adds	r4, #2
 8007c2e:	9305      	str	r3, [sp, #20]
 8007c30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cf8 <_svfiprintf_r+0x1f8>
 8007c34:	7821      	ldrb	r1, [r4, #0]
 8007c36:	2203      	movs	r2, #3
 8007c38:	4650      	mov	r0, sl
 8007c3a:	f7f8 fac9 	bl	80001d0 <memchr>
 8007c3e:	b138      	cbz	r0, 8007c50 <_svfiprintf_r+0x150>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	eba0 000a 	sub.w	r0, r0, sl
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	4082      	lsls	r2, r0
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	9304      	str	r3, [sp, #16]
 8007c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c54:	4825      	ldr	r0, [pc, #148]	; (8007cec <_svfiprintf_r+0x1ec>)
 8007c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5a:	2206      	movs	r2, #6
 8007c5c:	f7f8 fab8 	bl	80001d0 <memchr>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d038      	beq.n	8007cd6 <_svfiprintf_r+0x1d6>
 8007c64:	4b22      	ldr	r3, [pc, #136]	; (8007cf0 <_svfiprintf_r+0x1f0>)
 8007c66:	bb1b      	cbnz	r3, 8007cb0 <_svfiprintf_r+0x1b0>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	3307      	adds	r3, #7
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	3308      	adds	r3, #8
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	4433      	add	r3, r6
 8007c78:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7a:	e768      	b.n	8007b4e <_svfiprintf_r+0x4e>
 8007c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c80:	460c      	mov	r4, r1
 8007c82:	2001      	movs	r0, #1
 8007c84:	e7a6      	b.n	8007bd4 <_svfiprintf_r+0xd4>
 8007c86:	2300      	movs	r3, #0
 8007c88:	3401      	adds	r4, #1
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f04f 0c0a 	mov.w	ip, #10
 8007c92:	4620      	mov	r0, r4
 8007c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c98:	3a30      	subs	r2, #48	; 0x30
 8007c9a:	2a09      	cmp	r2, #9
 8007c9c:	d903      	bls.n	8007ca6 <_svfiprintf_r+0x1a6>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0c6      	beq.n	8007c30 <_svfiprintf_r+0x130>
 8007ca2:	9105      	str	r1, [sp, #20]
 8007ca4:	e7c4      	b.n	8007c30 <_svfiprintf_r+0x130>
 8007ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007caa:	4604      	mov	r4, r0
 8007cac:	2301      	movs	r3, #1
 8007cae:	e7f0      	b.n	8007c92 <_svfiprintf_r+0x192>
 8007cb0:	ab03      	add	r3, sp, #12
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <_svfiprintf_r+0x1f4>)
 8007cb8:	a904      	add	r1, sp, #16
 8007cba:	4638      	mov	r0, r7
 8007cbc:	f7fd fe62 	bl	8005984 <_printf_float>
 8007cc0:	1c42      	adds	r2, r0, #1
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	d1d6      	bne.n	8007c74 <_svfiprintf_r+0x174>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	065b      	lsls	r3, r3, #25
 8007cca:	f53f af2d 	bmi.w	8007b28 <_svfiprintf_r+0x28>
 8007cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cd0:	b01d      	add	sp, #116	; 0x74
 8007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	ab03      	add	r3, sp, #12
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <_svfiprintf_r+0x1f4>)
 8007cde:	a904      	add	r1, sp, #16
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7fe f8f3 	bl	8005ecc <_printf_i>
 8007ce6:	e7eb      	b.n	8007cc0 <_svfiprintf_r+0x1c0>
 8007ce8:	080096a4 	.word	0x080096a4
 8007cec:	080096ae 	.word	0x080096ae
 8007cf0:	08005985 	.word	0x08005985
 8007cf4:	08007a4d 	.word	0x08007a4d
 8007cf8:	080096aa 	.word	0x080096aa

08007cfc <__sflush_r>:
 8007cfc:	898a      	ldrh	r2, [r1, #12]
 8007cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d02:	4605      	mov	r5, r0
 8007d04:	0710      	lsls	r0, r2, #28
 8007d06:	460c      	mov	r4, r1
 8007d08:	d458      	bmi.n	8007dbc <__sflush_r+0xc0>
 8007d0a:	684b      	ldr	r3, [r1, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dc05      	bgt.n	8007d1c <__sflush_r+0x20>
 8007d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dc02      	bgt.n	8007d1c <__sflush_r+0x20>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	d0f9      	beq.n	8007d16 <__sflush_r+0x1a>
 8007d22:	2300      	movs	r3, #0
 8007d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d28:	682f      	ldr	r7, [r5, #0]
 8007d2a:	6a21      	ldr	r1, [r4, #32]
 8007d2c:	602b      	str	r3, [r5, #0]
 8007d2e:	d032      	beq.n	8007d96 <__sflush_r+0x9a>
 8007d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	075a      	lsls	r2, r3, #29
 8007d36:	d505      	bpl.n	8007d44 <__sflush_r+0x48>
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	1ac0      	subs	r0, r0, r3
 8007d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d3e:	b10b      	cbz	r3, 8007d44 <__sflush_r+0x48>
 8007d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d42:	1ac0      	subs	r0, r0, r3
 8007d44:	2300      	movs	r3, #0
 8007d46:	4602      	mov	r2, r0
 8007d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b0      	blx	r6
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	d106      	bne.n	8007d64 <__sflush_r+0x68>
 8007d56:	6829      	ldr	r1, [r5, #0]
 8007d58:	291d      	cmp	r1, #29
 8007d5a:	d82b      	bhi.n	8007db4 <__sflush_r+0xb8>
 8007d5c:	4a29      	ldr	r2, [pc, #164]	; (8007e04 <__sflush_r+0x108>)
 8007d5e:	410a      	asrs	r2, r1
 8007d60:	07d6      	lsls	r6, r2, #31
 8007d62:	d427      	bmi.n	8007db4 <__sflush_r+0xb8>
 8007d64:	2200      	movs	r2, #0
 8007d66:	6062      	str	r2, [r4, #4]
 8007d68:	04d9      	lsls	r1, r3, #19
 8007d6a:	6922      	ldr	r2, [r4, #16]
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	d504      	bpl.n	8007d7a <__sflush_r+0x7e>
 8007d70:	1c42      	adds	r2, r0, #1
 8007d72:	d101      	bne.n	8007d78 <__sflush_r+0x7c>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b903      	cbnz	r3, 8007d7a <__sflush_r+0x7e>
 8007d78:	6560      	str	r0, [r4, #84]	; 0x54
 8007d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d7c:	602f      	str	r7, [r5, #0]
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d0c9      	beq.n	8007d16 <__sflush_r+0x1a>
 8007d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d002      	beq.n	8007d90 <__sflush_r+0x94>
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7ff f9e2 	bl	8007154 <_free_r>
 8007d90:	2000      	movs	r0, #0
 8007d92:	6360      	str	r0, [r4, #52]	; 0x34
 8007d94:	e7c0      	b.n	8007d18 <__sflush_r+0x1c>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b0      	blx	r6
 8007d9c:	1c41      	adds	r1, r0, #1
 8007d9e:	d1c8      	bne.n	8007d32 <__sflush_r+0x36>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c5      	beq.n	8007d32 <__sflush_r+0x36>
 8007da6:	2b1d      	cmp	r3, #29
 8007da8:	d001      	beq.n	8007dae <__sflush_r+0xb2>
 8007daa:	2b16      	cmp	r3, #22
 8007dac:	d101      	bne.n	8007db2 <__sflush_r+0xb6>
 8007dae:	602f      	str	r7, [r5, #0]
 8007db0:	e7b1      	b.n	8007d16 <__sflush_r+0x1a>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	e7ad      	b.n	8007d18 <__sflush_r+0x1c>
 8007dbc:	690f      	ldr	r7, [r1, #16]
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	d0a9      	beq.n	8007d16 <__sflush_r+0x1a>
 8007dc2:	0793      	lsls	r3, r2, #30
 8007dc4:	680e      	ldr	r6, [r1, #0]
 8007dc6:	bf08      	it	eq
 8007dc8:	694b      	ldreq	r3, [r1, #20]
 8007dca:	600f      	str	r7, [r1, #0]
 8007dcc:	bf18      	it	ne
 8007dce:	2300      	movne	r3, #0
 8007dd0:	eba6 0807 	sub.w	r8, r6, r7
 8007dd4:	608b      	str	r3, [r1, #8]
 8007dd6:	f1b8 0f00 	cmp.w	r8, #0
 8007dda:	dd9c      	ble.n	8007d16 <__sflush_r+0x1a>
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007de0:	4643      	mov	r3, r8
 8007de2:	463a      	mov	r2, r7
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b0      	blx	r6
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dc06      	bgt.n	8007dfa <__sflush_r+0xfe>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	e78e      	b.n	8007d18 <__sflush_r+0x1c>
 8007dfa:	4407      	add	r7, r0
 8007dfc:	eba8 0800 	sub.w	r8, r8, r0
 8007e00:	e7e9      	b.n	8007dd6 <__sflush_r+0xda>
 8007e02:	bf00      	nop
 8007e04:	dfbffffe 	.word	0xdfbffffe

08007e08 <_fflush_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	690b      	ldr	r3, [r1, #16]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	b913      	cbnz	r3, 8007e18 <_fflush_r+0x10>
 8007e12:	2500      	movs	r5, #0
 8007e14:	4628      	mov	r0, r5
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	b118      	cbz	r0, 8007e22 <_fflush_r+0x1a>
 8007e1a:	6a03      	ldr	r3, [r0, #32]
 8007e1c:	b90b      	cbnz	r3, 8007e22 <_fflush_r+0x1a>
 8007e1e:	f7fe fa03 	bl	8006228 <__sinit>
 8007e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f3      	beq.n	8007e12 <_fflush_r+0xa>
 8007e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e2c:	07d0      	lsls	r0, r2, #31
 8007e2e:	d404      	bmi.n	8007e3a <_fflush_r+0x32>
 8007e30:	0599      	lsls	r1, r3, #22
 8007e32:	d402      	bmi.n	8007e3a <_fflush_r+0x32>
 8007e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e36:	f7fe fb0e 	bl	8006456 <__retarget_lock_acquire_recursive>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f7ff ff5d 	bl	8007cfc <__sflush_r>
 8007e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e44:	07da      	lsls	r2, r3, #31
 8007e46:	4605      	mov	r5, r0
 8007e48:	d4e4      	bmi.n	8007e14 <_fflush_r+0xc>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	059b      	lsls	r3, r3, #22
 8007e4e:	d4e1      	bmi.n	8007e14 <_fflush_r+0xc>
 8007e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e52:	f7fe fb01 	bl	8006458 <__retarget_lock_release_recursive>
 8007e56:	e7dd      	b.n	8007e14 <_fflush_r+0xc>

08007e58 <memmove>:
 8007e58:	4288      	cmp	r0, r1
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	eb01 0402 	add.w	r4, r1, r2
 8007e60:	d902      	bls.n	8007e68 <memmove+0x10>
 8007e62:	4284      	cmp	r4, r0
 8007e64:	4623      	mov	r3, r4
 8007e66:	d807      	bhi.n	8007e78 <memmove+0x20>
 8007e68:	1e43      	subs	r3, r0, #1
 8007e6a:	42a1      	cmp	r1, r4
 8007e6c:	d008      	beq.n	8007e80 <memmove+0x28>
 8007e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e76:	e7f8      	b.n	8007e6a <memmove+0x12>
 8007e78:	4402      	add	r2, r0
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	428a      	cmp	r2, r1
 8007e7e:	d100      	bne.n	8007e82 <memmove+0x2a>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e8a:	e7f7      	b.n	8007e7c <memmove+0x24>

08007e8c <_sbrk_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d06      	ldr	r5, [pc, #24]	; (8007ea8 <_sbrk_r+0x1c>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7f9 fbd6 	bl	8001648 <_sbrk>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_sbrk_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_sbrk_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	200004dc 	.word	0x200004dc

08007eac <memcpy>:
 8007eac:	440a      	add	r2, r1
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb4:	d100      	bne.n	8007eb8 <memcpy+0xc>
 8007eb6:	4770      	bx	lr
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	d1f9      	bne.n	8007eba <memcpy+0xe>
 8007ec6:	bd10      	pop	{r4, pc}

08007ec8 <__assert_func>:
 8007ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eca:	4614      	mov	r4, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <__assert_func+0x2c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	68d8      	ldr	r0, [r3, #12]
 8007ed6:	b14c      	cbz	r4, 8007eec <__assert_func+0x24>
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <__assert_func+0x30>)
 8007eda:	9100      	str	r1, [sp, #0]
 8007edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ee0:	4906      	ldr	r1, [pc, #24]	; (8007efc <__assert_func+0x34>)
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	f000 f872 	bl	8007fcc <fiprintf>
 8007ee8:	f000 f882 	bl	8007ff0 <abort>
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__assert_func+0x38>)
 8007eee:	461c      	mov	r4, r3
 8007ef0:	e7f3      	b.n	8007eda <__assert_func+0x12>
 8007ef2:	bf00      	nop
 8007ef4:	200000cc 	.word	0x200000cc
 8007ef8:	080096bf 	.word	0x080096bf
 8007efc:	080096cc 	.word	0x080096cc
 8007f00:	080096fa 	.word	0x080096fa

08007f04 <_calloc_r>:
 8007f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f06:	fba1 2402 	umull	r2, r4, r1, r2
 8007f0a:	b94c      	cbnz	r4, 8007f20 <_calloc_r+0x1c>
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	9201      	str	r2, [sp, #4]
 8007f10:	f7ff f994 	bl	800723c <_malloc_r>
 8007f14:	9a01      	ldr	r2, [sp, #4]
 8007f16:	4605      	mov	r5, r0
 8007f18:	b930      	cbnz	r0, 8007f28 <_calloc_r+0x24>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	b003      	add	sp, #12
 8007f1e:	bd30      	pop	{r4, r5, pc}
 8007f20:	220c      	movs	r2, #12
 8007f22:	6002      	str	r2, [r0, #0]
 8007f24:	2500      	movs	r5, #0
 8007f26:	e7f8      	b.n	8007f1a <_calloc_r+0x16>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f7fe fa16 	bl	800635a <memset>
 8007f2e:	e7f4      	b.n	8007f1a <_calloc_r+0x16>

08007f30 <__ascii_mbtowc>:
 8007f30:	b082      	sub	sp, #8
 8007f32:	b901      	cbnz	r1, 8007f36 <__ascii_mbtowc+0x6>
 8007f34:	a901      	add	r1, sp, #4
 8007f36:	b142      	cbz	r2, 8007f4a <__ascii_mbtowc+0x1a>
 8007f38:	b14b      	cbz	r3, 8007f4e <__ascii_mbtowc+0x1e>
 8007f3a:	7813      	ldrb	r3, [r2, #0]
 8007f3c:	600b      	str	r3, [r1, #0]
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	1e10      	subs	r0, r2, #0
 8007f42:	bf18      	it	ne
 8007f44:	2001      	movne	r0, #1
 8007f46:	b002      	add	sp, #8
 8007f48:	4770      	bx	lr
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	e7fb      	b.n	8007f46 <__ascii_mbtowc+0x16>
 8007f4e:	f06f 0001 	mvn.w	r0, #1
 8007f52:	e7f8      	b.n	8007f46 <__ascii_mbtowc+0x16>

08007f54 <_realloc_r>:
 8007f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	460e      	mov	r6, r1
 8007f5e:	b921      	cbnz	r1, 8007f6a <_realloc_r+0x16>
 8007f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f64:	4611      	mov	r1, r2
 8007f66:	f7ff b969 	b.w	800723c <_malloc_r>
 8007f6a:	b92a      	cbnz	r2, 8007f78 <_realloc_r+0x24>
 8007f6c:	f7ff f8f2 	bl	8007154 <_free_r>
 8007f70:	4625      	mov	r5, r4
 8007f72:	4628      	mov	r0, r5
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	f000 f841 	bl	8007ffe <_malloc_usable_size_r>
 8007f7c:	4284      	cmp	r4, r0
 8007f7e:	4607      	mov	r7, r0
 8007f80:	d802      	bhi.n	8007f88 <_realloc_r+0x34>
 8007f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f86:	d812      	bhi.n	8007fae <_realloc_r+0x5a>
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	f7ff f956 	bl	800723c <_malloc_r>
 8007f90:	4605      	mov	r5, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d0ed      	beq.n	8007f72 <_realloc_r+0x1e>
 8007f96:	42bc      	cmp	r4, r7
 8007f98:	4622      	mov	r2, r4
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	bf28      	it	cs
 8007f9e:	463a      	movcs	r2, r7
 8007fa0:	f7ff ff84 	bl	8007eac <memcpy>
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7ff f8d4 	bl	8007154 <_free_r>
 8007fac:	e7e1      	b.n	8007f72 <_realloc_r+0x1e>
 8007fae:	4635      	mov	r5, r6
 8007fb0:	e7df      	b.n	8007f72 <_realloc_r+0x1e>

08007fb2 <__ascii_wctomb>:
 8007fb2:	b149      	cbz	r1, 8007fc8 <__ascii_wctomb+0x16>
 8007fb4:	2aff      	cmp	r2, #255	; 0xff
 8007fb6:	bf85      	ittet	hi
 8007fb8:	238a      	movhi	r3, #138	; 0x8a
 8007fba:	6003      	strhi	r3, [r0, #0]
 8007fbc:	700a      	strbls	r2, [r1, #0]
 8007fbe:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fc2:	bf98      	it	ls
 8007fc4:	2001      	movls	r0, #1
 8007fc6:	4770      	bx	lr
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4770      	bx	lr

08007fcc <fiprintf>:
 8007fcc:	b40e      	push	{r1, r2, r3}
 8007fce:	b503      	push	{r0, r1, lr}
 8007fd0:	4601      	mov	r1, r0
 8007fd2:	ab03      	add	r3, sp, #12
 8007fd4:	4805      	ldr	r0, [pc, #20]	; (8007fec <fiprintf+0x20>)
 8007fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	f000 f83f 	bl	8008060 <_vfiprintf_r>
 8007fe2:	b002      	add	sp, #8
 8007fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe8:	b003      	add	sp, #12
 8007fea:	4770      	bx	lr
 8007fec:	200000cc 	.word	0x200000cc

08007ff0 <abort>:
 8007ff0:	b508      	push	{r3, lr}
 8007ff2:	2006      	movs	r0, #6
 8007ff4:	f000 fa0c 	bl	8008410 <raise>
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f7f9 faad 	bl	8001558 <_exit>

08007ffe <_malloc_usable_size_r>:
 8007ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008002:	1f18      	subs	r0, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	bfbc      	itt	lt
 8008008:	580b      	ldrlt	r3, [r1, r0]
 800800a:	18c0      	addlt	r0, r0, r3
 800800c:	4770      	bx	lr

0800800e <__sfputc_r>:
 800800e:	6893      	ldr	r3, [r2, #8]
 8008010:	3b01      	subs	r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	b410      	push	{r4}
 8008016:	6093      	str	r3, [r2, #8]
 8008018:	da08      	bge.n	800802c <__sfputc_r+0x1e>
 800801a:	6994      	ldr	r4, [r2, #24]
 800801c:	42a3      	cmp	r3, r4
 800801e:	db01      	blt.n	8008024 <__sfputc_r+0x16>
 8008020:	290a      	cmp	r1, #10
 8008022:	d103      	bne.n	800802c <__sfputc_r+0x1e>
 8008024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008028:	f000 b934 	b.w	8008294 <__swbuf_r>
 800802c:	6813      	ldr	r3, [r2, #0]
 800802e:	1c58      	adds	r0, r3, #1
 8008030:	6010      	str	r0, [r2, #0]
 8008032:	7019      	strb	r1, [r3, #0]
 8008034:	4608      	mov	r0, r1
 8008036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803a:	4770      	bx	lr

0800803c <__sfputs_r>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	4606      	mov	r6, r0
 8008040:	460f      	mov	r7, r1
 8008042:	4614      	mov	r4, r2
 8008044:	18d5      	adds	r5, r2, r3
 8008046:	42ac      	cmp	r4, r5
 8008048:	d101      	bne.n	800804e <__sfputs_r+0x12>
 800804a:	2000      	movs	r0, #0
 800804c:	e007      	b.n	800805e <__sfputs_r+0x22>
 800804e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008052:	463a      	mov	r2, r7
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff ffda 	bl	800800e <__sfputc_r>
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	d1f3      	bne.n	8008046 <__sfputs_r+0xa>
 800805e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008060 <_vfiprintf_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	460d      	mov	r5, r1
 8008066:	b09d      	sub	sp, #116	; 0x74
 8008068:	4614      	mov	r4, r2
 800806a:	4698      	mov	r8, r3
 800806c:	4606      	mov	r6, r0
 800806e:	b118      	cbz	r0, 8008078 <_vfiprintf_r+0x18>
 8008070:	6a03      	ldr	r3, [r0, #32]
 8008072:	b90b      	cbnz	r3, 8008078 <_vfiprintf_r+0x18>
 8008074:	f7fe f8d8 	bl	8006228 <__sinit>
 8008078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800807a:	07d9      	lsls	r1, r3, #31
 800807c:	d405      	bmi.n	800808a <_vfiprintf_r+0x2a>
 800807e:	89ab      	ldrh	r3, [r5, #12]
 8008080:	059a      	lsls	r2, r3, #22
 8008082:	d402      	bmi.n	800808a <_vfiprintf_r+0x2a>
 8008084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008086:	f7fe f9e6 	bl	8006456 <__retarget_lock_acquire_recursive>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	071b      	lsls	r3, r3, #28
 800808e:	d501      	bpl.n	8008094 <_vfiprintf_r+0x34>
 8008090:	692b      	ldr	r3, [r5, #16]
 8008092:	b99b      	cbnz	r3, 80080bc <_vfiprintf_r+0x5c>
 8008094:	4629      	mov	r1, r5
 8008096:	4630      	mov	r0, r6
 8008098:	f000 f93a 	bl	8008310 <__swsetup_r>
 800809c:	b170      	cbz	r0, 80080bc <_vfiprintf_r+0x5c>
 800809e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a0:	07dc      	lsls	r4, r3, #31
 80080a2:	d504      	bpl.n	80080ae <_vfiprintf_r+0x4e>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	b01d      	add	sp, #116	; 0x74
 80080aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	0598      	lsls	r0, r3, #22
 80080b2:	d4f7      	bmi.n	80080a4 <_vfiprintf_r+0x44>
 80080b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080b6:	f7fe f9cf 	bl	8006458 <__retarget_lock_release_recursive>
 80080ba:	e7f3      	b.n	80080a4 <_vfiprintf_r+0x44>
 80080bc:	2300      	movs	r3, #0
 80080be:	9309      	str	r3, [sp, #36]	; 0x24
 80080c0:	2320      	movs	r3, #32
 80080c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ca:	2330      	movs	r3, #48	; 0x30
 80080cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008280 <_vfiprintf_r+0x220>
 80080d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d4:	f04f 0901 	mov.w	r9, #1
 80080d8:	4623      	mov	r3, r4
 80080da:	469a      	mov	sl, r3
 80080dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e0:	b10a      	cbz	r2, 80080e6 <_vfiprintf_r+0x86>
 80080e2:	2a25      	cmp	r2, #37	; 0x25
 80080e4:	d1f9      	bne.n	80080da <_vfiprintf_r+0x7a>
 80080e6:	ebba 0b04 	subs.w	fp, sl, r4
 80080ea:	d00b      	beq.n	8008104 <_vfiprintf_r+0xa4>
 80080ec:	465b      	mov	r3, fp
 80080ee:	4622      	mov	r2, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7ff ffa2 	bl	800803c <__sfputs_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	f000 80a9 	beq.w	8008250 <_vfiprintf_r+0x1f0>
 80080fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008100:	445a      	add	r2, fp
 8008102:	9209      	str	r2, [sp, #36]	; 0x24
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80a1 	beq.w	8008250 <_vfiprintf_r+0x1f0>
 800810e:	2300      	movs	r3, #0
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008118:	f10a 0a01 	add.w	sl, sl, #1
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	9307      	str	r3, [sp, #28]
 8008120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008124:	931a      	str	r3, [sp, #104]	; 0x68
 8008126:	4654      	mov	r4, sl
 8008128:	2205      	movs	r2, #5
 800812a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812e:	4854      	ldr	r0, [pc, #336]	; (8008280 <_vfiprintf_r+0x220>)
 8008130:	f7f8 f84e 	bl	80001d0 <memchr>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	b9d8      	cbnz	r0, 8008170 <_vfiprintf_r+0x110>
 8008138:	06d1      	lsls	r1, r2, #27
 800813a:	bf44      	itt	mi
 800813c:	2320      	movmi	r3, #32
 800813e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008142:	0713      	lsls	r3, r2, #28
 8008144:	bf44      	itt	mi
 8008146:	232b      	movmi	r3, #43	; 0x2b
 8008148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800814c:	f89a 3000 	ldrb.w	r3, [sl]
 8008150:	2b2a      	cmp	r3, #42	; 0x2a
 8008152:	d015      	beq.n	8008180 <_vfiprintf_r+0x120>
 8008154:	9a07      	ldr	r2, [sp, #28]
 8008156:	4654      	mov	r4, sl
 8008158:	2000      	movs	r0, #0
 800815a:	f04f 0c0a 	mov.w	ip, #10
 800815e:	4621      	mov	r1, r4
 8008160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008164:	3b30      	subs	r3, #48	; 0x30
 8008166:	2b09      	cmp	r3, #9
 8008168:	d94d      	bls.n	8008206 <_vfiprintf_r+0x1a6>
 800816a:	b1b0      	cbz	r0, 800819a <_vfiprintf_r+0x13a>
 800816c:	9207      	str	r2, [sp, #28]
 800816e:	e014      	b.n	800819a <_vfiprintf_r+0x13a>
 8008170:	eba0 0308 	sub.w	r3, r0, r8
 8008174:	fa09 f303 	lsl.w	r3, r9, r3
 8008178:	4313      	orrs	r3, r2
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	46a2      	mov	sl, r4
 800817e:	e7d2      	b.n	8008126 <_vfiprintf_r+0xc6>
 8008180:	9b03      	ldr	r3, [sp, #12]
 8008182:	1d19      	adds	r1, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	9103      	str	r1, [sp, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	bfbb      	ittet	lt
 800818c:	425b      	neglt	r3, r3
 800818e:	f042 0202 	orrlt.w	r2, r2, #2
 8008192:	9307      	strge	r3, [sp, #28]
 8008194:	9307      	strlt	r3, [sp, #28]
 8008196:	bfb8      	it	lt
 8008198:	9204      	strlt	r2, [sp, #16]
 800819a:	7823      	ldrb	r3, [r4, #0]
 800819c:	2b2e      	cmp	r3, #46	; 0x2e
 800819e:	d10c      	bne.n	80081ba <_vfiprintf_r+0x15a>
 80081a0:	7863      	ldrb	r3, [r4, #1]
 80081a2:	2b2a      	cmp	r3, #42	; 0x2a
 80081a4:	d134      	bne.n	8008210 <_vfiprintf_r+0x1b0>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	1d1a      	adds	r2, r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	9203      	str	r2, [sp, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfb8      	it	lt
 80081b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b6:	3402      	adds	r4, #2
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008290 <_vfiprintf_r+0x230>
 80081be:	7821      	ldrb	r1, [r4, #0]
 80081c0:	2203      	movs	r2, #3
 80081c2:	4650      	mov	r0, sl
 80081c4:	f7f8 f804 	bl	80001d0 <memchr>
 80081c8:	b138      	cbz	r0, 80081da <_vfiprintf_r+0x17a>
 80081ca:	9b04      	ldr	r3, [sp, #16]
 80081cc:	eba0 000a 	sub.w	r0, r0, sl
 80081d0:	2240      	movs	r2, #64	; 0x40
 80081d2:	4082      	lsls	r2, r0
 80081d4:	4313      	orrs	r3, r2
 80081d6:	3401      	adds	r4, #1
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081de:	4829      	ldr	r0, [pc, #164]	; (8008284 <_vfiprintf_r+0x224>)
 80081e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e4:	2206      	movs	r2, #6
 80081e6:	f7f7 fff3 	bl	80001d0 <memchr>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d03f      	beq.n	800826e <_vfiprintf_r+0x20e>
 80081ee:	4b26      	ldr	r3, [pc, #152]	; (8008288 <_vfiprintf_r+0x228>)
 80081f0:	bb1b      	cbnz	r3, 800823a <_vfiprintf_r+0x1da>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	3307      	adds	r3, #7
 80081f6:	f023 0307 	bic.w	r3, r3, #7
 80081fa:	3308      	adds	r3, #8
 80081fc:	9303      	str	r3, [sp, #12]
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	443b      	add	r3, r7
 8008202:	9309      	str	r3, [sp, #36]	; 0x24
 8008204:	e768      	b.n	80080d8 <_vfiprintf_r+0x78>
 8008206:	fb0c 3202 	mla	r2, ip, r2, r3
 800820a:	460c      	mov	r4, r1
 800820c:	2001      	movs	r0, #1
 800820e:	e7a6      	b.n	800815e <_vfiprintf_r+0xfe>
 8008210:	2300      	movs	r3, #0
 8008212:	3401      	adds	r4, #1
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	4619      	mov	r1, r3
 8008218:	f04f 0c0a 	mov.w	ip, #10
 800821c:	4620      	mov	r0, r4
 800821e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008222:	3a30      	subs	r2, #48	; 0x30
 8008224:	2a09      	cmp	r2, #9
 8008226:	d903      	bls.n	8008230 <_vfiprintf_r+0x1d0>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0c6      	beq.n	80081ba <_vfiprintf_r+0x15a>
 800822c:	9105      	str	r1, [sp, #20]
 800822e:	e7c4      	b.n	80081ba <_vfiprintf_r+0x15a>
 8008230:	fb0c 2101 	mla	r1, ip, r1, r2
 8008234:	4604      	mov	r4, r0
 8008236:	2301      	movs	r3, #1
 8008238:	e7f0      	b.n	800821c <_vfiprintf_r+0x1bc>
 800823a:	ab03      	add	r3, sp, #12
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	462a      	mov	r2, r5
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <_vfiprintf_r+0x22c>)
 8008242:	a904      	add	r1, sp, #16
 8008244:	4630      	mov	r0, r6
 8008246:	f7fd fb9d 	bl	8005984 <_printf_float>
 800824a:	4607      	mov	r7, r0
 800824c:	1c78      	adds	r0, r7, #1
 800824e:	d1d6      	bne.n	80081fe <_vfiprintf_r+0x19e>
 8008250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008252:	07d9      	lsls	r1, r3, #31
 8008254:	d405      	bmi.n	8008262 <_vfiprintf_r+0x202>
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	059a      	lsls	r2, r3, #22
 800825a:	d402      	bmi.n	8008262 <_vfiprintf_r+0x202>
 800825c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800825e:	f7fe f8fb 	bl	8006458 <__retarget_lock_release_recursive>
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	065b      	lsls	r3, r3, #25
 8008266:	f53f af1d 	bmi.w	80080a4 <_vfiprintf_r+0x44>
 800826a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800826c:	e71c      	b.n	80080a8 <_vfiprintf_r+0x48>
 800826e:	ab03      	add	r3, sp, #12
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	462a      	mov	r2, r5
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <_vfiprintf_r+0x22c>)
 8008276:	a904      	add	r1, sp, #16
 8008278:	4630      	mov	r0, r6
 800827a:	f7fd fe27 	bl	8005ecc <_printf_i>
 800827e:	e7e4      	b.n	800824a <_vfiprintf_r+0x1ea>
 8008280:	080096a4 	.word	0x080096a4
 8008284:	080096ae 	.word	0x080096ae
 8008288:	08005985 	.word	0x08005985
 800828c:	0800803d 	.word	0x0800803d
 8008290:	080096aa 	.word	0x080096aa

08008294 <__swbuf_r>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	460e      	mov	r6, r1
 8008298:	4614      	mov	r4, r2
 800829a:	4605      	mov	r5, r0
 800829c:	b118      	cbz	r0, 80082a6 <__swbuf_r+0x12>
 800829e:	6a03      	ldr	r3, [r0, #32]
 80082a0:	b90b      	cbnz	r3, 80082a6 <__swbuf_r+0x12>
 80082a2:	f7fd ffc1 	bl	8006228 <__sinit>
 80082a6:	69a3      	ldr	r3, [r4, #24]
 80082a8:	60a3      	str	r3, [r4, #8]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	071a      	lsls	r2, r3, #28
 80082ae:	d525      	bpl.n	80082fc <__swbuf_r+0x68>
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	b31b      	cbz	r3, 80082fc <__swbuf_r+0x68>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	6922      	ldr	r2, [r4, #16]
 80082b8:	1a98      	subs	r0, r3, r2
 80082ba:	6963      	ldr	r3, [r4, #20]
 80082bc:	b2f6      	uxtb	r6, r6
 80082be:	4283      	cmp	r3, r0
 80082c0:	4637      	mov	r7, r6
 80082c2:	dc04      	bgt.n	80082ce <__swbuf_r+0x3a>
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f7ff fd9e 	bl	8007e08 <_fflush_r>
 80082cc:	b9e0      	cbnz	r0, 8008308 <__swbuf_r+0x74>
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	60a3      	str	r3, [r4, #8]
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	701e      	strb	r6, [r3, #0]
 80082dc:	6962      	ldr	r2, [r4, #20]
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d004      	beq.n	80082ee <__swbuf_r+0x5a>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	07db      	lsls	r3, r3, #31
 80082e8:	d506      	bpl.n	80082f8 <__swbuf_r+0x64>
 80082ea:	2e0a      	cmp	r6, #10
 80082ec:	d104      	bne.n	80082f8 <__swbuf_r+0x64>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f7ff fd89 	bl	8007e08 <_fflush_r>
 80082f6:	b938      	cbnz	r0, 8008308 <__swbuf_r+0x74>
 80082f8:	4638      	mov	r0, r7
 80082fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 f806 	bl	8008310 <__swsetup_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	d0d5      	beq.n	80082b4 <__swbuf_r+0x20>
 8008308:	f04f 37ff 	mov.w	r7, #4294967295
 800830c:	e7f4      	b.n	80082f8 <__swbuf_r+0x64>
	...

08008310 <__swsetup_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <__swsetup_r+0xac>)
 8008314:	4605      	mov	r5, r0
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	460c      	mov	r4, r1
 800831a:	b118      	cbz	r0, 8008324 <__swsetup_r+0x14>
 800831c:	6a03      	ldr	r3, [r0, #32]
 800831e:	b90b      	cbnz	r3, 8008324 <__swsetup_r+0x14>
 8008320:	f7fd ff82 	bl	8006228 <__sinit>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800832a:	0718      	lsls	r0, r3, #28
 800832c:	d422      	bmi.n	8008374 <__swsetup_r+0x64>
 800832e:	06d9      	lsls	r1, r3, #27
 8008330:	d407      	bmi.n	8008342 <__swsetup_r+0x32>
 8008332:	2309      	movs	r3, #9
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e034      	b.n	80083ac <__swsetup_r+0x9c>
 8008342:	0758      	lsls	r0, r3, #29
 8008344:	d512      	bpl.n	800836c <__swsetup_r+0x5c>
 8008346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008348:	b141      	cbz	r1, 800835c <__swsetup_r+0x4c>
 800834a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800834e:	4299      	cmp	r1, r3
 8008350:	d002      	beq.n	8008358 <__swsetup_r+0x48>
 8008352:	4628      	mov	r0, r5
 8008354:	f7fe fefe 	bl	8007154 <_free_r>
 8008358:	2300      	movs	r3, #0
 800835a:	6363      	str	r3, [r4, #52]	; 0x34
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	2300      	movs	r3, #0
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f043 0308 	orr.w	r3, r3, #8
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	b94b      	cbnz	r3, 800838c <__swsetup_r+0x7c>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800837e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008382:	d003      	beq.n	800838c <__swsetup_r+0x7c>
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 f884 	bl	8008494 <__smakebuf_r>
 800838c:	89a0      	ldrh	r0, [r4, #12]
 800838e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008392:	f010 0301 	ands.w	r3, r0, #1
 8008396:	d00a      	beq.n	80083ae <__swsetup_r+0x9e>
 8008398:	2300      	movs	r3, #0
 800839a:	60a3      	str	r3, [r4, #8]
 800839c:	6963      	ldr	r3, [r4, #20]
 800839e:	425b      	negs	r3, r3
 80083a0:	61a3      	str	r3, [r4, #24]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	b943      	cbnz	r3, 80083b8 <__swsetup_r+0xa8>
 80083a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083aa:	d1c4      	bne.n	8008336 <__swsetup_r+0x26>
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	0781      	lsls	r1, r0, #30
 80083b0:	bf58      	it	pl
 80083b2:	6963      	ldrpl	r3, [r4, #20]
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	e7f4      	b.n	80083a2 <__swsetup_r+0x92>
 80083b8:	2000      	movs	r0, #0
 80083ba:	e7f7      	b.n	80083ac <__swsetup_r+0x9c>
 80083bc:	200000cc 	.word	0x200000cc

080083c0 <_raise_r>:
 80083c0:	291f      	cmp	r1, #31
 80083c2:	b538      	push	{r3, r4, r5, lr}
 80083c4:	4604      	mov	r4, r0
 80083c6:	460d      	mov	r5, r1
 80083c8:	d904      	bls.n	80083d4 <_raise_r+0x14>
 80083ca:	2316      	movs	r3, #22
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	f04f 30ff 	mov.w	r0, #4294967295
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80083d6:	b112      	cbz	r2, 80083de <_raise_r+0x1e>
 80083d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083dc:	b94b      	cbnz	r3, 80083f2 <_raise_r+0x32>
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f830 	bl	8008444 <_getpid_r>
 80083e4:	462a      	mov	r2, r5
 80083e6:	4601      	mov	r1, r0
 80083e8:	4620      	mov	r0, r4
 80083ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ee:	f000 b817 	b.w	8008420 <_kill_r>
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d00a      	beq.n	800840c <_raise_r+0x4c>
 80083f6:	1c59      	adds	r1, r3, #1
 80083f8:	d103      	bne.n	8008402 <_raise_r+0x42>
 80083fa:	2316      	movs	r3, #22
 80083fc:	6003      	str	r3, [r0, #0]
 80083fe:	2001      	movs	r0, #1
 8008400:	e7e7      	b.n	80083d2 <_raise_r+0x12>
 8008402:	2400      	movs	r4, #0
 8008404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008408:	4628      	mov	r0, r5
 800840a:	4798      	blx	r3
 800840c:	2000      	movs	r0, #0
 800840e:	e7e0      	b.n	80083d2 <_raise_r+0x12>

08008410 <raise>:
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <raise+0xc>)
 8008412:	4601      	mov	r1, r0
 8008414:	6818      	ldr	r0, [r3, #0]
 8008416:	f7ff bfd3 	b.w	80083c0 <_raise_r>
 800841a:	bf00      	nop
 800841c:	200000cc 	.word	0x200000cc

08008420 <_kill_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	; (8008440 <_kill_r+0x20>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f7f9 f883 	bl	8001538 <_kill>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d102      	bne.n	800843c <_kill_r+0x1c>
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b103      	cbz	r3, 800843c <_kill_r+0x1c>
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	bd38      	pop	{r3, r4, r5, pc}
 800843e:	bf00      	nop
 8008440:	200004dc 	.word	0x200004dc

08008444 <_getpid_r>:
 8008444:	f7f9 b870 	b.w	8001528 <_getpid>

08008448 <__swhatbuf_r>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	460c      	mov	r4, r1
 800844c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008450:	2900      	cmp	r1, #0
 8008452:	b096      	sub	sp, #88	; 0x58
 8008454:	4615      	mov	r5, r2
 8008456:	461e      	mov	r6, r3
 8008458:	da0d      	bge.n	8008476 <__swhatbuf_r+0x2e>
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008460:	f04f 0100 	mov.w	r1, #0
 8008464:	bf0c      	ite	eq
 8008466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800846a:	2340      	movne	r3, #64	; 0x40
 800846c:	2000      	movs	r0, #0
 800846e:	6031      	str	r1, [r6, #0]
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	b016      	add	sp, #88	; 0x58
 8008474:	bd70      	pop	{r4, r5, r6, pc}
 8008476:	466a      	mov	r2, sp
 8008478:	f000 f848 	bl	800850c <_fstat_r>
 800847c:	2800      	cmp	r0, #0
 800847e:	dbec      	blt.n	800845a <__swhatbuf_r+0x12>
 8008480:	9901      	ldr	r1, [sp, #4]
 8008482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800848a:	4259      	negs	r1, r3
 800848c:	4159      	adcs	r1, r3
 800848e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008492:	e7eb      	b.n	800846c <__swhatbuf_r+0x24>

08008494 <__smakebuf_r>:
 8008494:	898b      	ldrh	r3, [r1, #12]
 8008496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008498:	079d      	lsls	r5, r3, #30
 800849a:	4606      	mov	r6, r0
 800849c:	460c      	mov	r4, r1
 800849e:	d507      	bpl.n	80084b0 <__smakebuf_r+0x1c>
 80084a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	2301      	movs	r3, #1
 80084aa:	6163      	str	r3, [r4, #20]
 80084ac:	b002      	add	sp, #8
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	ab01      	add	r3, sp, #4
 80084b2:	466a      	mov	r2, sp
 80084b4:	f7ff ffc8 	bl	8008448 <__swhatbuf_r>
 80084b8:	9900      	ldr	r1, [sp, #0]
 80084ba:	4605      	mov	r5, r0
 80084bc:	4630      	mov	r0, r6
 80084be:	f7fe febd 	bl	800723c <_malloc_r>
 80084c2:	b948      	cbnz	r0, 80084d8 <__smakebuf_r+0x44>
 80084c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c8:	059a      	lsls	r2, r3, #22
 80084ca:	d4ef      	bmi.n	80084ac <__smakebuf_r+0x18>
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	f043 0302 	orr.w	r3, r3, #2
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	e7e3      	b.n	80084a0 <__smakebuf_r+0xc>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	6020      	str	r0, [r4, #0]
 80084dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e0:	81a3      	strh	r3, [r4, #12]
 80084e2:	9b00      	ldr	r3, [sp, #0]
 80084e4:	6163      	str	r3, [r4, #20]
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	6120      	str	r0, [r4, #16]
 80084ea:	b15b      	cbz	r3, 8008504 <__smakebuf_r+0x70>
 80084ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 f81d 	bl	8008530 <_isatty_r>
 80084f6:	b128      	cbz	r0, 8008504 <__smakebuf_r+0x70>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f023 0303 	bic.w	r3, r3, #3
 80084fe:	f043 0301 	orr.w	r3, r3, #1
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	431d      	orrs	r5, r3
 8008508:	81a5      	strh	r5, [r4, #12]
 800850a:	e7cf      	b.n	80084ac <__smakebuf_r+0x18>

0800850c <_fstat_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_fstat_r+0x20>)
 8008510:	2300      	movs	r3, #0
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	f7f9 f86c 	bl	80015f6 <_fstat>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d102      	bne.n	8008528 <_fstat_r+0x1c>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	b103      	cbz	r3, 8008528 <_fstat_r+0x1c>
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	bf00      	nop
 800852c:	200004dc 	.word	0x200004dc

08008530 <_isatty_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d06      	ldr	r5, [pc, #24]	; (800854c <_isatty_r+0x1c>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7f9 f86b 	bl	8001616 <_isatty>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_isatty_r+0x1a>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_isatty_r+0x1a>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	200004dc 	.word	0x200004dc

08008550 <pow>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	ed2d 8b02 	vpush	{d8}
 8008556:	eeb0 8a40 	vmov.f32	s16, s0
 800855a:	eef0 8a60 	vmov.f32	s17, s1
 800855e:	ec55 4b11 	vmov	r4, r5, d1
 8008562:	f000 f979 	bl	8008858 <__ieee754_pow>
 8008566:	4622      	mov	r2, r4
 8008568:	462b      	mov	r3, r5
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	ec57 6b10 	vmov	r6, r7, d0
 8008572:	f7f8 fadb 	bl	8000b2c <__aeabi_dcmpun>
 8008576:	2800      	cmp	r0, #0
 8008578:	d13b      	bne.n	80085f2 <pow+0xa2>
 800857a:	ec51 0b18 	vmov	r0, r1, d8
 800857e:	2200      	movs	r2, #0
 8008580:	2300      	movs	r3, #0
 8008582:	f7f8 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008586:	b1b8      	cbz	r0, 80085b8 <pow+0x68>
 8008588:	2200      	movs	r2, #0
 800858a:	2300      	movs	r3, #0
 800858c:	4620      	mov	r0, r4
 800858e:	4629      	mov	r1, r5
 8008590:	f7f8 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008594:	2800      	cmp	r0, #0
 8008596:	d146      	bne.n	8008626 <pow+0xd6>
 8008598:	ec45 4b10 	vmov	d0, r4, r5
 800859c:	f000 f874 	bl	8008688 <finite>
 80085a0:	b338      	cbz	r0, 80085f2 <pow+0xa2>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 fa97 	bl	8000adc <__aeabi_dcmplt>
 80085ae:	b300      	cbz	r0, 80085f2 <pow+0xa2>
 80085b0:	f7fd ff26 	bl	8006400 <__errno>
 80085b4:	2322      	movs	r3, #34	; 0x22
 80085b6:	e01b      	b.n	80085f0 <pow+0xa0>
 80085b8:	ec47 6b10 	vmov	d0, r6, r7
 80085bc:	f000 f864 	bl	8008688 <finite>
 80085c0:	b9e0      	cbnz	r0, 80085fc <pow+0xac>
 80085c2:	eeb0 0a48 	vmov.f32	s0, s16
 80085c6:	eef0 0a68 	vmov.f32	s1, s17
 80085ca:	f000 f85d 	bl	8008688 <finite>
 80085ce:	b1a8      	cbz	r0, 80085fc <pow+0xac>
 80085d0:	ec45 4b10 	vmov	d0, r4, r5
 80085d4:	f000 f858 	bl	8008688 <finite>
 80085d8:	b180      	cbz	r0, 80085fc <pow+0xac>
 80085da:	4632      	mov	r2, r6
 80085dc:	463b      	mov	r3, r7
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f8 faa3 	bl	8000b2c <__aeabi_dcmpun>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d0e2      	beq.n	80085b0 <pow+0x60>
 80085ea:	f7fd ff09 	bl	8006400 <__errno>
 80085ee:	2321      	movs	r3, #33	; 0x21
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	ecbd 8b02 	vpop	{d8}
 80085f6:	ec47 6b10 	vmov	d0, r6, r7
 80085fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f8 fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008608:	2800      	cmp	r0, #0
 800860a:	d0f2      	beq.n	80085f2 <pow+0xa2>
 800860c:	eeb0 0a48 	vmov.f32	s0, s16
 8008610:	eef0 0a68 	vmov.f32	s1, s17
 8008614:	f000 f838 	bl	8008688 <finite>
 8008618:	2800      	cmp	r0, #0
 800861a:	d0ea      	beq.n	80085f2 <pow+0xa2>
 800861c:	ec45 4b10 	vmov	d0, r4, r5
 8008620:	f000 f832 	bl	8008688 <finite>
 8008624:	e7c3      	b.n	80085ae <pow+0x5e>
 8008626:	4f01      	ldr	r7, [pc, #4]	; (800862c <pow+0xdc>)
 8008628:	2600      	movs	r6, #0
 800862a:	e7e2      	b.n	80085f2 <pow+0xa2>
 800862c:	3ff00000 	.word	0x3ff00000

08008630 <sqrt>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	ed2d 8b02 	vpush	{d8}
 8008636:	ec55 4b10 	vmov	r4, r5, d0
 800863a:	f000 f831 	bl	80086a0 <__ieee754_sqrt>
 800863e:	4622      	mov	r2, r4
 8008640:	462b      	mov	r3, r5
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	eeb0 8a40 	vmov.f32	s16, s0
 800864a:	eef0 8a60 	vmov.f32	s17, s1
 800864e:	f7f8 fa6d 	bl	8000b2c <__aeabi_dcmpun>
 8008652:	b990      	cbnz	r0, 800867a <sqrt+0x4a>
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f8 fa3e 	bl	8000adc <__aeabi_dcmplt>
 8008660:	b158      	cbz	r0, 800867a <sqrt+0x4a>
 8008662:	f7fd fecd 	bl	8006400 <__errno>
 8008666:	2321      	movs	r3, #33	; 0x21
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4610      	mov	r0, r2
 8008670:	4619      	mov	r1, r3
 8008672:	f7f8 f8eb 	bl	800084c <__aeabi_ddiv>
 8008676:	ec41 0b18 	vmov	d8, r0, r1
 800867a:	eeb0 0a48 	vmov.f32	s0, s16
 800867e:	eef0 0a68 	vmov.f32	s1, s17
 8008682:	ecbd 8b02 	vpop	{d8}
 8008686:	bd38      	pop	{r3, r4, r5, pc}

08008688 <finite>:
 8008688:	b082      	sub	sp, #8
 800868a:	ed8d 0b00 	vstr	d0, [sp]
 800868e:	9801      	ldr	r0, [sp, #4]
 8008690:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008694:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008698:	0fc0      	lsrs	r0, r0, #31
 800869a:	b002      	add	sp, #8
 800869c:	4770      	bx	lr
	...

080086a0 <__ieee754_sqrt>:
 80086a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	ec55 4b10 	vmov	r4, r5, d0
 80086a8:	4e67      	ldr	r6, [pc, #412]	; (8008848 <__ieee754_sqrt+0x1a8>)
 80086aa:	43ae      	bics	r6, r5
 80086ac:	ee10 0a10 	vmov	r0, s0
 80086b0:	ee10 2a10 	vmov	r2, s0
 80086b4:	4629      	mov	r1, r5
 80086b6:	462b      	mov	r3, r5
 80086b8:	d10d      	bne.n	80086d6 <__ieee754_sqrt+0x36>
 80086ba:	f7f7 ff9d 	bl	80005f8 <__aeabi_dmul>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f7 fde1 	bl	800028c <__adddf3>
 80086ca:	4604      	mov	r4, r0
 80086cc:	460d      	mov	r5, r1
 80086ce:	ec45 4b10 	vmov	d0, r4, r5
 80086d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	dc0b      	bgt.n	80086f2 <__ieee754_sqrt+0x52>
 80086da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086de:	4326      	orrs	r6, r4
 80086e0:	d0f5      	beq.n	80086ce <__ieee754_sqrt+0x2e>
 80086e2:	b135      	cbz	r5, 80086f2 <__ieee754_sqrt+0x52>
 80086e4:	f7f7 fdd0 	bl	8000288 <__aeabi_dsub>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	f7f8 f8ae 	bl	800084c <__aeabi_ddiv>
 80086f0:	e7eb      	b.n	80086ca <__ieee754_sqrt+0x2a>
 80086f2:	1509      	asrs	r1, r1, #20
 80086f4:	f000 808d 	beq.w	8008812 <__ieee754_sqrt+0x172>
 80086f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086fc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008704:	07c9      	lsls	r1, r1, #31
 8008706:	bf5c      	itt	pl
 8008708:	005b      	lslpl	r3, r3, #1
 800870a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800870e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008712:	bf58      	it	pl
 8008714:	0052      	lslpl	r2, r2, #1
 8008716:	2500      	movs	r5, #0
 8008718:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800871c:	1076      	asrs	r6, r6, #1
 800871e:	0052      	lsls	r2, r2, #1
 8008720:	f04f 0e16 	mov.w	lr, #22
 8008724:	46ac      	mov	ip, r5
 8008726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800872a:	eb0c 0001 	add.w	r0, ip, r1
 800872e:	4298      	cmp	r0, r3
 8008730:	bfde      	ittt	le
 8008732:	1a1b      	suble	r3, r3, r0
 8008734:	eb00 0c01 	addle.w	ip, r0, r1
 8008738:	186d      	addle	r5, r5, r1
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	f1be 0e01 	subs.w	lr, lr, #1
 8008740:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008744:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008748:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800874c:	d1ed      	bne.n	800872a <__ieee754_sqrt+0x8a>
 800874e:	4674      	mov	r4, lr
 8008750:	2720      	movs	r7, #32
 8008752:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008756:	4563      	cmp	r3, ip
 8008758:	eb01 000e 	add.w	r0, r1, lr
 800875c:	dc02      	bgt.n	8008764 <__ieee754_sqrt+0xc4>
 800875e:	d113      	bne.n	8008788 <__ieee754_sqrt+0xe8>
 8008760:	4290      	cmp	r0, r2
 8008762:	d811      	bhi.n	8008788 <__ieee754_sqrt+0xe8>
 8008764:	2800      	cmp	r0, #0
 8008766:	eb00 0e01 	add.w	lr, r0, r1
 800876a:	da57      	bge.n	800881c <__ieee754_sqrt+0x17c>
 800876c:	f1be 0f00 	cmp.w	lr, #0
 8008770:	db54      	blt.n	800881c <__ieee754_sqrt+0x17c>
 8008772:	f10c 0801 	add.w	r8, ip, #1
 8008776:	eba3 030c 	sub.w	r3, r3, ip
 800877a:	4290      	cmp	r0, r2
 800877c:	bf88      	it	hi
 800877e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008782:	1a12      	subs	r2, r2, r0
 8008784:	440c      	add	r4, r1
 8008786:	46c4      	mov	ip, r8
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	3f01      	subs	r7, #1
 800878c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008790:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008794:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008798:	d1dd      	bne.n	8008756 <__ieee754_sqrt+0xb6>
 800879a:	4313      	orrs	r3, r2
 800879c:	d01b      	beq.n	80087d6 <__ieee754_sqrt+0x136>
 800879e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800884c <__ieee754_sqrt+0x1ac>
 80087a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008850 <__ieee754_sqrt+0x1b0>
 80087a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80087aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80087ae:	f7f7 fd6b 	bl	8000288 <__aeabi_dsub>
 80087b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	f7f8 f997 	bl	8000af0 <__aeabi_dcmple>
 80087c2:	b140      	cbz	r0, 80087d6 <__ieee754_sqrt+0x136>
 80087c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80087c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80087cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80087d0:	d126      	bne.n	8008820 <__ieee754_sqrt+0x180>
 80087d2:	3501      	adds	r5, #1
 80087d4:	463c      	mov	r4, r7
 80087d6:	106a      	asrs	r2, r5, #1
 80087d8:	0863      	lsrs	r3, r4, #1
 80087da:	07e9      	lsls	r1, r5, #31
 80087dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80087e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80087e4:	bf48      	it	mi
 80087e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80087ee:	461c      	mov	r4, r3
 80087f0:	e76d      	b.n	80086ce <__ieee754_sqrt+0x2e>
 80087f2:	0ad3      	lsrs	r3, r2, #11
 80087f4:	3815      	subs	r0, #21
 80087f6:	0552      	lsls	r2, r2, #21
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0fa      	beq.n	80087f2 <__ieee754_sqrt+0x152>
 80087fc:	02dc      	lsls	r4, r3, #11
 80087fe:	d50a      	bpl.n	8008816 <__ieee754_sqrt+0x176>
 8008800:	f1c1 0420 	rsb	r4, r1, #32
 8008804:	fa22 f404 	lsr.w	r4, r2, r4
 8008808:	1e4d      	subs	r5, r1, #1
 800880a:	408a      	lsls	r2, r1
 800880c:	4323      	orrs	r3, r4
 800880e:	1b41      	subs	r1, r0, r5
 8008810:	e772      	b.n	80086f8 <__ieee754_sqrt+0x58>
 8008812:	4608      	mov	r0, r1
 8008814:	e7f0      	b.n	80087f8 <__ieee754_sqrt+0x158>
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	3101      	adds	r1, #1
 800881a:	e7ef      	b.n	80087fc <__ieee754_sqrt+0x15c>
 800881c:	46e0      	mov	r8, ip
 800881e:	e7aa      	b.n	8008776 <__ieee754_sqrt+0xd6>
 8008820:	f7f7 fd34 	bl	800028c <__adddf3>
 8008824:	e9da 8900 	ldrd	r8, r9, [sl]
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f8 f954 	bl	8000adc <__aeabi_dcmplt>
 8008834:	b120      	cbz	r0, 8008840 <__ieee754_sqrt+0x1a0>
 8008836:	1ca0      	adds	r0, r4, #2
 8008838:	bf08      	it	eq
 800883a:	3501      	addeq	r5, #1
 800883c:	3402      	adds	r4, #2
 800883e:	e7ca      	b.n	80087d6 <__ieee754_sqrt+0x136>
 8008840:	3401      	adds	r4, #1
 8008842:	f024 0401 	bic.w	r4, r4, #1
 8008846:	e7c6      	b.n	80087d6 <__ieee754_sqrt+0x136>
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	20000240 	.word	0x20000240
 8008850:	20000248 	.word	0x20000248
 8008854:	00000000 	.word	0x00000000

08008858 <__ieee754_pow>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	ed2d 8b06 	vpush	{d8-d10}
 8008860:	b089      	sub	sp, #36	; 0x24
 8008862:	ed8d 1b00 	vstr	d1, [sp]
 8008866:	e9dd 2900 	ldrd	r2, r9, [sp]
 800886a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800886e:	ea58 0102 	orrs.w	r1, r8, r2
 8008872:	ec57 6b10 	vmov	r6, r7, d0
 8008876:	d115      	bne.n	80088a4 <__ieee754_pow+0x4c>
 8008878:	19b3      	adds	r3, r6, r6
 800887a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800887e:	4152      	adcs	r2, r2
 8008880:	4299      	cmp	r1, r3
 8008882:	4b89      	ldr	r3, [pc, #548]	; (8008aa8 <__ieee754_pow+0x250>)
 8008884:	4193      	sbcs	r3, r2
 8008886:	f080 84d1 	bcs.w	800922c <__ieee754_pow+0x9d4>
 800888a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800888e:	4630      	mov	r0, r6
 8008890:	4639      	mov	r1, r7
 8008892:	f7f7 fcfb 	bl	800028c <__adddf3>
 8008896:	ec41 0b10 	vmov	d0, r0, r1
 800889a:	b009      	add	sp, #36	; 0x24
 800889c:	ecbd 8b06 	vpop	{d8-d10}
 80088a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a4:	4b81      	ldr	r3, [pc, #516]	; (8008aac <__ieee754_pow+0x254>)
 80088a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80088aa:	429c      	cmp	r4, r3
 80088ac:	ee10 aa10 	vmov	sl, s0
 80088b0:	463d      	mov	r5, r7
 80088b2:	dc06      	bgt.n	80088c2 <__ieee754_pow+0x6a>
 80088b4:	d101      	bne.n	80088ba <__ieee754_pow+0x62>
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	d1e7      	bne.n	800888a <__ieee754_pow+0x32>
 80088ba:	4598      	cmp	r8, r3
 80088bc:	dc01      	bgt.n	80088c2 <__ieee754_pow+0x6a>
 80088be:	d10f      	bne.n	80088e0 <__ieee754_pow+0x88>
 80088c0:	b172      	cbz	r2, 80088e0 <__ieee754_pow+0x88>
 80088c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80088c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80088ca:	ea55 050a 	orrs.w	r5, r5, sl
 80088ce:	d1dc      	bne.n	800888a <__ieee754_pow+0x32>
 80088d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088d4:	18db      	adds	r3, r3, r3
 80088d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80088da:	4152      	adcs	r2, r2
 80088dc:	429d      	cmp	r5, r3
 80088de:	e7d0      	b.n	8008882 <__ieee754_pow+0x2a>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	da3b      	bge.n	800895c <__ieee754_pow+0x104>
 80088e4:	4b72      	ldr	r3, [pc, #456]	; (8008ab0 <__ieee754_pow+0x258>)
 80088e6:	4598      	cmp	r8, r3
 80088e8:	dc51      	bgt.n	800898e <__ieee754_pow+0x136>
 80088ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80088ee:	4598      	cmp	r8, r3
 80088f0:	f340 84ab 	ble.w	800924a <__ieee754_pow+0x9f2>
 80088f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80088f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088fc:	2b14      	cmp	r3, #20
 80088fe:	dd0f      	ble.n	8008920 <__ieee754_pow+0xc8>
 8008900:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008904:	fa22 f103 	lsr.w	r1, r2, r3
 8008908:	fa01 f303 	lsl.w	r3, r1, r3
 800890c:	4293      	cmp	r3, r2
 800890e:	f040 849c 	bne.w	800924a <__ieee754_pow+0x9f2>
 8008912:	f001 0101 	and.w	r1, r1, #1
 8008916:	f1c1 0302 	rsb	r3, r1, #2
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	b182      	cbz	r2, 8008940 <__ieee754_pow+0xe8>
 800891e:	e05f      	b.n	80089e0 <__ieee754_pow+0x188>
 8008920:	2a00      	cmp	r2, #0
 8008922:	d15b      	bne.n	80089dc <__ieee754_pow+0x184>
 8008924:	f1c3 0314 	rsb	r3, r3, #20
 8008928:	fa48 f103 	asr.w	r1, r8, r3
 800892c:	fa01 f303 	lsl.w	r3, r1, r3
 8008930:	4543      	cmp	r3, r8
 8008932:	f040 8487 	bne.w	8009244 <__ieee754_pow+0x9ec>
 8008936:	f001 0101 	and.w	r1, r1, #1
 800893a:	f1c1 0302 	rsb	r3, r1, #2
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	4b5c      	ldr	r3, [pc, #368]	; (8008ab4 <__ieee754_pow+0x25c>)
 8008942:	4598      	cmp	r8, r3
 8008944:	d132      	bne.n	80089ac <__ieee754_pow+0x154>
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	f280 8477 	bge.w	800923c <__ieee754_pow+0x9e4>
 800894e:	4959      	ldr	r1, [pc, #356]	; (8008ab4 <__ieee754_pow+0x25c>)
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	2000      	movs	r0, #0
 8008956:	f7f7 ff79 	bl	800084c <__aeabi_ddiv>
 800895a:	e79c      	b.n	8008896 <__ieee754_pow+0x3e>
 800895c:	2300      	movs	r3, #0
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	2a00      	cmp	r2, #0
 8008962:	d13d      	bne.n	80089e0 <__ieee754_pow+0x188>
 8008964:	4b51      	ldr	r3, [pc, #324]	; (8008aac <__ieee754_pow+0x254>)
 8008966:	4598      	cmp	r8, r3
 8008968:	d1ea      	bne.n	8008940 <__ieee754_pow+0xe8>
 800896a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800896e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008972:	ea53 030a 	orrs.w	r3, r3, sl
 8008976:	f000 8459 	beq.w	800922c <__ieee754_pow+0x9d4>
 800897a:	4b4f      	ldr	r3, [pc, #316]	; (8008ab8 <__ieee754_pow+0x260>)
 800897c:	429c      	cmp	r4, r3
 800897e:	dd08      	ble.n	8008992 <__ieee754_pow+0x13a>
 8008980:	f1b9 0f00 	cmp.w	r9, #0
 8008984:	f2c0 8456 	blt.w	8009234 <__ieee754_pow+0x9dc>
 8008988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800898c:	e783      	b.n	8008896 <__ieee754_pow+0x3e>
 800898e:	2302      	movs	r3, #2
 8008990:	e7e5      	b.n	800895e <__ieee754_pow+0x106>
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	f04f 0000 	mov.w	r0, #0
 800899a:	f04f 0100 	mov.w	r1, #0
 800899e:	f6bf af7a 	bge.w	8008896 <__ieee754_pow+0x3e>
 80089a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80089a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089aa:	e774      	b.n	8008896 <__ieee754_pow+0x3e>
 80089ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80089b0:	d106      	bne.n	80089c0 <__ieee754_pow+0x168>
 80089b2:	4632      	mov	r2, r6
 80089b4:	463b      	mov	r3, r7
 80089b6:	4630      	mov	r0, r6
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80089be:	e76a      	b.n	8008896 <__ieee754_pow+0x3e>
 80089c0:	4b3e      	ldr	r3, [pc, #248]	; (8008abc <__ieee754_pow+0x264>)
 80089c2:	4599      	cmp	r9, r3
 80089c4:	d10c      	bne.n	80089e0 <__ieee754_pow+0x188>
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	db0a      	blt.n	80089e0 <__ieee754_pow+0x188>
 80089ca:	ec47 6b10 	vmov	d0, r6, r7
 80089ce:	b009      	add	sp, #36	; 0x24
 80089d0:	ecbd 8b06 	vpop	{d8-d10}
 80089d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	f7ff be62 	b.w	80086a0 <__ieee754_sqrt>
 80089dc:	2300      	movs	r3, #0
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	ec47 6b10 	vmov	d0, r6, r7
 80089e4:	f000 fc62 	bl	80092ac <fabs>
 80089e8:	ec51 0b10 	vmov	r0, r1, d0
 80089ec:	f1ba 0f00 	cmp.w	sl, #0
 80089f0:	d129      	bne.n	8008a46 <__ieee754_pow+0x1ee>
 80089f2:	b124      	cbz	r4, 80089fe <__ieee754_pow+0x1a6>
 80089f4:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <__ieee754_pow+0x25c>)
 80089f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d123      	bne.n	8008a46 <__ieee754_pow+0x1ee>
 80089fe:	f1b9 0f00 	cmp.w	r9, #0
 8008a02:	da05      	bge.n	8008a10 <__ieee754_pow+0x1b8>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	2000      	movs	r0, #0
 8008a0a:	492a      	ldr	r1, [pc, #168]	; (8008ab4 <__ieee754_pow+0x25c>)
 8008a0c:	f7f7 ff1e 	bl	800084c <__aeabi_ddiv>
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	f6bf af40 	bge.w	8008896 <__ieee754_pow+0x3e>
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a20:	431c      	orrs	r4, r3
 8008a22:	d108      	bne.n	8008a36 <__ieee754_pow+0x1de>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	f7f7 fc2c 	bl	8000288 <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	e78f      	b.n	8008956 <__ieee754_pow+0xfe>
 8008a36:	9b04      	ldr	r3, [sp, #16]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	f47f af2c 	bne.w	8008896 <__ieee754_pow+0x3e>
 8008a3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a42:	4619      	mov	r1, r3
 8008a44:	e727      	b.n	8008896 <__ieee754_pow+0x3e>
 8008a46:	0feb      	lsrs	r3, r5, #31
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	9a06      	ldr	r2, [sp, #24]
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	d102      	bne.n	8008a5a <__ieee754_pow+0x202>
 8008a54:	4632      	mov	r2, r6
 8008a56:	463b      	mov	r3, r7
 8008a58:	e7e6      	b.n	8008a28 <__ieee754_pow+0x1d0>
 8008a5a:	4b19      	ldr	r3, [pc, #100]	; (8008ac0 <__ieee754_pow+0x268>)
 8008a5c:	4598      	cmp	r8, r3
 8008a5e:	f340 80fb 	ble.w	8008c58 <__ieee754_pow+0x400>
 8008a62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a66:	4598      	cmp	r8, r3
 8008a68:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <__ieee754_pow+0x260>)
 8008a6a:	dd0c      	ble.n	8008a86 <__ieee754_pow+0x22e>
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	dc0f      	bgt.n	8008a90 <__ieee754_pow+0x238>
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	da0f      	bge.n	8008a96 <__ieee754_pow+0x23e>
 8008a76:	2000      	movs	r0, #0
 8008a78:	b009      	add	sp, #36	; 0x24
 8008a7a:	ecbd 8b06 	vpop	{d8-d10}
 8008a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a82:	f000 bcc2 	b.w	800940a <__math_oflow>
 8008a86:	429c      	cmp	r4, r3
 8008a88:	dbf2      	blt.n	8008a70 <__ieee754_pow+0x218>
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <__ieee754_pow+0x25c>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	dd19      	ble.n	8008ac4 <__ieee754_pow+0x26c>
 8008a90:	f1b9 0f00 	cmp.w	r9, #0
 8008a94:	dcef      	bgt.n	8008a76 <__ieee754_pow+0x21e>
 8008a96:	2000      	movs	r0, #0
 8008a98:	b009      	add	sp, #36	; 0x24
 8008a9a:	ecbd 8b06 	vpop	{d8-d10}
 8008a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa2:	f000 bca9 	b.w	80093f8 <__math_uflow>
 8008aa6:	bf00      	nop
 8008aa8:	fff00000 	.word	0xfff00000
 8008aac:	7ff00000 	.word	0x7ff00000
 8008ab0:	433fffff 	.word	0x433fffff
 8008ab4:	3ff00000 	.word	0x3ff00000
 8008ab8:	3fefffff 	.word	0x3fefffff
 8008abc:	3fe00000 	.word	0x3fe00000
 8008ac0:	41e00000 	.word	0x41e00000
 8008ac4:	4b60      	ldr	r3, [pc, #384]	; (8008c48 <__ieee754_pow+0x3f0>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f7f7 fbde 	bl	8000288 <__aeabi_dsub>
 8008acc:	a354      	add	r3, pc, #336	; (adr r3, 8008c20 <__ieee754_pow+0x3c8>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	f7f7 fd8f 	bl	80005f8 <__aeabi_dmul>
 8008ada:	a353      	add	r3, pc, #332	; (adr r3, 8008c28 <__ieee754_pow+0x3d0>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	460f      	mov	r7, r1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	4b57      	ldr	r3, [pc, #348]	; (8008c4c <__ieee754_pow+0x3f4>)
 8008aee:	4682      	mov	sl, r0
 8008af0:	468b      	mov	fp, r1
 8008af2:	2200      	movs	r2, #0
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	a14b      	add	r1, pc, #300	; (adr r1, 8008c30 <__ieee754_pow+0x3d8>)
 8008b02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b06:	f7f7 fbbf 	bl	8000288 <__aeabi_dsub>
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	f7f7 fd73 	bl	80005f8 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	2000      	movs	r0, #0
 8008b18:	494d      	ldr	r1, [pc, #308]	; (8008c50 <__ieee754_pow+0x3f8>)
 8008b1a:	f7f7 fbb5 	bl	8000288 <__aeabi_dsub>
 8008b1e:	4622      	mov	r2, r4
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	462b      	mov	r3, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fd65 	bl	80005f8 <__aeabi_dmul>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	a33f      	add	r3, pc, #252	; (adr r3, 8008c38 <__ieee754_pow+0x3e0>)
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f7f7 fd5a 	bl	80005f8 <__aeabi_dmul>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4650      	mov	r0, sl
 8008b4a:	4659      	mov	r1, fp
 8008b4c:	f7f7 fb9c 	bl	8000288 <__aeabi_dsub>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 fb96 	bl	800028c <__adddf3>
 8008b60:	2000      	movs	r0, #0
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	4604      	mov	r4, r0
 8008b68:	460d      	mov	r5, r1
 8008b6a:	f7f7 fb8d 	bl	8000288 <__aeabi_dsub>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f7f7 fb87 	bl	8000288 <__aeabi_dsub>
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	9a06      	ldr	r2, [sp, #24]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	4682      	mov	sl, r0
 8008b84:	468b      	mov	fp, r1
 8008b86:	f040 81e7 	bne.w	8008f58 <__ieee754_pow+0x700>
 8008b8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008c40 <__ieee754_pow+0x3e8>
 8008b8e:	eeb0 8a47 	vmov.f32	s16, s14
 8008b92:	eef0 8a67 	vmov.f32	s17, s15
 8008b96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b9a:	2600      	movs	r6, #0
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ba4:	f7f7 fb70 	bl	8000288 <__aeabi_dsub>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bb4:	4680      	mov	r8, r0
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	4650      	mov	r0, sl
 8008bba:	4659      	mov	r1, fp
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	f7f7 fb60 	bl	800028c <__adddf3>
 8008bcc:	4632      	mov	r2, r6
 8008bce:	463b      	mov	r3, r7
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	4689      	mov	r9, r1
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	f7f7 fd0e 	bl	80005f8 <__aeabi_dmul>
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4604      	mov	r4, r0
 8008be0:	460d      	mov	r5, r1
 8008be2:	4602      	mov	r2, r0
 8008be4:	4649      	mov	r1, r9
 8008be6:	4640      	mov	r0, r8
 8008be8:	f7f7 fb50 	bl	800028c <__adddf3>
 8008bec:	4b19      	ldr	r3, [pc, #100]	; (8008c54 <__ieee754_pow+0x3fc>)
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	ec45 4b19 	vmov	d9, r4, r5
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	468b      	mov	fp, r1
 8008bfa:	f340 82f0 	ble.w	80091de <__ieee754_pow+0x986>
 8008bfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008c02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008c06:	4303      	orrs	r3, r0
 8008c08:	f000 81e4 	beq.w	8008fd4 <__ieee754_pow+0x77c>
 8008c0c:	ec51 0b18 	vmov	r0, r1, d8
 8008c10:	2200      	movs	r2, #0
 8008c12:	2300      	movs	r3, #0
 8008c14:	f7f7 ff62 	bl	8000adc <__aeabi_dcmplt>
 8008c18:	3800      	subs	r0, #0
 8008c1a:	bf18      	it	ne
 8008c1c:	2001      	movne	r0, #1
 8008c1e:	e72b      	b.n	8008a78 <__ieee754_pow+0x220>
 8008c20:	60000000 	.word	0x60000000
 8008c24:	3ff71547 	.word	0x3ff71547
 8008c28:	f85ddf44 	.word	0xf85ddf44
 8008c2c:	3e54ae0b 	.word	0x3e54ae0b
 8008c30:	55555555 	.word	0x55555555
 8008c34:	3fd55555 	.word	0x3fd55555
 8008c38:	652b82fe 	.word	0x652b82fe
 8008c3c:	3ff71547 	.word	0x3ff71547
 8008c40:	00000000 	.word	0x00000000
 8008c44:	bff00000 	.word	0xbff00000
 8008c48:	3ff00000 	.word	0x3ff00000
 8008c4c:	3fd00000 	.word	0x3fd00000
 8008c50:	3fe00000 	.word	0x3fe00000
 8008c54:	408fffff 	.word	0x408fffff
 8008c58:	4bd5      	ldr	r3, [pc, #852]	; (8008fb0 <__ieee754_pow+0x758>)
 8008c5a:	402b      	ands	r3, r5
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	b92b      	cbnz	r3, 8008c6c <__ieee754_pow+0x414>
 8008c60:	4bd4      	ldr	r3, [pc, #848]	; (8008fb4 <__ieee754_pow+0x75c>)
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	1523      	asrs	r3, r4, #20
 8008c6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c72:	4413      	add	r3, r2
 8008c74:	9305      	str	r3, [sp, #20]
 8008c76:	4bd0      	ldr	r3, [pc, #832]	; (8008fb8 <__ieee754_pow+0x760>)
 8008c78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008c80:	429c      	cmp	r4, r3
 8008c82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008c86:	dd08      	ble.n	8008c9a <__ieee754_pow+0x442>
 8008c88:	4bcc      	ldr	r3, [pc, #816]	; (8008fbc <__ieee754_pow+0x764>)
 8008c8a:	429c      	cmp	r4, r3
 8008c8c:	f340 8162 	ble.w	8008f54 <__ieee754_pow+0x6fc>
 8008c90:	9b05      	ldr	r3, [sp, #20]
 8008c92:	3301      	adds	r3, #1
 8008c94:	9305      	str	r3, [sp, #20]
 8008c96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	00e3      	lsls	r3, r4, #3
 8008c9e:	9307      	str	r3, [sp, #28]
 8008ca0:	4bc7      	ldr	r3, [pc, #796]	; (8008fc0 <__ieee754_pow+0x768>)
 8008ca2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ca6:	ed93 7b00 	vldr	d7, [r3]
 8008caa:	4629      	mov	r1, r5
 8008cac:	ec53 2b17 	vmov	r2, r3, d7
 8008cb0:	eeb0 9a47 	vmov.f32	s18, s14
 8008cb4:	eef0 9a67 	vmov.f32	s19, s15
 8008cb8:	4682      	mov	sl, r0
 8008cba:	f7f7 fae5 	bl	8000288 <__aeabi_dsub>
 8008cbe:	4652      	mov	r2, sl
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	460f      	mov	r7, r1
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	ec51 0b19 	vmov	r0, r1, d9
 8008cca:	f7f7 fadf 	bl	800028c <__adddf3>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	49bb      	ldr	r1, [pc, #748]	; (8008fc4 <__ieee754_pow+0x76c>)
 8008cd6:	f7f7 fdb9 	bl	800084c <__aeabi_ddiv>
 8008cda:	ec41 0b1a 	vmov	d10, r0, r1
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	f7f7 fc87 	bl	80005f8 <__aeabi_dmul>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cf0:	9302      	str	r3, [sp, #8]
 8008cf2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cf6:	46ab      	mov	fp, r5
 8008cf8:	106d      	asrs	r5, r5, #1
 8008cfa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008cfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008d02:	ec41 0b18 	vmov	d8, r0, r1
 8008d06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4649      	mov	r1, r9
 8008d10:	4614      	mov	r4, r2
 8008d12:	461d      	mov	r5, r3
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 fab2 	bl	8000288 <__aeabi_dsub>
 8008d24:	ec53 2b19 	vmov	r2, r3, d9
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	4629      	mov	r1, r5
 8008d30:	f7f7 faaa 	bl	8000288 <__aeabi_dsub>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4650      	mov	r0, sl
 8008d3a:	4659      	mov	r1, fp
 8008d3c:	f7f7 faa4 	bl	8000288 <__aeabi_dsub>
 8008d40:	4642      	mov	r2, r8
 8008d42:	464b      	mov	r3, r9
 8008d44:	f7f7 fc58 	bl	80005f8 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fa9a 	bl	8000288 <__aeabi_dsub>
 8008d54:	ec53 2b1a 	vmov	r2, r3, d10
 8008d58:	f7f7 fc4e 	bl	80005f8 <__aeabi_dmul>
 8008d5c:	ec53 2b18 	vmov	r2, r3, d8
 8008d60:	ec41 0b19 	vmov	d9, r0, r1
 8008d64:	ec51 0b18 	vmov	r0, r1, d8
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	a37c      	add	r3, pc, #496	; (adr r3, 8008f60 <__ieee754_pow+0x708>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	4604      	mov	r4, r0
 8008d74:	460d      	mov	r5, r1
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	a37b      	add	r3, pc, #492	; (adr r3, 8008f68 <__ieee754_pow+0x710>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fa84 	bl	800028c <__adddf3>
 8008d84:	4622      	mov	r2, r4
 8008d86:	462b      	mov	r3, r5
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	a378      	add	r3, pc, #480	; (adr r3, 8008f70 <__ieee754_pow+0x718>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f7f7 fa7b 	bl	800028c <__adddf3>
 8008d96:	4622      	mov	r2, r4
 8008d98:	462b      	mov	r3, r5
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	a376      	add	r3, pc, #472	; (adr r3, 8008f78 <__ieee754_pow+0x720>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fa72 	bl	800028c <__adddf3>
 8008da8:	4622      	mov	r2, r4
 8008daa:	462b      	mov	r3, r5
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	a373      	add	r3, pc, #460	; (adr r3, 8008f80 <__ieee754_pow+0x728>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 fa69 	bl	800028c <__adddf3>
 8008dba:	4622      	mov	r2, r4
 8008dbc:	462b      	mov	r3, r5
 8008dbe:	f7f7 fc1b 	bl	80005f8 <__aeabi_dmul>
 8008dc2:	a371      	add	r3, pc, #452	; (adr r3, 8008f88 <__ieee754_pow+0x730>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fa60 	bl	800028c <__adddf3>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	462b      	mov	r3, r5
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 fc0e 	bl	80005f8 <__aeabi_dmul>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 fc08 	bl	80005f8 <__aeabi_dmul>
 8008de8:	4642      	mov	r2, r8
 8008dea:	4604      	mov	r4, r0
 8008dec:	460d      	mov	r5, r1
 8008dee:	464b      	mov	r3, r9
 8008df0:	ec51 0b18 	vmov	r0, r1, d8
 8008df4:	f7f7 fa4a 	bl	800028c <__adddf3>
 8008df8:	ec53 2b19 	vmov	r2, r3, d9
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	4622      	mov	r2, r4
 8008e02:	462b      	mov	r3, r5
 8008e04:	f7f7 fa42 	bl	800028c <__adddf3>
 8008e08:	4642      	mov	r2, r8
 8008e0a:	4682      	mov	sl, r0
 8008e0c:	468b      	mov	fp, r1
 8008e0e:	464b      	mov	r3, r9
 8008e10:	4640      	mov	r0, r8
 8008e12:	4649      	mov	r1, r9
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	4b6b      	ldr	r3, [pc, #428]	; (8008fc8 <__ieee754_pow+0x770>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	4652      	mov	r2, sl
 8008e26:	465b      	mov	r3, fp
 8008e28:	f7f7 fa30 	bl	800028c <__adddf3>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	4604      	mov	r4, r0
 8008e30:	460d      	mov	r5, r1
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	4b62      	ldr	r3, [pc, #392]	; (8008fc8 <__ieee754_pow+0x770>)
 8008e40:	4680      	mov	r8, r0
 8008e42:	4689      	mov	r9, r1
 8008e44:	2200      	movs	r2, #0
 8008e46:	4620      	mov	r0, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fa1d 	bl	8000288 <__aeabi_dsub>
 8008e4e:	4632      	mov	r2, r6
 8008e50:	463b      	mov	r3, r7
 8008e52:	f7f7 fa19 	bl	8000288 <__aeabi_dsub>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	f7f7 fa13 	bl	8000288 <__aeabi_dsub>
 8008e62:	ec53 2b18 	vmov	r2, r3, d8
 8008e66:	f7f7 fbc7 	bl	80005f8 <__aeabi_dmul>
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	462b      	mov	r3, r5
 8008e72:	ec51 0b19 	vmov	r0, r1, d9
 8008e76:	f7f7 fbbf 	bl	80005f8 <__aeabi_dmul>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4630      	mov	r0, r6
 8008e80:	4639      	mov	r1, r7
 8008e82:	f7f7 fa03 	bl	800028c <__adddf3>
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4640      	mov	r0, r8
 8008e90:	4649      	mov	r1, r9
 8008e92:	f7f7 f9fb 	bl	800028c <__adddf3>
 8008e96:	a33e      	add	r3, pc, #248	; (adr r3, 8008f90 <__ieee754_pow+0x738>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	ec41 0b18 	vmov	d8, r0, r1
 8008eac:	464b      	mov	r3, r9
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 f9e9 	bl	8000288 <__aeabi_dsub>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4630      	mov	r0, r6
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	f7f7 f9e3 	bl	8000288 <__aeabi_dsub>
 8008ec2:	a335      	add	r3, pc, #212	; (adr r3, 8008f98 <__ieee754_pow+0x740>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 fb96 	bl	80005f8 <__aeabi_dmul>
 8008ecc:	a334      	add	r3, pc, #208	; (adr r3, 8008fa0 <__ieee754_pow+0x748>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f9d1 	bl	800028c <__adddf3>
 8008eea:	9a07      	ldr	r2, [sp, #28]
 8008eec:	4b37      	ldr	r3, [pc, #220]	; (8008fcc <__ieee754_pow+0x774>)
 8008eee:	4413      	add	r3, r2
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 f9ca 	bl	800028c <__adddf3>
 8008ef8:	4682      	mov	sl, r0
 8008efa:	9805      	ldr	r0, [sp, #20]
 8008efc:	468b      	mov	fp, r1
 8008efe:	f7f7 fb11 	bl	8000524 <__aeabi_i2d>
 8008f02:	9a07      	ldr	r2, [sp, #28]
 8008f04:	4b32      	ldr	r3, [pc, #200]	; (8008fd0 <__ieee754_pow+0x778>)
 8008f06:	4413      	add	r3, r2
 8008f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	460f      	mov	r7, r1
 8008f10:	4652      	mov	r2, sl
 8008f12:	465b      	mov	r3, fp
 8008f14:	ec51 0b18 	vmov	r0, r1, d8
 8008f18:	f7f7 f9b8 	bl	800028c <__adddf3>
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	f7f7 f9b4 	bl	800028c <__adddf3>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	f7f7 f9b0 	bl	800028c <__adddf3>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	4632      	mov	r2, r6
 8008f30:	463b      	mov	r3, r7
 8008f32:	4604      	mov	r4, r0
 8008f34:	460d      	mov	r5, r1
 8008f36:	f7f7 f9a7 	bl	8000288 <__aeabi_dsub>
 8008f3a:	4642      	mov	r2, r8
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	f7f7 f9a3 	bl	8000288 <__aeabi_dsub>
 8008f42:	ec53 2b18 	vmov	r2, r3, d8
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4650      	mov	r0, sl
 8008f50:	4659      	mov	r1, fp
 8008f52:	e610      	b.n	8008b76 <__ieee754_pow+0x31e>
 8008f54:	2401      	movs	r4, #1
 8008f56:	e6a1      	b.n	8008c9c <__ieee754_pow+0x444>
 8008f58:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008fa8 <__ieee754_pow+0x750>
 8008f5c:	e617      	b.n	8008b8e <__ieee754_pow+0x336>
 8008f5e:	bf00      	nop
 8008f60:	4a454eef 	.word	0x4a454eef
 8008f64:	3fca7e28 	.word	0x3fca7e28
 8008f68:	93c9db65 	.word	0x93c9db65
 8008f6c:	3fcd864a 	.word	0x3fcd864a
 8008f70:	a91d4101 	.word	0xa91d4101
 8008f74:	3fd17460 	.word	0x3fd17460
 8008f78:	518f264d 	.word	0x518f264d
 8008f7c:	3fd55555 	.word	0x3fd55555
 8008f80:	db6fabff 	.word	0xdb6fabff
 8008f84:	3fdb6db6 	.word	0x3fdb6db6
 8008f88:	33333303 	.word	0x33333303
 8008f8c:	3fe33333 	.word	0x3fe33333
 8008f90:	e0000000 	.word	0xe0000000
 8008f94:	3feec709 	.word	0x3feec709
 8008f98:	dc3a03fd 	.word	0xdc3a03fd
 8008f9c:	3feec709 	.word	0x3feec709
 8008fa0:	145b01f5 	.word	0x145b01f5
 8008fa4:	be3e2fe0 	.word	0xbe3e2fe0
 8008fa8:	00000000 	.word	0x00000000
 8008fac:	3ff00000 	.word	0x3ff00000
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	43400000 	.word	0x43400000
 8008fb8:	0003988e 	.word	0x0003988e
 8008fbc:	000bb679 	.word	0x000bb679
 8008fc0:	08009800 	.word	0x08009800
 8008fc4:	3ff00000 	.word	0x3ff00000
 8008fc8:	40080000 	.word	0x40080000
 8008fcc:	08009820 	.word	0x08009820
 8008fd0:	08009810 	.word	0x08009810
 8008fd4:	a3b3      	add	r3, pc, #716	; (adr r3, 80092a4 <__ieee754_pow+0xa4c>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f7f7 f955 	bl	800028c <__adddf3>
 8008fe2:	4622      	mov	r2, r4
 8008fe4:	ec41 0b1a 	vmov	d10, r0, r1
 8008fe8:	462b      	mov	r3, r5
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 f94b 	bl	8000288 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	ec51 0b1a 	vmov	r0, r1, d10
 8008ffa:	f7f7 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f47f ae04 	bne.w	8008c0c <__ieee754_pow+0x3b4>
 8009004:	4aa2      	ldr	r2, [pc, #648]	; (8009290 <__ieee754_pow+0xa38>)
 8009006:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800900a:	4293      	cmp	r3, r2
 800900c:	f340 8107 	ble.w	800921e <__ieee754_pow+0x9c6>
 8009010:	151b      	asrs	r3, r3, #20
 8009012:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009016:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800901a:	fa4a fa03 	asr.w	sl, sl, r3
 800901e:	44da      	add	sl, fp
 8009020:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009024:	489b      	ldr	r0, [pc, #620]	; (8009294 <__ieee754_pow+0xa3c>)
 8009026:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800902a:	4108      	asrs	r0, r1
 800902c:	ea00 030a 	and.w	r3, r0, sl
 8009030:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009034:	f1c1 0114 	rsb	r1, r1, #20
 8009038:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800903c:	fa4a fa01 	asr.w	sl, sl, r1
 8009040:	f1bb 0f00 	cmp.w	fp, #0
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	4620      	mov	r0, r4
 800904a:	4629      	mov	r1, r5
 800904c:	bfb8      	it	lt
 800904e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009052:	f7f7 f919 	bl	8000288 <__aeabi_dsub>
 8009056:	ec41 0b19 	vmov	d9, r0, r1
 800905a:	4642      	mov	r2, r8
 800905c:	464b      	mov	r3, r9
 800905e:	ec51 0b19 	vmov	r0, r1, d9
 8009062:	f7f7 f913 	bl	800028c <__adddf3>
 8009066:	a37a      	add	r3, pc, #488	; (adr r3, 8009250 <__ieee754_pow+0x9f8>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	2000      	movs	r0, #0
 800906e:	4604      	mov	r4, r0
 8009070:	460d      	mov	r5, r1
 8009072:	f7f7 fac1 	bl	80005f8 <__aeabi_dmul>
 8009076:	ec53 2b19 	vmov	r2, r3, d9
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	4620      	mov	r0, r4
 8009080:	4629      	mov	r1, r5
 8009082:	f7f7 f901 	bl	8000288 <__aeabi_dsub>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4640      	mov	r0, r8
 800908c:	4649      	mov	r1, r9
 800908e:	f7f7 f8fb 	bl	8000288 <__aeabi_dsub>
 8009092:	a371      	add	r3, pc, #452	; (adr r3, 8009258 <__ieee754_pow+0xa00>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	a370      	add	r3, pc, #448	; (adr r3, 8009260 <__ieee754_pow+0xa08>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	4680      	mov	r8, r0
 80090a4:	4689      	mov	r9, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 f8e9 	bl	800028c <__adddf3>
 80090ba:	4604      	mov	r4, r0
 80090bc:	460d      	mov	r5, r1
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4630      	mov	r0, r6
 80090c4:	4639      	mov	r1, r7
 80090c6:	f7f7 f8e1 	bl	800028c <__adddf3>
 80090ca:	4632      	mov	r2, r6
 80090cc:	463b      	mov	r3, r7
 80090ce:	4680      	mov	r8, r0
 80090d0:	4689      	mov	r9, r1
 80090d2:	f7f7 f8d9 	bl	8000288 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4620      	mov	r0, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	f7f7 f8d3 	bl	8000288 <__aeabi_dsub>
 80090e2:	4642      	mov	r2, r8
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	464b      	mov	r3, r9
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	f7f7 fa83 	bl	80005f8 <__aeabi_dmul>
 80090f2:	a35d      	add	r3, pc, #372	; (adr r3, 8009268 <__ieee754_pow+0xa10>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	a35b      	add	r3, pc, #364	; (adr r3, 8009270 <__ieee754_pow+0xa18>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 f8bf 	bl	8000288 <__aeabi_dsub>
 800910a:	4622      	mov	r2, r4
 800910c:	462b      	mov	r3, r5
 800910e:	f7f7 fa73 	bl	80005f8 <__aeabi_dmul>
 8009112:	a359      	add	r3, pc, #356	; (adr r3, 8009278 <__ieee754_pow+0xa20>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f8b8 	bl	800028c <__adddf3>
 800911c:	4622      	mov	r2, r4
 800911e:	462b      	mov	r3, r5
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	a356      	add	r3, pc, #344	; (adr r3, 8009280 <__ieee754_pow+0xa28>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	4622      	mov	r2, r4
 8009130:	462b      	mov	r3, r5
 8009132:	f7f7 fa61 	bl	80005f8 <__aeabi_dmul>
 8009136:	a354      	add	r3, pc, #336	; (adr r3, 8009288 <__ieee754_pow+0xa30>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 f8a6 	bl	800028c <__adddf3>
 8009140:	4622      	mov	r2, r4
 8009142:	462b      	mov	r3, r5
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4640      	mov	r0, r8
 800914e:	4649      	mov	r1, r9
 8009150:	f7f7 f89a 	bl	8000288 <__aeabi_dsub>
 8009154:	4604      	mov	r4, r0
 8009156:	460d      	mov	r5, r1
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4640      	mov	r0, r8
 800915e:	4649      	mov	r1, r9
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	2200      	movs	r2, #0
 8009166:	ec41 0b19 	vmov	d9, r0, r1
 800916a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 f889 	bl	8000288 <__aeabi_dsub>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	ec51 0b19 	vmov	r0, r1, d9
 800917e:	f7f7 fb65 	bl	800084c <__aeabi_ddiv>
 8009182:	4632      	mov	r2, r6
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	463b      	mov	r3, r7
 800918a:	4640      	mov	r0, r8
 800918c:	4649      	mov	r1, r9
 800918e:	f7f7 fa33 	bl	80005f8 <__aeabi_dmul>
 8009192:	4632      	mov	r2, r6
 8009194:	463b      	mov	r3, r7
 8009196:	f7f7 f879 	bl	800028c <__adddf3>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4620      	mov	r0, r4
 80091a0:	4629      	mov	r1, r5
 80091a2:	f7f7 f871 	bl	8000288 <__aeabi_dsub>
 80091a6:	4642      	mov	r2, r8
 80091a8:	464b      	mov	r3, r9
 80091aa:	f7f7 f86d 	bl	8000288 <__aeabi_dsub>
 80091ae:	460b      	mov	r3, r1
 80091b0:	4602      	mov	r2, r0
 80091b2:	4939      	ldr	r1, [pc, #228]	; (8009298 <__ieee754_pow+0xa40>)
 80091b4:	2000      	movs	r0, #0
 80091b6:	f7f7 f867 	bl	8000288 <__aeabi_dsub>
 80091ba:	ec41 0b10 	vmov	d0, r0, r1
 80091be:	ee10 3a90 	vmov	r3, s1
 80091c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80091c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ca:	da2b      	bge.n	8009224 <__ieee754_pow+0x9cc>
 80091cc:	4650      	mov	r0, sl
 80091ce:	f000 f877 	bl	80092c0 <scalbn>
 80091d2:	ec51 0b10 	vmov	r0, r1, d0
 80091d6:	ec53 2b18 	vmov	r2, r3, d8
 80091da:	f7ff bbee 	b.w	80089ba <__ieee754_pow+0x162>
 80091de:	4b2f      	ldr	r3, [pc, #188]	; (800929c <__ieee754_pow+0xa44>)
 80091e0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80091e4:	429e      	cmp	r6, r3
 80091e6:	f77f af0d 	ble.w	8009004 <__ieee754_pow+0x7ac>
 80091ea:	4b2d      	ldr	r3, [pc, #180]	; (80092a0 <__ieee754_pow+0xa48>)
 80091ec:	440b      	add	r3, r1
 80091ee:	4303      	orrs	r3, r0
 80091f0:	d009      	beq.n	8009206 <__ieee754_pow+0x9ae>
 80091f2:	ec51 0b18 	vmov	r0, r1, d8
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	f7f7 fc6f 	bl	8000adc <__aeabi_dcmplt>
 80091fe:	3800      	subs	r0, #0
 8009200:	bf18      	it	ne
 8009202:	2001      	movne	r0, #1
 8009204:	e448      	b.n	8008a98 <__ieee754_pow+0x240>
 8009206:	4622      	mov	r2, r4
 8009208:	462b      	mov	r3, r5
 800920a:	f7f7 f83d 	bl	8000288 <__aeabi_dsub>
 800920e:	4642      	mov	r2, r8
 8009210:	464b      	mov	r3, r9
 8009212:	f7f7 fc77 	bl	8000b04 <__aeabi_dcmpge>
 8009216:	2800      	cmp	r0, #0
 8009218:	f43f aef4 	beq.w	8009004 <__ieee754_pow+0x7ac>
 800921c:	e7e9      	b.n	80091f2 <__ieee754_pow+0x99a>
 800921e:	f04f 0a00 	mov.w	sl, #0
 8009222:	e71a      	b.n	800905a <__ieee754_pow+0x802>
 8009224:	ec51 0b10 	vmov	r0, r1, d0
 8009228:	4619      	mov	r1, r3
 800922a:	e7d4      	b.n	80091d6 <__ieee754_pow+0x97e>
 800922c:	491a      	ldr	r1, [pc, #104]	; (8009298 <__ieee754_pow+0xa40>)
 800922e:	2000      	movs	r0, #0
 8009230:	f7ff bb31 	b.w	8008896 <__ieee754_pow+0x3e>
 8009234:	2000      	movs	r0, #0
 8009236:	2100      	movs	r1, #0
 8009238:	f7ff bb2d 	b.w	8008896 <__ieee754_pow+0x3e>
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7ff bb29 	b.w	8008896 <__ieee754_pow+0x3e>
 8009244:	9204      	str	r2, [sp, #16]
 8009246:	f7ff bb7b 	b.w	8008940 <__ieee754_pow+0xe8>
 800924a:	2300      	movs	r3, #0
 800924c:	f7ff bb65 	b.w	800891a <__ieee754_pow+0xc2>
 8009250:	00000000 	.word	0x00000000
 8009254:	3fe62e43 	.word	0x3fe62e43
 8009258:	fefa39ef 	.word	0xfefa39ef
 800925c:	3fe62e42 	.word	0x3fe62e42
 8009260:	0ca86c39 	.word	0x0ca86c39
 8009264:	be205c61 	.word	0xbe205c61
 8009268:	72bea4d0 	.word	0x72bea4d0
 800926c:	3e663769 	.word	0x3e663769
 8009270:	c5d26bf1 	.word	0xc5d26bf1
 8009274:	3ebbbd41 	.word	0x3ebbbd41
 8009278:	af25de2c 	.word	0xaf25de2c
 800927c:	3f11566a 	.word	0x3f11566a
 8009280:	16bebd93 	.word	0x16bebd93
 8009284:	3f66c16c 	.word	0x3f66c16c
 8009288:	5555553e 	.word	0x5555553e
 800928c:	3fc55555 	.word	0x3fc55555
 8009290:	3fe00000 	.word	0x3fe00000
 8009294:	fff00000 	.word	0xfff00000
 8009298:	3ff00000 	.word	0x3ff00000
 800929c:	4090cbff 	.word	0x4090cbff
 80092a0:	3f6f3400 	.word	0x3f6f3400
 80092a4:	652b82fe 	.word	0x652b82fe
 80092a8:	3c971547 	.word	0x3c971547

080092ac <fabs>:
 80092ac:	ec51 0b10 	vmov	r0, r1, d0
 80092b0:	ee10 2a10 	vmov	r2, s0
 80092b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092b8:	ec43 2b10 	vmov	d0, r2, r3
 80092bc:	4770      	bx	lr
	...

080092c0 <scalbn>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	ec55 4b10 	vmov	r4, r5, d0
 80092c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80092ca:	4606      	mov	r6, r0
 80092cc:	462b      	mov	r3, r5
 80092ce:	b999      	cbnz	r1, 80092f8 <scalbn+0x38>
 80092d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092d4:	4323      	orrs	r3, r4
 80092d6:	d03f      	beq.n	8009358 <scalbn+0x98>
 80092d8:	4b35      	ldr	r3, [pc, #212]	; (80093b0 <scalbn+0xf0>)
 80092da:	4629      	mov	r1, r5
 80092dc:	ee10 0a10 	vmov	r0, s0
 80092e0:	2200      	movs	r2, #0
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	4b33      	ldr	r3, [pc, #204]	; (80093b4 <scalbn+0xf4>)
 80092e8:	429e      	cmp	r6, r3
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	da10      	bge.n	8009312 <scalbn+0x52>
 80092f0:	a327      	add	r3, pc, #156	; (adr r3, 8009390 <scalbn+0xd0>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	e01f      	b.n	8009338 <scalbn+0x78>
 80092f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80092fc:	4291      	cmp	r1, r2
 80092fe:	d10c      	bne.n	800931a <scalbn+0x5a>
 8009300:	ee10 2a10 	vmov	r2, s0
 8009304:	4620      	mov	r0, r4
 8009306:	4629      	mov	r1, r5
 8009308:	f7f6 ffc0 	bl	800028c <__adddf3>
 800930c:	4604      	mov	r4, r0
 800930e:	460d      	mov	r5, r1
 8009310:	e022      	b.n	8009358 <scalbn+0x98>
 8009312:	460b      	mov	r3, r1
 8009314:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009318:	3936      	subs	r1, #54	; 0x36
 800931a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800931e:	4296      	cmp	r6, r2
 8009320:	dd0d      	ble.n	800933e <scalbn+0x7e>
 8009322:	2d00      	cmp	r5, #0
 8009324:	a11c      	add	r1, pc, #112	; (adr r1, 8009398 <scalbn+0xd8>)
 8009326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800932a:	da02      	bge.n	8009332 <scalbn+0x72>
 800932c:	a11c      	add	r1, pc, #112	; (adr r1, 80093a0 <scalbn+0xe0>)
 800932e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009332:	a319      	add	r3, pc, #100	; (adr r3, 8009398 <scalbn+0xd8>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	e7e6      	b.n	800930c <scalbn+0x4c>
 800933e:	1872      	adds	r2, r6, r1
 8009340:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009344:	428a      	cmp	r2, r1
 8009346:	dcec      	bgt.n	8009322 <scalbn+0x62>
 8009348:	2a00      	cmp	r2, #0
 800934a:	dd08      	ble.n	800935e <scalbn+0x9e>
 800934c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009358:	ec45 4b10 	vmov	d0, r4, r5
 800935c:	bd70      	pop	{r4, r5, r6, pc}
 800935e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009362:	da08      	bge.n	8009376 <scalbn+0xb6>
 8009364:	2d00      	cmp	r5, #0
 8009366:	a10a      	add	r1, pc, #40	; (adr r1, 8009390 <scalbn+0xd0>)
 8009368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800936c:	dac0      	bge.n	80092f0 <scalbn+0x30>
 800936e:	a10e      	add	r1, pc, #56	; (adr r1, 80093a8 <scalbn+0xe8>)
 8009370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009374:	e7bc      	b.n	80092f0 <scalbn+0x30>
 8009376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800937a:	3236      	adds	r2, #54	; 0x36
 800937c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009380:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009384:	4620      	mov	r0, r4
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <scalbn+0xf8>)
 8009388:	2200      	movs	r2, #0
 800938a:	e7d5      	b.n	8009338 <scalbn+0x78>
 800938c:	f3af 8000 	nop.w
 8009390:	c2f8f359 	.word	0xc2f8f359
 8009394:	01a56e1f 	.word	0x01a56e1f
 8009398:	8800759c 	.word	0x8800759c
 800939c:	7e37e43c 	.word	0x7e37e43c
 80093a0:	8800759c 	.word	0x8800759c
 80093a4:	fe37e43c 	.word	0xfe37e43c
 80093a8:	c2f8f359 	.word	0xc2f8f359
 80093ac:	81a56e1f 	.word	0x81a56e1f
 80093b0:	43500000 	.word	0x43500000
 80093b4:	ffff3cb0 	.word	0xffff3cb0
 80093b8:	3c900000 	.word	0x3c900000

080093bc <with_errno>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	4616      	mov	r6, r2
 80093c4:	f7fd f81c 	bl	8006400 <__errno>
 80093c8:	4629      	mov	r1, r5
 80093ca:	6006      	str	r6, [r0, #0]
 80093cc:	4620      	mov	r0, r4
 80093ce:	bd70      	pop	{r4, r5, r6, pc}

080093d0 <xflow>:
 80093d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093d2:	4614      	mov	r4, r2
 80093d4:	461d      	mov	r5, r3
 80093d6:	b108      	cbz	r0, 80093dc <xflow+0xc>
 80093d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093dc:	e9cd 2300 	strd	r2, r3, [sp]
 80093e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	2222      	movs	r2, #34	; 0x22
 80093ee:	b003      	add	sp, #12
 80093f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f4:	f7ff bfe2 	b.w	80093bc <with_errno>

080093f8 <__math_uflow>:
 80093f8:	b508      	push	{r3, lr}
 80093fa:	2200      	movs	r2, #0
 80093fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009400:	f7ff ffe6 	bl	80093d0 <xflow>
 8009404:	ec41 0b10 	vmov	d0, r0, r1
 8009408:	bd08      	pop	{r3, pc}

0800940a <__math_oflow>:
 800940a:	b508      	push	{r3, lr}
 800940c:	2200      	movs	r2, #0
 800940e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009412:	f7ff ffdd 	bl	80093d0 <xflow>
 8009416:	ec41 0b10 	vmov	d0, r0, r1
 800941a:	bd08      	pop	{r3, pc}

0800941c <_init>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	bf00      	nop
 8009420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009422:	bc08      	pop	{r3}
 8009424:	469e      	mov	lr, r3
 8009426:	4770      	bx	lr

08009428 <_fini>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr
