
LAB2_SENSORS_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007098  08007098  00017098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007170  08007170  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007178  08007178  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08007180  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200000d8  08007258  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007258  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015353  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e08  00000000  00000000  0003549e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  000382a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6c  00000000  00000000  00039678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282ee  00000000  00000000  0003a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186bf  00000000  00000000  000628d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f733e  00000000  00000000  0007af91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cc0  00000000  00000000  001722d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  00177f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800707c 	.word	0x0800707c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800707c 	.word	0x0800707c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e4c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e50:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	int16_t A[3] = {0};
 8000e52:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	809a      	strh	r2, [r3, #4]
	float G[3] = {0}, gyro_values[3] = {0}, acc_values[3] = {0};
 8000e5c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
	float stringa[100] = {0};
 8000e80:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000e84:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f004 fd0b 	bl	80058ac <memset>
	double acc_norm = 0, gyro_norm = 0;
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f001 f801 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f947 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f9c7 	bl	8001248 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000eba:	f000 f995 	bl	80011e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000ebe:	f000 fd1d 	bl	80018fc <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000ec2:	f000 fd71 	bl	80019a8 <BSP_GYRO_Init>
  HAL_UART_Init(&huart1);
 8000ec6:	489a      	ldr	r0, [pc, #616]	; (8001130 <main+0x2e8>)
 8000ec8:	f003 ff86 	bl	8004dd8 <HAL_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Resta in attesa di interrupt dal timer
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed2:	f002 f8e1 	bl	8003098 <HAL_PWR_EnterSLEEPMode>

	  // get values from Accelerator and Gyroscope
	  BSP_ACCELERO_AccGetXYZ(A);
 8000ed6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fd4c 	bl	8001978 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(G);
 8000ee0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fda1 	bl	8001a2c <BSP_GYRO_GetXYZ>
	   * to set the gyro sensitivity, go to stm32l475e_iot01_gyro.c line 74 and set 245, 500, 1000, 2000
	   * mdps*/

	  /* scale multiplier and division by 1000 to get the G-format, same with gyro, add pow2 to norms:
	   * (maybe useless, lsm6dsl.c already sets sensitivity levels)*/
	  for (i = 0; i < 3; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8000ef0:	e043      	b.n	8000f7a <main+0x132>
		  acc_values[i] = A[i] / SCALE_MULTIPLIER;
 8000ef2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000efc:	f107 0210 	add.w	r2, r7, #16
 8000f00:	4413      	add	r3, r2
 8000f02:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8000f06:	4a8b      	ldr	r2, [pc, #556]	; (8001134 <main+0x2ec>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	1192      	asrs	r2, r2, #6
 8000f0e:	17db      	asrs	r3, r3, #31
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f26:	f107 0210 	add.w	r2, r7, #16
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b40      	subs	r3, #64	; 0x40
 8000f2e:	edc3 7a00 	vstr	s15, [r3]
		  acc_norm += pow((double) acc_values[i], (double) 2);
 8000f32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f3c:	f107 0210 	add.w	r2, r7, #16
 8000f40:	4413      	add	r3, r2
 8000f42:	3b40      	subs	r3, #64	; 0x40
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff faf6 	bl	8000538 <__aeabi_f2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8001128 <main+0x2e0>
 8000f54:	ec43 2b10 	vmov	d0, r2, r3
 8000f58:	f005 f92c 	bl	80061b4 <pow>
 8000f5c:	ec53 2b10 	vmov	r2, r3, d0
 8000f60:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8000f64:	f7ff f98a 	bl	800027c <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	  for (i = 0; i < 3; i++) {
 8000f70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f74:	3301      	adds	r3, #1
 8000f76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8000f7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	ddb7      	ble.n	8000ef2 <main+0xaa>
	  }
	  for (i = 0; i < 3; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8000f88:	e03d      	b.n	8001006 <main+0x1be>
		  gyro_values[i] = G[i] / SCALE_MULTIPLIER;
 8000f8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000f94:	f107 0210 	add.w	r2, r7, #16
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b28      	subs	r3, #40	; 0x28
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001138 <main+0x2f0>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000fb2:	f107 0210 	add.w	r2, r7, #16
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b34      	subs	r3, #52	; 0x34
 8000fba:	edc3 7a00 	vstr	s15, [r3]
		  gyro_norm += pow((double) gyro_values[i], (double) 2);
 8000fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000fc8:	f107 0210 	add.w	r2, r7, #16
 8000fcc:	4413      	add	r3, r2
 8000fce:	3b34      	subs	r3, #52	; 0x34
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fab0 	bl	8000538 <__aeabi_f2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001128 <main+0x2e0>
 8000fe0:	ec43 2b10 	vmov	d0, r2, r3
 8000fe4:	f005 f8e6 	bl	80061b4 <pow>
 8000fe8:	ec53 2b10 	vmov	r2, r3, d0
 8000fec:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8000ff0:	f7ff f944 	bl	800027c <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	  for (i = 0; i < 3; i++) {
 8000ffc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001000:	3301      	adds	r3, #1
 8001002:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001006:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800100a:	2b02      	cmp	r3, #2
 800100c:	ddbd      	ble.n	8000f8a <main+0x142>
	  }

	  // Write into the buffer:
	  sprintf(stringa, "3d Accelero:\n$%f %f %f;\n3d Gyro:\n$%f %f %f\n", acc_values[0], acc_values[1], acc_values[2],
 800100e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa90 	bl	8000538 <__aeabi_f2d>
 8001018:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800101c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa89 	bl	8000538 <__aeabi_f2d>
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa82 	bl	8000538 <__aeabi_f2d>
 8001034:	4680      	mov	r8, r0
 8001036:	4689      	mov	r9, r1
			  gyro_values[0], gyro_values[1], gyro_values[2]);
 8001038:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
	  sprintf(stringa, "3d Accelero:\n$%f %f %f;\n3d Gyro:\n$%f %f %f\n", acc_values[0], acc_values[1], acc_values[2],
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa7b 	bl	8000538 <__aeabi_f2d>
 8001042:	4682      	mov	sl, r0
 8001044:	468b      	mov	fp, r1
			  gyro_values[0], gyro_values[1], gyro_values[2]);
 8001046:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
	  sprintf(stringa, "3d Accelero:\n$%f %f %f;\n3d Gyro:\n$%f %f %f\n", acc_values[0], acc_values[1], acc_values[2],
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa74 	bl	8000538 <__aeabi_f2d>
 8001050:	e9c7 0100 	strd	r0, r1, [r7]
			  gyro_values[0], gyro_values[1], gyro_values[2]);
 8001054:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
	  sprintf(stringa, "3d Accelero:\n$%f %f %f;\n3d Gyro:\n$%f %f %f\n", acc_values[0], acc_values[1], acc_values[2],
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa6d 	bl	8000538 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	f107 0010 	add.w	r0, r7, #16
 8001066:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800106a:	ed97 7b00 	vldr	d7, [r7]
 800106e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001072:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001076:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800107a:	e9cd 4500 	strd	r4, r5, [sp]
 800107e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001082:	492e      	ldr	r1, [pc, #184]	; (800113c <main+0x2f4>)
 8001084:	f004 fbf2 	bl	800586c <siprintf>

	  // Transmit data to UART (or plotter):
	  HAL_UART_Transmit(&huart1, stringa, sizeof(stringa), 1000);
 8001088:	f107 0110 	add.w	r1, r7, #16
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001094:	4826      	ldr	r0, [pc, #152]	; (8001130 <main+0x2e8>)
 8001096:	f003 feed 	bl	8004e74 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800109a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109e:	f000 ff41 	bl	8001f24 <HAL_Delay>

	  // Get the norm of the vectors to find magnitude:
	  acc_norm = sqrt(acc_norm);
 80010a2:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 80010a6:	f005 f8f5 	bl	8006294 <sqrt>
 80010aa:	ed87 0b76 	vstr	d0, [r7, #472]	; 0x1d8
	  gyro_norm = sqrt(gyro_norm);
 80010ae:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 80010b2:	f005 f8ef 	bl	8006294 <sqrt>
 80010b6:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0

	  // If Norm > threshold, buzz or led:
	  if (acc_norm > THRESHOLD || gyro_norm > THRESHOLD) {
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <main+0x2f8>)
 80010c0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80010c4:	f7ff fd20 	bl	8000b08 <__aeabi_dcmpgt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <main+0x29a>
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <main+0x2f8>)
 80010d4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80010d8:	f7ff fd16 	bl	8000b08 <__aeabi_dcmpgt>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <main+0x2a8>
		  // Soglia superata, accendi il LED
		  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2120      	movs	r1, #32
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f001 f9cb 	bl	8002484 <HAL_GPIO_WritePin>
 80010ee:	e005      	b.n	80010fc <main+0x2b4>
	  } else {
		  // Soglia non superata, spegni il LED
		  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2120      	movs	r1, #32
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f001 f9c4 	bl	8002484 <HAL_GPIO_WritePin>
	  }

	  // Re-init string and norms
	  stringa[0] = 0;
 80010fc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001100:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
	  acc_norm = 0;
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	  gyro_norm = 0;
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001122:	e6d3      	b.n	8000ecc <main+0x84>
 8001124:	f3af 8000 	nop.w
 8001128:	00000000 	.word	0x00000000
 800112c:	40000000 	.word	0x40000000
 8001130:	200000f4 	.word	0x200000f4
 8001134:	10624dd3 	.word	0x10624dd3
 8001138:	447a0000 	.word	0x447a0000
 800113c:	08007098 	.word	0x08007098
 8001140:	40080000 	.word	0x40080000

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	; 0x58
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2244      	movs	r2, #68	; 0x44
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fbaa 	bl	80058ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001166:	f44f 7000 	mov.w	r0, #512	; 0x200
 800116a:	f001 ffd7 	bl	800311c <HAL_PWREx_ControlVoltageScaling>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001174:	f000 f8ec 	bl	8001350 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001178:	2310      	movs	r3, #16
 800117a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001184:	2360      	movs	r3, #96	; 0x60
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	2302      	movs	r3, #2
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800118c:	2301      	movs	r3, #1
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001194:	2328      	movs	r3, #40	; 0x28
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001198:	2307      	movs	r3, #7
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 f855 	bl	8003258 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011b4:	f000 f8cc 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2303      	movs	r3, #3
 80011be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fc1d 	bl	8003a10 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011dc:	f000 f8b8 	bl	8001350 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3758      	adds	r7, #88	; 0x58
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_USART1_UART_Init+0x58>)
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <MX_USART1_UART_Init+0x5c>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_USART1_UART_Init+0x58>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART1_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_USART1_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART1_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART1_UART_Init+0x58>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART1_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART1_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART1_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART1_UART_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART1_UART_Init+0x58>)
 800122c:	f003 fdd4 	bl	8004dd8 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001236:	f000 f88b 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000f4 	.word	0x200000f4
 8001244:	40013800 	.word	0x40013800

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_GPIO_Init+0xd8>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <MX_GPIO_Init+0xd8>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_GPIO_Init+0xd8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_GPIO_Init+0xd8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <MX_GPIO_Init+0xd8>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <MX_GPIO_Init+0xd8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_GPIO_Init+0xd8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <MX_GPIO_Init+0xd8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_GPIO_Init+0xd8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2120      	movs	r1, #32
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f001 f8e9 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b8:	481a      	ldr	r0, [pc, #104]	; (8001324 <MX_GPIO_Init+0xdc>)
 80012ba:	f001 f8e3 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_GPIO_Init+0xe0>)
 80012d6:	f000 ff2b 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012da:	2320      	movs	r3, #32
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f000 ff1c 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_GPIO_Init+0xdc>)
 8001312:	f000 ff0d 	bl	8002130 <HAL_GPIO_Init>

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000800 	.word	0x48000800

0800132c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
	    {
	        // Il timer TIM2 è scattato, il microcontrollore si sveglia da Sleep
	    }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133e:	f000 fdd1 	bl	8001ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012c00 	.word	0x40012c00

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0ac      	sub	sp, #176	; 0xb0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2288      	movs	r2, #136	; 0x88
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 fa71 	bl	80058ac <memset>
  if(huart->Instance==USART1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_UART_MspInit+0xb0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d13a      	bne.n	800144a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d8:	2300      	movs	r3, #0
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fd6b 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013ec:	f7ff ffb0 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_UART_MspInit+0xb4>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_UART_MspInit+0xb4>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6613      	str	r3, [r2, #96]	; 0x60
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_UART_MspInit+0xb4>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_UART_MspInit+0xb4>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_UART_MspInit+0xb4>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_UART_MspInit+0xb4>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_UART_MspInit+0xb8>)
 8001446:	f000 fe73 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	37b0      	adds	r7, #176	; 0xb0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40013800 	.word	0x40013800
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400

08001460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	2019      	movs	r0, #25
 8001476:	f000 fe31 	bl	80020dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800147a:	2019      	movs	r0, #25
 800147c:	f000 fe4a 	bl	8002114 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_InitTick+0x9c>)
 8001482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_InitTick+0x9c>)
 8001486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800148a:	6613      	str	r3, [r2, #96]	; 0x60
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_InitTick+0x9c>)
 800148e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001498:	f107 0210 	add.w	r2, r7, #16
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fc78 	bl	8003d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014a8:	f002 fc60 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 80014ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <HAL_InitTick+0xa0>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0c9b      	lsrs	r3, r3, #18
 80014b8:	3b01      	subs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_InitTick+0xa4>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_InitTick+0xa8>)
 80014c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_InitTick+0xa4>)
 80014c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_InitTick+0xa4>)
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_InitTick+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_InitTick+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <HAL_InitTick+0xa4>)
 80014de:	f003 f9a9 	bl	8004834 <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d104      	bne.n	80014f2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <HAL_InitTick+0xa4>)
 80014ea:	f003 fa05 	bl	80048f8 <HAL_TIM_Base_Start_IT>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3730      	adds	r7, #48	; 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	431bde83 	.word	0x431bde83
 8001504:	20000178 	.word	0x20000178
 8001508:	40012c00 	.word	0x40012c00

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800156a:	f003 fa35 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000178 	.word	0x20000178

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f004 f988 	bl	80058bc <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20018000 	.word	0x20018000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200001c4 	.word	0x200001c4
 80015e0:	20000370 	.word	0x20000370

080015e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopForever+0x2>
 800160c:	f7ff ffea 	bl	80015e4 <SystemInit>
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopForever+0x6>)
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopForever+0xa>)
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopForever+0xe>)
 8001616:	2300      	movs	r3, #0
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:
 800161a:	58d4      	ldr	r4, [r2, r3]
 800161c:	50c4      	str	r4, [r0, r3]
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:
 8001620:	18c4      	adds	r4, r0, r3
 8001622:	428c      	cmp	r4, r1
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopForever+0x12>)
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopForever+0x16>)
 800162a:	2300      	movs	r3, #0
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:
 8001632:	42a2      	cmp	r2, r4
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>
 8001636:	f004 f947 	bl	80058c8 <__libc_init_array>
 800163a:	f7ff fc05 	bl	8000e48 <main>

0800163e <LoopForever>:
 800163e:	e7fe      	b.n	800163e <LoopForever>
 8001640:	20018000 	.word	0x20018000
 8001644:	20000000 	.word	0x20000000
 8001648:	200000d8 	.word	0x200000d8
 800164c:	08007180 	.word	0x08007180
 8001650:	200000d8 	.word	0x200000d8
 8001654:	20000370 	.word	0x20000370

08001658 <ADC1_2_IRQHandler>:
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <I2Cx_MspInit+0xa8>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <I2Cx_MspInit+0xa8>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <I2Cx_MspInit+0xa8>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800167c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001680:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800168e:	2304      	movs	r3, #4
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	481b      	ldr	r0, [pc, #108]	; (8001708 <I2Cx_MspInit+0xac>)
 800169a:	f000 fd49 	bl	8002130 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4818      	ldr	r0, [pc, #96]	; (8001708 <I2Cx_MspInit+0xac>)
 80016a6:	f000 fd43 	bl	8002130 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <I2Cx_MspInit+0xa8>)
 80016d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	210f      	movs	r1, #15
 80016de:	2021      	movs	r0, #33	; 0x21
 80016e0:	f000 fcfc 	bl	80020dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80016e4:	2021      	movs	r0, #33	; 0x21
 80016e6:	f000 fd15 	bl	8002114 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	210f      	movs	r1, #15
 80016ee:	2022      	movs	r0, #34	; 0x22
 80016f0:	f000 fcf4 	bl	80020dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80016f4:	2022      	movs	r0, #34	; 0x22
 80016f6:	f000 fd0d 	bl	8002114 <HAL_NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	48000400 	.word	0x48000400

0800170c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <I2Cx_Init+0x54>)
 8001718:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a11      	ldr	r2, [pc, #68]	; (8001764 <I2Cx_Init+0x58>)
 800171e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff89 	bl	800165c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 feb2 	bl	80024b4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001750:	2100      	movs	r1, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f001 fc54 	bl	8003000 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005800 	.word	0x40005800
 8001764:	00702681 	.word	0x00702681

08001768 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af04      	add	r7, sp, #16
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	72fb      	strb	r3, [r7, #11]
 800177a:	460b      	mov	r3, r1
 800177c:	813b      	strh	r3, [r7, #8]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	b299      	uxth	r1, r3
 800178a:	88f8      	ldrh	r0, [r7, #6]
 800178c:	893a      	ldrh	r2, [r7, #8]
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4603      	mov	r3, r0
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f001 f86e 	bl	8002880 <HAL_I2C_Mem_Read>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	4619      	mov	r1, r3
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f832 	bl	800181c <I2Cx_Error>
  }
  return status;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b08a      	sub	sp, #40	; 0x28
 80017c6:	af04      	add	r7, sp, #16
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	4608      	mov	r0, r1
 80017cc:	4611      	mov	r1, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	72fb      	strb	r3, [r7, #11]
 80017d4:	460b      	mov	r3, r1
 80017d6:	813b      	strh	r3, [r7, #8]
 80017d8:	4613      	mov	r3, r2
 80017da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	b299      	uxth	r1, r3
 80017e4:	88f8      	ldrh	r0, [r7, #6]
 80017e6:	893a      	ldrh	r2, [r7, #8]
 80017e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4603      	mov	r3, r0
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 ff2d 	bl	8002658 <HAL_I2C_Mem_Write>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	4619      	mov	r1, r3
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f805 	bl	800181c <I2Cx_Error>
  }
  return status;
 8001812:	7dfb      	ldrb	r3, [r7, #23]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fed2 	bl	80025d2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff6c 	bl	800170c <I2Cx_Init>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <SENSOR_IO_Init+0x10>)
 8001842:	f7ff ff63 	bl	800170c <I2Cx_Init>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200001c8 	.word	0x200001c8

08001850 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af02      	add	r7, sp, #8
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	460b      	mov	r3, r1
 800185c:	71bb      	strb	r3, [r7, #6]
 800185e:	4613      	mov	r3, r2
 8001860:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	b29a      	uxth	r2, r3
 8001866:	79f9      	ldrb	r1, [r7, #7]
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	1d7b      	adds	r3, r7, #5
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <SENSOR_IO_Write+0x30>)
 8001874:	f7ff ffa5 	bl	80017c2 <I2Cx_WriteMultiple>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200001c8 	.word	0x200001c8

08001884 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	b29a      	uxth	r2, r3
 800189c:	79f9      	ldrb	r1, [r7, #7]
 800189e:	2301      	movs	r3, #1
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f107 030f 	add.w	r3, r7, #15
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	4804      	ldr	r0, [pc, #16]	; (80018bc <SENSOR_IO_Read+0x38>)
 80018ac:	f7ff ff5c 	bl	8001768 <I2Cx_ReadMultiple>

  return read_value;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001c8 	.word	0x200001c8

080018c0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	603a      	str	r2, [r7, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	460b      	mov	r3, r1
 80018d0:	71bb      	strb	r3, [r7, #6]
 80018d2:	4613      	mov	r3, r2
 80018d4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	79f9      	ldrb	r1, [r7, #7]
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <SENSOR_IO_ReadMultiple+0x38>)
 80018e8:	f7ff ff3e 	bl	8001768 <I2Cx_ReadMultiple>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b29b      	uxth	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200001c8 	.word	0x200001c8

080018fc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001906:	2300      	movs	r3, #0
 8001908:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <BSP_ACCELERO_Init+0x74>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4798      	blx	r3
 8001910:	4603      	mov	r3, r0
 8001912:	2b6a      	cmp	r3, #106	; 0x6a
 8001914:	d002      	beq.n	800191c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e024      	b.n	8001966 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <BSP_ACCELERO_Init+0x78>)
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <BSP_ACCELERO_Init+0x74>)
 8001920:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001922:	2330      	movs	r3, #48	; 0x30
 8001924:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800192a:	2300      	movs	r3, #0
 800192c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800192e:	2340      	movs	r3, #64	; 0x40
 8001930:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800193a:	797a      	ldrb	r2, [r7, #5]
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	4313      	orrs	r3, r2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001944:	7a3b      	ldrb	r3, [r7, #8]
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	b2db      	uxtb	r3, r3
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21a      	sxth	r2, r3
 8001950:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	b21b      	sxth	r3, r3
 8001958:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <BSP_ACCELERO_Init+0x78>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	89ba      	ldrh	r2, [r7, #12]
 8001962:	4610      	mov	r0, r2
 8001964:	4798      	blx	r3
  }  

  return ret;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000004 	.word	0x20000004
 8001974:	2000021c 	.word	0x2000021c

08001978 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
    }
  }
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000021c 	.word	0x2000021c

080019a8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80019b2:	2300      	movs	r3, #0
 80019b4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <BSP_GYRO_Init+0x7c>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4798      	blx	r3
 80019bc:	4603      	mov	r3, r0
 80019be:	2b6a      	cmp	r3, #106	; 0x6a
 80019c0:	d002      	beq.n	80019c8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e028      	b.n	8001a1a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <BSP_GYRO_Init+0x80>)
 80019ca:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <BSP_GYRO_Init+0x7c>)
 80019cc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80019d2:	2330      	movs	r3, #48	; 0x30
 80019d4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80019e6:	230c      	movs	r3, #12
 80019e8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80019ea:	7aba      	ldrb	r2, [r7, #10]
 80019ec:	797b      	ldrb	r3, [r7, #5]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80019f4:	7a3b      	ldrb	r3, [r7, #8]
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <BSP_GYRO_Init+0x80>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	89ba      	ldrh	r2, [r7, #12]
 8001a12:	4610      	mov	r0, r2
 8001a14:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000038 	.word	0x20000038
 8001a28:	20000220 	.word	0x20000220

08001a2c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <BSP_GYRO_GetXYZ+0x2c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <BSP_GYRO_GetXYZ+0x2c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <BSP_GYRO_GetXYZ+0x2c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
    }
  }
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000220 	.word	0x20000220

08001a5c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	20d4      	movs	r0, #212	; 0xd4
 8001a6e:	f7ff ff09 	bl	8001884 <SENSOR_IO_Read>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001a82:	7bba      	ldrb	r2, [r7, #14]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2110      	movs	r1, #16
 8001a90:	20d4      	movs	r0, #212	; 0xd4
 8001a92:	f7ff fedd 	bl	8001850 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001a96:	2112      	movs	r1, #18
 8001a98:	20d4      	movs	r0, #212	; 0xd4
 8001a9a:	f7ff fef3 	bl	8001884 <SENSOR_IO_Read>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001ab0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001ab2:	7bba      	ldrb	r2, [r7, #14]
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	461a      	mov	r2, r3
 8001abe:	2112      	movs	r1, #18
 8001ac0:	20d4      	movs	r0, #212	; 0xd4
 8001ac2:	f7ff fec5 	bl	8001850 <SENSOR_IO_Write>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ad8:	2110      	movs	r1, #16
 8001ada:	20d4      	movs	r0, #212	; 0xd4
 8001adc:	f7ff fed2 	bl	8001884 <SENSOR_IO_Read>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	461a      	mov	r2, r3
 8001af0:	2110      	movs	r1, #16
 8001af2:	20d4      	movs	r0, #212	; 0xd4
 8001af4:	f7ff feac 	bl	8001850 <SENSOR_IO_Write>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001b04:	f7ff fe9a 	bl	800183c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001b08:	210f      	movs	r1, #15
 8001b0a:	20d4      	movs	r0, #212	; 0xd4
 8001b0c:	f7ff feba 	bl	8001884 <SENSOR_IO_Read>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001b24:	2115      	movs	r1, #21
 8001b26:	20d4      	movs	r0, #212	; 0xd4
 8001b28:	f7ff feac 	bl	8001884 <SENSOR_IO_Read>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f023 0310 	bic.w	r3, r3, #16
 8001b36:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2115      	movs	r1, #21
 8001b4c:	20d4      	movs	r0, #212	; 0xd4
 8001b4e:	f7ff fe7f 	bl	8001850 <SENSOR_IO_Write>
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b72:	2110      	movs	r1, #16
 8001b74:	20d4      	movs	r0, #212	; 0xd4
 8001b76:	f7ff fe85 	bl	8001884 <SENSOR_IO_Read>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001b7e:	f107 0208 	add.w	r2, r7, #8
 8001b82:	2306      	movs	r3, #6
 8001b84:	2128      	movs	r1, #40	; 0x28
 8001b86:	20d4      	movs	r0, #212	; 0xd4
 8001b88:	f7ff fe9a 	bl	80018c0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	77fb      	strb	r3, [r7, #31]
 8001b90:	e01c      	b.n	8001bcc <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3301      	adds	r3, #1
 8001b98:	3320      	adds	r3, #32
 8001b9a:	443b      	add	r3, r7
 8001b9c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	3320      	adds	r3, #32
 8001bac:	443b      	add	r3, r7
 8001bae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	b212      	sxth	r2, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3320      	adds	r3, #32
 8001bc0:	443b      	add	r3, r7
 8001bc2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	77fb      	strb	r3, [r7, #31]
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d9df      	bls.n	8001b92 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d829      	bhi.n	8001c30 <LSM6DSL_AccReadXYZ+0xd4>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <LSM6DSL_AccReadXYZ+0x88>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c19 	.word	0x08001c19
 8001be8:	08001c31 	.word	0x08001c31
 8001bec:	08001c31 	.word	0x08001c31
 8001bf0:	08001c31 	.word	0x08001c31
 8001bf4:	08001c2b 	.word	0x08001c2b
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c31 	.word	0x08001c31
 8001c00:	08001c31 	.word	0x08001c31
 8001c04:	08001c1f 	.word	0x08001c1f
 8001c08:	08001c31 	.word	0x08001c31
 8001c0c:	08001c31 	.word	0x08001c31
 8001c10:	08001c31 	.word	0x08001c31
 8001c14:	08001c25 	.word	0x08001c25
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <LSM6DSL_AccReadXYZ+0x120>)
 8001c1a:	61bb      	str	r3, [r7, #24]
    break;
 8001c1c:	e008      	b.n	8001c30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <LSM6DSL_AccReadXYZ+0x124>)
 8001c20:	61bb      	str	r3, [r7, #24]
    break;
 8001c22:	e005      	b.n	8001c30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <LSM6DSL_AccReadXYZ+0x128>)
 8001c26:	61bb      	str	r3, [r7, #24]
    break;
 8001c28:	e002      	b.n	8001c30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <LSM6DSL_AccReadXYZ+0x12c>)
 8001c2c:	61bb      	str	r3, [r7, #24]
    break;    
 8001c2e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	77fb      	strb	r3, [r7, #31]
 8001c34:	e01a      	b.n	8001c6c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	3320      	adds	r3, #32
 8001c3c:	443b      	add	r3, r7
 8001c3e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5e:	ee17 2a90 	vmov	r2, s15
 8001c62:	b212      	sxth	r2, r2
 8001c64:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	77fb      	strb	r3, [r7, #31]
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d9e1      	bls.n	8001c36 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	3d79db23 	.word	0x3d79db23
 8001c80:	3df9db23 	.word	0x3df9db23
 8001c84:	3e79db23 	.word	0x3e79db23
 8001c88:	3ef9db23 	.word	0x3ef9db23

08001c8c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001c9a:	2111      	movs	r1, #17
 8001c9c:	20d4      	movs	r0, #212	; 0xd4
 8001c9e:	f7ff fdf1 	bl	8001884 <SENSOR_IO_Read>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001caa:	7bbb      	ldrb	r3, [r7, #14]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001cb2:	7bba      	ldrb	r2, [r7, #14]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2111      	movs	r1, #17
 8001cc0:	20d4      	movs	r0, #212	; 0xd4
 8001cc2:	f7ff fdc5 	bl	8001850 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001cc6:	2112      	movs	r1, #18
 8001cc8:	20d4      	movs	r0, #212	; 0xd4
 8001cca:	f7ff fddb 	bl	8001884 <SENSOR_IO_Read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001ce0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001ce2:	7bba      	ldrb	r2, [r7, #14]
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2112      	movs	r1, #18
 8001cf0:	20d4      	movs	r0, #212	; 0xd4
 8001cf2:	f7ff fdad 	bl	8001850 <SENSOR_IO_Write>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001d08:	2111      	movs	r1, #17
 8001d0a:	20d4      	movs	r0, #212	; 0xd4
 8001d0c:	f7ff fdba 	bl	8001884 <SENSOR_IO_Read>
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2111      	movs	r1, #17
 8001d22:	20d4      	movs	r0, #212	; 0xd4
 8001d24:	f7ff fd94 	bl	8001850 <SENSOR_IO_Write>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001d34:	f7ff fd82 	bl	800183c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001d38:	210f      	movs	r1, #15
 8001d3a:	20d4      	movs	r0, #212	; 0xd4
 8001d3c:	f7ff fda2 	bl	8001884 <SENSOR_IO_Read>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001d54:	2116      	movs	r1, #22
 8001d56:	20d4      	movs	r0, #212	; 0xd4
 8001d58:	f7ff fd94 	bl	8001884 <SENSOR_IO_Read>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d66:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d74:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2116      	movs	r1, #22
 8001d7c:	20d4      	movs	r0, #212	; 0xd4
 8001d7e:	f7ff fd67 	bl	8001850 <SENSOR_IO_Write>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001da2:	2111      	movs	r1, #17
 8001da4:	20d4      	movs	r0, #212	; 0xd4
 8001da6:	f7ff fd6d 	bl	8001884 <SENSOR_IO_Read>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001dae:	f107 0208 	add.w	r2, r7, #8
 8001db2:	2306      	movs	r3, #6
 8001db4:	2122      	movs	r1, #34	; 0x22
 8001db6:	20d4      	movs	r0, #212	; 0xd4
 8001db8:	f7ff fd82 	bl	80018c0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
 8001dc0:	e01c      	b.n	8001dfc <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	3320      	adds	r3, #32
 8001dca:	443b      	add	r3, r7
 8001dcc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	3320      	adds	r3, #32
 8001ddc:	443b      	add	r3, r7
 8001dde:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	7ffb      	ldrb	r3, [r7, #31]
 8001dea:	b212      	sxth	r2, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	3320      	adds	r3, #32
 8001df0:	443b      	add	r3, r7
 8001df2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	77fb      	strb	r3, [r7, #31]
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d9df      	bls.n	8001dc2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d829      	bhi.n	8001e60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001e0c:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e49 	.word	0x08001e49
 8001e18:	08001e61 	.word	0x08001e61
 8001e1c:	08001e61 	.word	0x08001e61
 8001e20:	08001e61 	.word	0x08001e61
 8001e24:	08001e4f 	.word	0x08001e4f
 8001e28:	08001e61 	.word	0x08001e61
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e61 	.word	0x08001e61
 8001e34:	08001e55 	.word	0x08001e55
 8001e38:	08001e61 	.word	0x08001e61
 8001e3c:	08001e61 	.word	0x08001e61
 8001e40:	08001e61 	.word	0x08001e61
 8001e44:	08001e5b 	.word	0x08001e5b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001e4a:	61bb      	str	r3, [r7, #24]
    break;
 8001e4c:	e008      	b.n	8001e60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001e50:	61bb      	str	r3, [r7, #24]
    break;
 8001e52:	e005      	b.n	8001e60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001e56:	61bb      	str	r3, [r7, #24]
    break;
 8001e58:	e002      	b.n	8001e60 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001e5c:	61bb      	str	r3, [r7, #24]
    break;    
 8001e5e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	77fb      	strb	r3, [r7, #31]
 8001e64:	e016      	b.n	8001e94 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001e8e:	7ffb      	ldrb	r3, [r7, #31]
 8001e90:	3301      	adds	r3, #1
 8001e92:	77fb      	strb	r3, [r7, #31]
 8001e94:	7ffb      	ldrb	r3, [r7, #31]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d9e5      	bls.n	8001e66 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	410c0000 	.word	0x410c0000
 8001ea8:	418c0000 	.word	0x418c0000
 8001eac:	420c0000 	.word	0x420c0000
 8001eb0:	428c0000 	.word	0x428c0000

08001eb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f000 f901 	bl	80020c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec4:	200f      	movs	r0, #15
 8001ec6:	f7ff facb 	bl	8001460 <HAL_InitTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	e001      	b.n	8001eda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed6:	f7ff fa41 	bl	800135c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eda:	79fb      	ldrb	r3, [r7, #7]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000070 	.word	0x20000070
 8001f08:	20000224 	.word	0x20000224

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000224 	.word	0x20000224

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000070 	.word	0x20000070

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff4c 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ee:	f7ff ff61 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 80020f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7ff ffb1 	bl	8002060 <NVIC_EncodePriority>
 80020fe:	4602      	mov	r2, r0
 8002100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff80 	bl	800200c <__NVIC_SetPriority>
}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff54 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e17f      	b.n	8002440 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8171 	beq.w	800243a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_Init+0x40>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d130      	bne.n	80021d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a6:	2201      	movs	r2, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0201 	and.w	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d118      	bne.n	8002210 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80ac 	beq.w	800243a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_GPIO_Init+0x330>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	4a5e      	ldr	r2, [pc, #376]	; (8002460 <HAL_GPIO_Init+0x330>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6613      	str	r3, [r2, #96]	; 0x60
 80022ee:	4b5c      	ldr	r3, [pc, #368]	; (8002460 <HAL_GPIO_Init+0x330>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022fa:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_GPIO_Init+0x334>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x242>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x338>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x23e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_GPIO_Init+0x33c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x23a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_GPIO_Init+0x340>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x236>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_GPIO_Init+0x344>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x232>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_GPIO_Init+0x348>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x22e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_GPIO_Init+0x34c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x22a>
 8002356:	2306      	movs	r3, #6
 8002358:	e00c      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800235a:	2307      	movs	r3, #7
 800235c:	e00a      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800235e:	2305      	movs	r3, #5
 8002360:	e008      	b.n	8002374 <HAL_GPIO_Init+0x244>
 8002362:	2304      	movs	r3, #4
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x244>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x244>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x244>
 8002372:	2300      	movs	r3, #0
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	f002 0203 	and.w	r2, r2, #3
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4093      	lsls	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002384:	4937      	ldr	r1, [pc, #220]	; (8002464 <HAL_GPIO_Init+0x334>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_GPIO_Init+0x350>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e0:	4a27      	ldr	r2, [pc, #156]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_GPIO_Init+0x350>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_GPIO_Init+0x350>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_GPIO_Init+0x350>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_GPIO_Init+0x350>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f47f ae78 	bne.w	8002140 <HAL_GPIO_Init+0x10>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	48000400 	.word	0x48000400
 800246c:	48000800 	.word	0x48000800
 8002470:	48000c00 	.word	0x48000c00
 8002474:	48001000 	.word	0x48001000
 8002478:	48001400 	.word	0x48001400
 800247c:	48001800 	.word	0x48001800
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e081      	b.n	80025ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8a8 	bl	8002630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002504:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002514:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e006      	b.n	800253c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800253a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d104      	bne.n	800254e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800255c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002560:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69d9      	ldr	r1, [r3, #28]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1a      	ldr	r2, [r3, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e021      	b.n	8002628 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f821 	bl	8002644 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b20      	cmp	r3, #32
 800267c:	f040 80f9 	bne.w	8002872 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_I2C_Mem_Write+0x34>
 8002686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0ed      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Mem_Write+0x4e>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e0e6      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ae:	f7ff fc2d 	bl	8001f0c <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2319      	movs	r3, #25
 80026ba:	2201      	movs	r2, #1
 80026bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fac3 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d1      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f8:	88f8      	ldrh	r0, [r7, #6]
 80026fa:	893a      	ldrh	r2, [r7, #8]
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4603      	mov	r3, r0
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f9d3 	bl	8002ab4 <I2C_RequestMemoryWrite>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0a9      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2bff      	cmp	r3, #255	; 0xff
 8002728:	d90e      	bls.n	8002748 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	b2da      	uxtb	r2, r3
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fc2b 	bl	8002f9c <I2C_TransferConfig>
 8002746:	e00f      	b.n	8002768 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	b2da      	uxtb	r2, r3
 8002758:	8979      	ldrh	r1, [r7, #10]
 800275a:	2300      	movs	r3, #0
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fc1a 	bl	8002f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 faad 	bl	8002ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e07b      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d034      	beq.n	8002820 <HAL_I2C_Mem_Write+0x1c8>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d130      	bne.n	8002820 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fa3f 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e04d      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2bff      	cmp	r3, #255	; 0xff
 80027e0:	d90e      	bls.n	8002800 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	22ff      	movs	r2, #255	; 0xff
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fbcf 	bl	8002f9c <I2C_TransferConfig>
 80027fe:	e00f      	b.n	8002820 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	b2da      	uxtb	r2, r3
 8002810:	8979      	ldrh	r1, [r7, #10]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fbbe 	bl	8002f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d19e      	bne.n	8002768 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fa8c 	bl	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01a      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_I2C_Mem_Write+0x224>)
 8002852:	400b      	ands	r3, r1
 8002854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	fe00e800 	.word	0xfe00e800

08002880 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	f040 80fd 	bne.w	8002aa2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_I2C_Mem_Read+0x34>
 80028ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0f1      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Mem_Read+0x4e>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e0ea      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028d6:	f7ff fb19 	bl	8001f0c <HAL_GetTick>
 80028da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2319      	movs	r3, #25
 80028e2:	2201      	movs	r2, #1
 80028e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f9af 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d5      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2222      	movs	r2, #34	; 0x22
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2240      	movs	r2, #64	; 0x40
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002920:	88f8      	ldrh	r0, [r7, #6]
 8002922:	893a      	ldrh	r2, [r7, #8]
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4603      	mov	r3, r0
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f913 	bl	8002b5c <I2C_RequestMemoryRead>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0ad      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d90e      	bls.n	8002970 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	b2da      	uxtb	r2, r3
 800295e:	8979      	ldrh	r1, [r7, #10]
 8002960:	4b52      	ldr	r3, [pc, #328]	; (8002aac <HAL_I2C_Mem_Read+0x22c>)
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fb17 	bl	8002f9c <I2C_TransferConfig>
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	b2da      	uxtb	r2, r3
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <HAL_I2C_Mem_Read+0x22c>)
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fb06 	bl	8002f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	2200      	movs	r2, #0
 8002998:	2104      	movs	r1, #4
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f956 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07c      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d034      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x1d0>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d130      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f927 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04d      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d90e      	bls.n	8002a30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fab7 	bl	8002f9c <I2C_TransferConfig>
 8002a2e:	e00f      	b.n	8002a50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 faa6 	bl	8002f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d19a      	bne.n	8002990 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f974 	bl	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e01a      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2220      	movs	r2, #32
 8002a74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_I2C_Mem_Read+0x230>)
 8002a82:	400b      	ands	r3, r1
 8002a84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	80002400 	.word	0x80002400
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <I2C_RequestMemoryWrite+0xa4>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fa5d 	bl	8002f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	69b9      	ldr	r1, [r7, #24]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f8f0 	bl	8002ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e02c      	b.n	8002b50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002afc:	893b      	ldrh	r3, [r7, #8]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
 8002b06:	e015      	b.n	8002b34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b08:	893b      	ldrh	r3, [r7, #8]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f8d6 	bl	8002ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e012      	b.n	8002b50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2a:	893b      	ldrh	r3, [r7, #8]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f884 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	80002000 	.word	0x80002000

08002b5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	8979      	ldrh	r1, [r7, #10]
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <I2C_RequestMemoryRead+0xa4>)
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fa0a 	bl	8002f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f89d 	bl	8002ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e02c      	b.n	8002bf6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba2:	893b      	ldrh	r3, [r7, #8]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bac:	e015      	b.n	8002bda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bae:	893b      	ldrh	r3, [r7, #8]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f883 	bl	8002ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e012      	b.n	8002bf6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd0:	893b      	ldrh	r3, [r7, #8]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f831 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	80002000 	.word	0x80002000

08002c04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d103      	bne.n	8002c22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d007      	beq.n	8002c40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	619a      	str	r2, [r3, #24]
  }
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5c:	e022      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d01e      	beq.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c66:	f7ff f951 	bl	8001f0c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d302      	bcc.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d113      	bne.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e00f      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4013      	ands	r3, r2
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d0cd      	beq.n	8002c5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd8:	e02c      	b.n	8002d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f870 	bl	8002dc4 <I2C_IsErrorOccurred>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02a      	b.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d01e      	beq.n	8002d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7ff f909 	bl	8001f0c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d113      	bne.n	8002d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e007      	b.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d1cb      	bne.n	8002cda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d58:	e028      	b.n	8002dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f830 	bl	8002dc4 <I2C_IsErrorOccurred>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e026      	b.n	8002dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7ff f8cd 	bl	8001f0c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d113      	bne.n	8002dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d1cf      	bne.n	8002d5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d075      	beq.n	8002edc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df8:	e056      	b.n	8002ea8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d052      	beq.n	8002ea8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7ff f883 	bl	8001f0c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_IsErrorOccurred+0x54>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d147      	bne.n	8002ea8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3a:	d12e      	bne.n	8002e9a <I2C_IsErrorOccurred+0xd6>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e42:	d02a      	beq.n	8002e9a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d027      	beq.n	8002e9a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e5a:	f7ff f857 	bl	8001f0c <HAL_GetTick>
 8002e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e60:	e01b      	b.n	8002e9a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e62:	f7ff f853 	bl	8001f0c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b19      	cmp	r3, #25
 8002e6e:	d914      	bls.n	8002e9a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d1dc      	bne.n	8002e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d003      	beq.n	8002ebe <I2C_IsErrorOccurred+0xfa>
 8002eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d09d      	beq.n	8002dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	f043 0308 	orr.w	r3, r3, #8
 8002f16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fe56 	bl	8002c04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <I2C_IsErrorOccurred+0x1d4>)
 8002f64:	400b      	ands	r3, r1
 8002f66:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	fe00e800 	.word	0xfe00e800

08002f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	4613      	mov	r3, r2
 8002fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb4:	7a7b      	ldrb	r3, [r7, #9]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	0d5b      	lsrs	r3, r3, #21
 8002fd6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <I2C_TransferConfig+0x60>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	ea02 0103 	and.w	r1, r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	03ff63ff 	.word	0x03ff63ff

08003000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	d138      	bne.n	8003088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003020:	2302      	movs	r3, #2
 8003022:	e032      	b.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_PWR_EnterSLEEPMode+0x60>)
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b6:	d10e      	bne.n	80030d6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80030b8:	f000 f896 	bl	80031e8 <HAL_PWREx_DisableLowPowerRunMode>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80030c2:	e016      	b.n	80030f2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_PWR_EnterSLEEPMode+0x60>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d0:	d001      	beq.n	80030d6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80030d2:	f000 f879 	bl	80031c8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_PWR_EnterSLEEPMode+0x64>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <HAL_PWR_EnterSLEEPMode+0x64>)
 80030dc:	f023 0304 	bic.w	r3, r3, #4
 80030e0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80030e8:	bf30      	wfi
 80030ea:	e002      	b.n	80030f2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80030ec:	bf40      	sev
    __WFE();
 80030ee:	bf20      	wfe
    __WFE();
 80030f0:	bf20      	wfe
  }

}
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40007000 	.word	0x40007000
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_PWREx_GetVoltageRange+0x18>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000

0800311c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312a:	d130      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003138:	d038      	beq.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2232      	movs	r2, #50	; 0x32
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9b      	lsrs	r3, r3, #18
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003160:	e002      	b.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3b01      	subs	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	d102      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f2      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003188:	d110      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d007      	beq.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031a4:	4a05      	ldr	r2, [pc, #20]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40007000 	.word	0x40007000
 80031c0:	20000000 	.word	0x20000000
 80031c4:	431bde83 	.word	0x431bde83

080031c8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80031d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40007000 	.word	0x40007000

080031e8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80031f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2232      	movs	r2, #50	; 0x32
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0c9b      	lsrs	r3, r3, #18
 800320c:	3301      	adds	r3, #1
 800320e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003210:	e002      	b.n	8003218 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3b01      	subs	r3, #1
 8003216:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003224:	d102      	bne.n	800322c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f2      	bne.n	8003212 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003238:	d101      	bne.n	800323e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e000      	b.n	8003240 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40007000 	.word	0x40007000
 8003250:	20000000 	.word	0x20000000
 8003254:	431bde83 	.word	0x431bde83

08003258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e3ca      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326a:	4b97      	ldr	r3, [pc, #604]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003274:	4b94      	ldr	r3, [pc, #592]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80e4 	beq.w	8003454 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_RCC_OscConfig+0x4a>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	f040 808b 	bne.w	80033b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b01      	cmp	r3, #1
 800329e:	f040 8087 	bne.w	80033b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x62>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e3a2      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	4b82      	ldr	r3, [pc, #520]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_RCC_OscConfig+0x7c>
 80032ca:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d2:	e005      	b.n	80032e0 <HAL_RCC_OscConfig+0x88>
 80032d4:	4b7c      	ldr	r3, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d223      	bcs.n	800332c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fd87 	bl	8003dfc <RCC_SetFlashLatencyFromMSIRange>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e383      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f8:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	496d      	ldr	r1, [pc, #436]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003316:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	4968      	ldr	r1, [pc, #416]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 800332a:	e025      	b.n	8003378 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800332c:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a65      	ldr	r2, [pc, #404]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003332:	f043 0308 	orr.w	r3, r3, #8
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4960      	ldr	r1, [pc, #384]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800334a:	4b5f      	ldr	r3, [pc, #380]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	495b      	ldr	r1, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fd47 	bl	8003dfc <RCC_SetFlashLatencyFromMSIRange>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e343      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003378:	f000 fc4a 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	4950      	ldr	r1, [pc, #320]	; (80034cc <HAL_RCC_OscConfig+0x274>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	4a4e      	ldr	r2, [pc, #312]	; (80034d0 <HAL_RCC_OscConfig+0x278>)
 8003396:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003398:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <HAL_RCC_OscConfig+0x27c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe f85f 	bl	8001460 <HAL_InitTick>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d052      	beq.n	8003452 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	e327      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d032      	beq.n	800341e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033b8:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a42      	ldr	r2, [pc, #264]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fda2 	bl	8001f0c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033cc:	f7fe fd9e 	bl	8001f0c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e310      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033de:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a36      	ldr	r2, [pc, #216]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4931      	ldr	r1, [pc, #196]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003408:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	492c      	ldr	r1, [pc, #176]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
 800341c:	e01a      	b.n	8003454 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800342a:	f7fe fd6f 	bl	8001f0c <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003432:	f7fe fd6b 	bl	8001f0c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e2dd      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003444:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x1da>
 8003450:	e000      	b.n	8003454 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003452:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d074      	beq.n	800354a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b08      	cmp	r3, #8
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x21a>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d10e      	bne.n	800348a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d10b      	bne.n	800348a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d064      	beq.n	8003548 <HAL_RCC_OscConfig+0x2f0>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d160      	bne.n	8003548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e2ba      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x24a>
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0b      	ldr	r2, [pc, #44]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e026      	b.n	80034f0 <HAL_RCC_OscConfig+0x298>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034aa:	d115      	bne.n	80034d8 <HAL_RCC_OscConfig+0x280>
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80034b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a02      	ldr	r2, [pc, #8]	; (80034c8 <HAL_RCC_OscConfig+0x270>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e014      	b.n	80034f0 <HAL_RCC_OscConfig+0x298>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	080070c4 	.word	0x080070c4
 80034d0:	20000000 	.word	0x20000000
 80034d4:	2000006c 	.word	0x2000006c
 80034d8:	4ba0      	ldr	r3, [pc, #640]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a9f      	ldr	r2, [pc, #636]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b9d      	ldr	r3, [pc, #628]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a9c      	ldr	r2, [pc, #624]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fd08 	bl	8001f0c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe fd04 	bl	8001f0c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e276      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003512:	4b92      	ldr	r3, [pc, #584]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x2a8>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fcf4 	bl	8001f0c <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe fcf0 	bl	8001f0c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e262      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x2d0>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d060      	beq.n	8003618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d005      	beq.n	8003568 <HAL_RCC_OscConfig+0x310>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d119      	bne.n	8003596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d116      	bne.n	8003596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003568:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_OscConfig+0x328>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e23f      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	4973      	ldr	r1, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	e040      	b.n	8003618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d023      	beq.n	80035e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359e:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fe fcaf 	bl	8001f0c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fe fcab 	bl	8001f0c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e21d      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c4:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b62      	ldr	r3, [pc, #392]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	495f      	ldr	r1, [pc, #380]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
 80035e4:	e018      	b.n	8003618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a5c      	ldr	r2, [pc, #368]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80035ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7fe fc8b 	bl	8001f0c <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fe fc87 	bl	8001f0c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1f9      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d03c      	beq.n	800369e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01c      	beq.n	8003666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362c:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800362e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003632:	4a4a      	ldr	r2, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fc66 	bl	8001f0c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003644:	f7fe fc62 	bl	8001f0c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1d4      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ef      	beq.n	8003644 <HAL_RCC_OscConfig+0x3ec>
 8003664:	e01b      	b.n	800369e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fe fc49 	bl	8001f0c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367e:	f7fe fc45 	bl	8001f0c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e1b7      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ef      	bne.n	800367e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	6593      	str	r3, [r2, #88]	; 0x58
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_OscConfig+0x504>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_RCC_OscConfig+0x508>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d118      	bne.n	8003716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_OscConfig+0x508>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_RCC_OscConfig+0x508>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f0:	f7fe fc0c 	bl	8001f0c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f8:	f7fe fc08 	bl	8001f0c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e17a      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x508>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_RCC_OscConfig+0x4d8>
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a0d      	ldr	r2, [pc, #52]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800372e:	e029      	b.n	8003784 <HAL_RCC_OscConfig+0x52c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d115      	bne.n	8003764 <HAL_RCC_OscConfig+0x50c>
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <HAL_RCC_OscConfig+0x504>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	4a03      	ldr	r2, [pc, #12]	; (800375c <HAL_RCC_OscConfig+0x504>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003758:	e014      	b.n	8003784 <HAL_RCC_OscConfig+0x52c>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	40007000 	.word	0x40007000
 8003764:	4b9c      	ldr	r3, [pc, #624]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a9b      	ldr	r2, [pc, #620]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003774:	4b98      	ldr	r3, [pc, #608]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	4a97      	ldr	r2, [pc, #604]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fe fbbe 	bl	8001f0c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fe fbba 	bl	8001f0c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e12a      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ed      	beq.n	8003794 <HAL_RCC_OscConfig+0x53c>
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fe fba7 	bl	8001f0c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe fba3 	bl	8001f0c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e113      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d8:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ed      	bne.n	80037c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d105      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ec:	4b7a      	ldr	r3, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	4a79      	ldr	r2, [pc, #484]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80fe 	beq.w	80039fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	2b02      	cmp	r3, #2
 8003808:	f040 80d0 	bne.w	80039ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800380c:	4b72      	ldr	r3, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	429a      	cmp	r2, r3
 800381e:	d130      	bne.n	8003882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	3b01      	subs	r3, #1
 800382c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d127      	bne.n	8003882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d11f      	bne.n	8003882 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800384c:	2a07      	cmp	r2, #7
 800384e:	bf14      	ite	ne
 8003850:	2201      	movne	r2, #1
 8003852:	2200      	moveq	r2, #0
 8003854:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003856:	4293      	cmp	r3, r2
 8003858:	d113      	bne.n	8003882 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d109      	bne.n	8003882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d06e      	beq.n	8003960 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d069      	beq.n	800395c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0ad      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80038aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b0:	f7fe fb2c 	bl	8001f0c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe fb28 	bl	8001f0c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e09a      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d6:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	4b40      	ldr	r3, [pc, #256]	; (80039dc <HAL_RCC_OscConfig+0x784>)
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038e6:	3a01      	subs	r2, #1
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038f0:	0212      	lsls	r2, r2, #8
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038f8:	0852      	lsrs	r2, r2, #1
 80038fa:	3a01      	subs	r2, #1
 80038fc:	0552      	lsls	r2, r2, #21
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003904:	0852      	lsrs	r2, r2, #1
 8003906:	3a01      	subs	r2, #1
 8003908:	0652      	lsls	r2, r2, #25
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003910:	0912      	lsrs	r2, r2, #4
 8003912:	0452      	lsls	r2, r2, #17
 8003914:	430a      	orrs	r2, r1
 8003916:	4930      	ldr	r1, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003932:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003934:	f7fe faea 	bl	8001f0c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe fae6 	bl	8001f0c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e058      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800395a:	e050      	b.n	80039fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e04f      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d148      	bne.n	80039fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 8003972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003976:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003982:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003984:	f7fe fac2 	bl	8001f0c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fabe 	bl	8001f0c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e030      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x734>
 80039aa:	e028      	b.n	80039fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d023      	beq.n	80039fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x780>)
 80039b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe faa5 	bl	8001f0c <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c4:	e00c      	b.n	80039e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe faa1 	bl	8001f0c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d905      	bls.n	80039e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_OscConfig+0x7b0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ec      	bne.n	80039c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_OscConfig+0x7b0>)
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4905      	ldr	r1, [pc, #20]	; (8003a08 <HAL_RCC_OscConfig+0x7b0>)
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_RCC_OscConfig+0x7b4>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	60cb      	str	r3, [r1, #12]
 80039f8:	e001      	b.n	80039fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	feeefffc 	.word	0xfeeefffc

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0e7      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b75      	ldr	r3, [pc, #468]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d910      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b72      	ldr	r3, [pc, #456]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 0207 	bic.w	r2, r3, #7
 8003a3a:	4970      	ldr	r1, [pc, #448]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b6e      	ldr	r3, [pc, #440]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0cf      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	4b66      	ldr	r3, [pc, #408]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d908      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4960      	ldr	r1, [pc, #384]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04c      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b5a      	ldr	r3, [pc, #360]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d121      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0a6      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d115      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e09a      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac6:	4b4e      	ldr	r3, [pc, #312]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e08e      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e086      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4943      	ldr	r1, [pc, #268]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fe fa08 	bl	8001f0c <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fe fa04 	bl	8001f0c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e06e      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d208      	bcs.n	8003b56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b44:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	492b      	ldr	r1, [pc, #172]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b56:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d210      	bcs.n	8003b86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 0207 	bic.w	r2, r3, #7
 8003b6c:	4923      	ldr	r1, [pc, #140]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b74:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <HAL_RCC_ClockConfig+0x1ec>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e036      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4918      	ldr	r1, [pc, #96]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4910      	ldr	r1, [pc, #64]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bc4:	f000 f824 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	490b      	ldr	r1, [pc, #44]	; (8003c04 <HAL_RCC_ClockConfig+0x1f4>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003be0:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1f8>)
 8003be2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x1fc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fc39 	bl	8001460 <HAL_InitTick>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40021000 	.word	0x40021000
 8003c04:	080070c4 	.word	0x080070c4
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	2000006c 	.word	0x2000006c

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x34>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11e      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e005      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c60:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e004      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d134      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d003      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0xac>
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cb8:	617b      	str	r3, [r7, #20]
      break;
 8003cba:	e005      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cbe:	617b      	str	r3, [r7, #20]
      break;
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	617b      	str	r3, [r7, #20]
      break;
 8003cc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	fb03 f202 	mul.w	r2, r3, r2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	0e5b      	lsrs	r3, r3, #25
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d08:	69bb      	ldr	r3, [r7, #24]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	080070dc 	.word	0x080070dc
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200

08003d28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000000 	.word	0x20000000

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d44:	f7ff fff0 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4904      	ldr	r1, [pc, #16]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	080070d4 	.word	0x080070d4

08003d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d70:	f7ff ffda 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0adb      	lsrs	r3, r3, #11
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4904      	ldr	r1, [pc, #16]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	080070d4 	.word	0x080070d4

08003d98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	220f      	movs	r2, #15
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_RCC_GetClockConfig+0x60>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0207 	and.w	r2, r3, #7
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	601a      	str	r2, [r3, #0]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40022000 	.word	0x40022000

08003dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e14:	f7ff f974 	bl	8003100 <HAL_PWREx_GetVoltageRange>
 8003e18:	6178      	str	r0, [r7, #20]
 8003e1a:	e014      	b.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e34:	f7ff f964 	bl	8003100 <HAL_PWREx_GetVoltageRange>
 8003e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4c:	d10b      	bne.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d919      	bls.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2ba0      	cmp	r3, #160	; 0xa0
 8003e58:	d902      	bls.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	e013      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e60:	2301      	movs	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e010      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d902      	bls.n	8003e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e00a      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d102      	bne.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e78:	2302      	movs	r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e004      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d101      	bne.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e84:	2301      	movs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 0207 	bic.w	r2, r3, #7
 8003e90:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40022000 	.word	0x40022000

08003ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d041      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee0:	d02a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee6:	d824      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eec:	d008      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef2:	d81e      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d010      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efe:	e018      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f00:	4b86      	ldr	r3, [pc, #536]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a85      	ldr	r2, [pc, #532]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f0c:	e015      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fabb 	bl	8004490 <RCCEx_PLLSAI1_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1e:	e00c      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3320      	adds	r3, #32
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fba6 	bl	8004678 <RCCEx_PLLSAI2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f30:	e003      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	74fb      	strb	r3, [r7, #19]
      break;
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f40:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4e:	4973      	ldr	r1, [pc, #460]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f56:	e001      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d041      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f70:	d02a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f76:	d824      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f82:	d81e      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f8e:	e018      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f90:	4b62      	ldr	r3, [pc, #392]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a61      	ldr	r2, [pc, #388]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f9c:	e015      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa73 	bl	8004490 <RCCEx_PLLSAI1_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fae:	e00c      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3320      	adds	r3, #32
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb5e 	bl	8004678 <RCCEx_PLLSAI2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd0:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	494f      	ldr	r1, [pc, #316]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fe6:	e001      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a0 	beq.w	800413a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	4a40      	ldr	r2, [pc, #256]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	6593      	str	r3, [r2, #88]	; 0x58
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402c:	2301      	movs	r3, #1
 800402e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800403c:	f7fd ff66 	bl	8001f0c <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fd ff62 	bl	8001f0c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d902      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	74fb      	strb	r3, [r7, #19]
        break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ef      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d15c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800406a:	4b2c      	ldr	r3, [pc, #176]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004074:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01f      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d019      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd ff21 	bl	8001f0c <HAL_GetTick>
 80040ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040cc:	e00b      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd ff1d 	bl	8001f0c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d902      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	74fb      	strb	r3, [r7, #19]
            break;
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ec      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410a:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004112:	e009      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004128:	7c7b      	ldrb	r3, [r7, #17]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d105      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412e:	4b9e      	ldr	r3, [pc, #632]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	4a9d      	ldr	r2, [pc, #628]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004146:	4b98      	ldr	r3, [pc, #608]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 0203 	bic.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	4994      	ldr	r1, [pc, #592]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004168:	4b8f      	ldr	r3, [pc, #572]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 020c 	bic.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	498c      	ldr	r1, [pc, #560]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800418a:	4b87      	ldr	r3, [pc, #540]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	4983      	ldr	r1, [pc, #524]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ac:	4b7e      	ldr	r3, [pc, #504]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	497b      	ldr	r1, [pc, #492]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ce:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	4972      	ldr	r1, [pc, #456]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f0:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	496a      	ldr	r1, [pc, #424]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	4961      	ldr	r1, [pc, #388]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004234:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	4959      	ldr	r1, [pc, #356]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004256:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	4950      	ldr	r1, [pc, #320]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004278:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	4948      	ldr	r1, [pc, #288]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429a:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	493f      	ldr	r1, [pc, #252]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d028      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042bc:	4b3a      	ldr	r3, [pc, #232]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ca:	4937      	ldr	r1, [pc, #220]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042da:	d106      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
 80042e8:	e011      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f8c8 	bl	8004490 <RCCEx_PLLSAI1_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800431a:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	491f      	ldr	r1, [pc, #124]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004338:	d106      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004344:	60d3      	str	r3, [r2, #12]
 8004346:	e011      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f899 	bl	8004490 <RCCEx_PLLSAI1_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02b      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	4908      	ldr	r1, [pc, #32]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004396:	d109      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a02      	ldr	r2, [pc, #8]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a2:	60d3      	str	r3, [r2, #12]
 80043a4:	e014      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f867 	bl	8004490 <RCCEx_PLLSAI1_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c6:	7cfb      	ldrb	r3, [r7, #19]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ea:	4928      	ldr	r1, [pc, #160]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fa:	d10d      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	2102      	movs	r1, #2
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f844 	bl	8004490 <RCCEx_PLLSAI1_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d014      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	74bb      	strb	r3, [r7, #18]
 8004416:	e011      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3320      	adds	r3, #32
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f925 	bl	8004678 <RCCEx_PLLSAI2_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	490d      	ldr	r1, [pc, #52]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446a:	4b08      	ldr	r3, [pc, #32]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447a:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004482:	7cbb      	ldrb	r3, [r7, #18]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000

08004490 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800449e:	4b75      	ldr	r3, [pc, #468]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044aa:	4b72      	ldr	r3, [pc, #456]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0203 	and.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d10d      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
       ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044c2:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
       ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d047      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
 80044da:	e044      	b.n	8004566 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d018      	beq.n	8004516 <RCCEx_PLLSAI1_Config+0x86>
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d825      	bhi.n	8004534 <RCCEx_PLLSAI1_Config+0xa4>
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d002      	beq.n	80044f2 <RCCEx_PLLSAI1_Config+0x62>
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d009      	beq.n	8004504 <RCCEx_PLLSAI1_Config+0x74>
 80044f0:	e020      	b.n	8004534 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f2:	4b60      	ldr	r3, [pc, #384]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11d      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004502:	e01a      	b.n	800453a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004504:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004514:	e013      	b.n	800453e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004516:	4b57      	ldr	r3, [pc, #348]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004522:	4b54      	ldr	r3, [pc, #336]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004532:	e006      	b.n	8004542 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      break;
 8004538:	e004      	b.n	8004544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004542:	bf00      	nop
    }

    if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10d      	bne.n	8004566 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	430b      	orrs	r3, r1
 8004560:	4944      	ldr	r1, [pc, #272]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d17d      	bne.n	8004668 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a40      	ldr	r2, [pc, #256]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd fcc8 	bl	8001f0c <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800457e:	e009      	b.n	8004594 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004580:	f7fd fcc4 	bl	8001f0c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d902      	bls.n	8004594 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	73fb      	strb	r3, [r7, #15]
        break;
 8004592:	e005      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ef      	bne.n	8004580 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d160      	bne.n	8004668 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	0211      	lsls	r1, r2, #8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	0912      	lsrs	r2, r2, #4
 80045c4:	0452      	lsls	r2, r2, #17
 80045c6:	430a      	orrs	r2, r1
 80045c8:	492a      	ldr	r1, [pc, #168]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	610b      	str	r3, [r1, #16]
 80045ce:	e027      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d112      	bne.n	80045fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d6:	4b27      	ldr	r3, [pc, #156]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6892      	ldr	r2, [r2, #8]
 80045e6:	0211      	lsls	r1, r2, #8
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6912      	ldr	r2, [r2, #16]
 80045ec:	0852      	lsrs	r2, r2, #1
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0552      	lsls	r2, r2, #21
 80045f2:	430a      	orrs	r2, r1
 80045f4:	491f      	ldr	r1, [pc, #124]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
 80045fa:	e011      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6892      	ldr	r2, [r2, #8]
 800460c:	0211      	lsls	r1, r2, #8
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6952      	ldr	r2, [r2, #20]
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	3a01      	subs	r2, #1
 8004616:	0652      	lsls	r2, r2, #25
 8004618:	430a      	orrs	r2, r1
 800461a:	4916      	ldr	r1, [pc, #88]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461c:	4313      	orrs	r3, r2
 800461e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a13      	ldr	r2, [pc, #76]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd fc6e 	bl	8001f0c <HAL_GetTick>
 8004630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004632:	e009      	b.n	8004648 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004634:	f7fd fc6a 	bl	8001f0c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d902      	bls.n	8004648 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	73fb      	strb	r3, [r7, #15]
          break;
 8004646:	e005      	b.n	8004654 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ef      	beq.n	8004634 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	4904      	ldr	r1, [pc, #16]	; (8004674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000

08004678 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004686:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004692:	4b67      	ldr	r3, [pc, #412]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0203 	and.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d10d      	bne.n	80046be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
       ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046aa:	4b61      	ldr	r3, [pc, #388]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d047      	beq.n	800474e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e044      	b.n	800474e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d018      	beq.n	80046fe <RCCEx_PLLSAI2_Config+0x86>
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d825      	bhi.n	800471c <RCCEx_PLLSAI2_Config+0xa4>
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d002      	beq.n	80046da <RCCEx_PLLSAI2_Config+0x62>
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d009      	beq.n	80046ec <RCCEx_PLLSAI2_Config+0x74>
 80046d8:	e020      	b.n	800471c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046da:	4b55      	ldr	r3, [pc, #340]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d11d      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ea:	e01a      	b.n	8004722 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046ec:	4b50      	ldr	r3, [pc, #320]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d116      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fc:	e013      	b.n	8004726 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046fe:	4b4c      	ldr	r3, [pc, #304]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470a:	4b49      	ldr	r3, [pc, #292]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471a:	e006      	b.n	800472a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      break;
 8004720:	e004      	b.n	800472c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800472a:	bf00      	nop
    }

    if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	430b      	orrs	r3, r1
 8004748:	4939      	ldr	r1, [pc, #228]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d167      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a35      	ldr	r2, [pc, #212]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004760:	f7fd fbd4 	bl	8001f0c <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004766:	e009      	b.n	800477c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004768:	f7fd fbd0 	bl	8001f0c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d902      	bls.n	800477c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	73fb      	strb	r3, [r7, #15]
        break;
 800477a:	e005      	b.n	8004788 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800477c:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ef      	bne.n	8004768 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d14a      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d111      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004794:	4b26      	ldr	r3, [pc, #152]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6892      	ldr	r2, [r2, #8]
 80047a4:	0211      	lsls	r1, r2, #8
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68d2      	ldr	r2, [r2, #12]
 80047aa:	0912      	lsrs	r2, r2, #4
 80047ac:	0452      	lsls	r2, r2, #17
 80047ae:	430a      	orrs	r2, r1
 80047b0:	491f      	ldr	r1, [pc, #124]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	614b      	str	r3, [r1, #20]
 80047b6:	e011      	b.n	80047dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	0211      	lsls	r1, r2, #8
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6912      	ldr	r2, [r2, #16]
 80047ce:	0852      	lsrs	r2, r2, #1
 80047d0:	3a01      	subs	r2, #1
 80047d2:	0652      	lsls	r2, r2, #25
 80047d4:	430a      	orrs	r2, r1
 80047d6:	4916      	ldr	r1, [pc, #88]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047dc:	4b14      	ldr	r3, [pc, #80]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a13      	ldr	r2, [pc, #76]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fd fb90 	bl	8001f0c <HAL_GetTick>
 80047ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ee:	e009      	b.n	8004804 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047f0:	f7fd fb8c 	bl	8001f0c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d902      	bls.n	8004804 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	73fb      	strb	r3, [r7, #15]
          break;
 8004802:	e005      	b.n	8004810 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ef      	beq.n	80047f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4904      	ldr	r1, [pc, #16]	; (8004830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e049      	b.n	80048da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f841 	bl	80048e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 f9f8 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e04f      	b.n	80049b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a23      	ldr	r2, [pc, #140]	; (80049bc <HAL_TIM_Base_Start_IT+0xc4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d018      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_Base_Start_IT+0x76>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d115      	bne.n	800499a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004976:	4013      	ands	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d015      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0xb4>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004986:	d011      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	e008      	b.n	80049ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e000      	b.n	80049ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	00010007 	.word	0x00010007

080049d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0202 	mvn.w	r2, #2
 8004a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f905 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8f7 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f908 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0204 	mvn.w	r2, #4
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8db 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8cd 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8de 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0208 	mvn.w	r2, #8
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8b1 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8a3 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8b4 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f887 	bl	8004c2a <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f879 	bl	8004c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f88a 	bl	8004c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc fbe8 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f914 	bl	8004db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b96:	d10e      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d107      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f907 	bl	8004dc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d10e      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f838 	bl	8004c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d10e      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0220 	mvn.w	r2, #32
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8c7 	bl	8004d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <TIM_Base_SetConfig+0x114>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3d      	ldr	r2, [pc, #244]	; (8004d80 <TIM_Base_SetConfig+0x118>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3c      	ldr	r2, [pc, #240]	; (8004d84 <TIM_Base_SetConfig+0x11c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <TIM_Base_SetConfig+0x120>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3a      	ldr	r2, [pc, #232]	; (8004d8c <TIM_Base_SetConfig+0x124>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <TIM_Base_SetConfig+0x114>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01f      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2c      	ldr	r2, [pc, #176]	; (8004d80 <TIM_Base_SetConfig+0x118>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2b      	ldr	r2, [pc, #172]	; (8004d84 <TIM_Base_SetConfig+0x11c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <TIM_Base_SetConfig+0x120>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <TIM_Base_SetConfig+0x124>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <TIM_Base_SetConfig+0x128>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a27      	ldr	r2, [pc, #156]	; (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <TIM_Base_SetConfig+0x130>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <TIM_Base_SetConfig+0x114>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00f      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <TIM_Base_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <TIM_Base_SetConfig+0x128>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <TIM_Base_SetConfig+0x130>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d103      	bne.n	8004d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	615a      	str	r2, [r3, #20]
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40013400 	.word	0x40013400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e040      	b.n	8004e6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fc fad2 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	; 0x24
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8c0 	bl	8004f9c <UART_SetConfig>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e022      	b.n	8004e6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fb6c 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fbf3 	bl	8005650 <UART_CheckIdleState>
 8004e6a:	4603      	mov	r3, r0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 8082 	bne.w	8004f92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_UART_Transmit+0x26>
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07a      	b.n	8004f94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_UART_Transmit+0x38>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e073      	b.n	8004f94 <HAL_UART_Transmit+0x120>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2221      	movs	r2, #33	; 0x21
 8004ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ec2:	f7fd f823 	bl	8001f0c <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d108      	bne.n	8004ef4 <HAL_UART_Transmit+0x80>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e003      	b.n	8004efc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f04:	e02d      	b.n	8004f62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fbe6 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e039      	b.n	8004f94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f32:	b292      	uxth	r2, r2
 8004f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	3302      	adds	r3, #2
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	e008      	b.n	8004f50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b292      	uxth	r2, r2
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1cb      	bne.n	8004f06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2200      	movs	r2, #0
 8004f76:	2140      	movs	r1, #64	; 0x40
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fbb2 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e005      	b.n	8004f94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e000      	b.n	8004f94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
  }
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4ba4      	ldr	r3, [pc, #656]	; (800525c <UART_SetConfig+0x2c0>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a99      	ldr	r2, [pc, #612]	; (8005260 <UART_SetConfig+0x2c4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	4313      	orrs	r3, r2
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a90      	ldr	r2, [pc, #576]	; (8005264 <UART_SetConfig+0x2c8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d126      	bne.n	8005074 <UART_SetConfig+0xd8>
 8005026:	4b90      	ldr	r3, [pc, #576]	; (8005268 <UART_SetConfig+0x2cc>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b03      	cmp	r3, #3
 8005032:	d81b      	bhi.n	800506c <UART_SetConfig+0xd0>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0xa0>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	0800504d 	.word	0x0800504d
 8005040:	0800505d 	.word	0x0800505d
 8005044:	08005055 	.word	0x08005055
 8005048:	08005065 	.word	0x08005065
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e116      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005054:	2302      	movs	r3, #2
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505a:	e112      	b.n	8005282 <UART_SetConfig+0x2e6>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005062:	e10e      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506a:	e10a      	b.n	8005282 <UART_SetConfig+0x2e6>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005072:	e106      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a7c      	ldr	r2, [pc, #496]	; (800526c <UART_SetConfig+0x2d0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d138      	bne.n	80050f0 <UART_SetConfig+0x154>
 800507e:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <UART_SetConfig+0x2cc>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b0c      	cmp	r3, #12
 800508a:	d82d      	bhi.n	80050e8 <UART_SetConfig+0x14c>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0xf8>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e0d8      	b.n	8005282 <UART_SetConfig+0x2e6>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	e0d4      	b.n	8005282 <UART_SetConfig+0x2e6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050de:	e0d0      	b.n	8005282 <UART_SetConfig+0x2e6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e0cc      	b.n	8005282 <UART_SetConfig+0x2e6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e0c8      	b.n	8005282 <UART_SetConfig+0x2e6>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5e      	ldr	r2, [pc, #376]	; (8005270 <UART_SetConfig+0x2d4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d125      	bne.n	8005146 <UART_SetConfig+0x1aa>
 80050fa:	4b5b      	ldr	r3, [pc, #364]	; (8005268 <UART_SetConfig+0x2cc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d016      	beq.n	8005136 <UART_SetConfig+0x19a>
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d818      	bhi.n	800513e <UART_SetConfig+0x1a2>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d00a      	beq.n	8005126 <UART_SetConfig+0x18a>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d814      	bhi.n	800513e <UART_SetConfig+0x1a2>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <UART_SetConfig+0x182>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d008      	beq.n	800512e <UART_SetConfig+0x192>
 800511c:	e00f      	b.n	800513e <UART_SetConfig+0x1a2>
 800511e:	2300      	movs	r3, #0
 8005120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005124:	e0ad      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005126:	2302      	movs	r3, #2
 8005128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512c:	e0a9      	b.n	8005282 <UART_SetConfig+0x2e6>
 800512e:	2304      	movs	r3, #4
 8005130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005134:	e0a5      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005136:	2308      	movs	r3, #8
 8005138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513c:	e0a1      	b.n	8005282 <UART_SetConfig+0x2e6>
 800513e:	2310      	movs	r3, #16
 8005140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005144:	e09d      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4a      	ldr	r2, [pc, #296]	; (8005274 <UART_SetConfig+0x2d8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d125      	bne.n	800519c <UART_SetConfig+0x200>
 8005150:	4b45      	ldr	r3, [pc, #276]	; (8005268 <UART_SetConfig+0x2cc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800515a:	2bc0      	cmp	r3, #192	; 0xc0
 800515c:	d016      	beq.n	800518c <UART_SetConfig+0x1f0>
 800515e:	2bc0      	cmp	r3, #192	; 0xc0
 8005160:	d818      	bhi.n	8005194 <UART_SetConfig+0x1f8>
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d00a      	beq.n	800517c <UART_SetConfig+0x1e0>
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d814      	bhi.n	8005194 <UART_SetConfig+0x1f8>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <UART_SetConfig+0x1d8>
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d008      	beq.n	8005184 <UART_SetConfig+0x1e8>
 8005172:	e00f      	b.n	8005194 <UART_SetConfig+0x1f8>
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e082      	b.n	8005282 <UART_SetConfig+0x2e6>
 800517c:	2302      	movs	r3, #2
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e07e      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e07a      	b.n	8005282 <UART_SetConfig+0x2e6>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005192:	e076      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519a:	e072      	b.n	8005282 <UART_SetConfig+0x2e6>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a35      	ldr	r2, [pc, #212]	; (8005278 <UART_SetConfig+0x2dc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d12a      	bne.n	80051fc <UART_SetConfig+0x260>
 80051a6:	4b30      	ldr	r3, [pc, #192]	; (8005268 <UART_SetConfig+0x2cc>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d01a      	beq.n	80051ec <UART_SetConfig+0x250>
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ba:	d81b      	bhi.n	80051f4 <UART_SetConfig+0x258>
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c0:	d00c      	beq.n	80051dc <UART_SetConfig+0x240>
 80051c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c6:	d815      	bhi.n	80051f4 <UART_SetConfig+0x258>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <UART_SetConfig+0x238>
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d008      	beq.n	80051e4 <UART_SetConfig+0x248>
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x258>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051da:	e052      	b.n	8005282 <UART_SetConfig+0x2e6>
 80051dc:	2302      	movs	r3, #2
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e2:	e04e      	b.n	8005282 <UART_SetConfig+0x2e6>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ea:	e04a      	b.n	8005282 <UART_SetConfig+0x2e6>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e046      	b.n	8005282 <UART_SetConfig+0x2e6>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e042      	b.n	8005282 <UART_SetConfig+0x2e6>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a17      	ldr	r2, [pc, #92]	; (8005260 <UART_SetConfig+0x2c4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d13a      	bne.n	800527c <UART_SetConfig+0x2e0>
 8005206:	4b18      	ldr	r3, [pc, #96]	; (8005268 <UART_SetConfig+0x2cc>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005214:	d01a      	beq.n	800524c <UART_SetConfig+0x2b0>
 8005216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800521a:	d81b      	bhi.n	8005254 <UART_SetConfig+0x2b8>
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005220:	d00c      	beq.n	800523c <UART_SetConfig+0x2a0>
 8005222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005226:	d815      	bhi.n	8005254 <UART_SetConfig+0x2b8>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <UART_SetConfig+0x298>
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005230:	d008      	beq.n	8005244 <UART_SetConfig+0x2a8>
 8005232:	e00f      	b.n	8005254 <UART_SetConfig+0x2b8>
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e022      	b.n	8005282 <UART_SetConfig+0x2e6>
 800523c:	2302      	movs	r3, #2
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e01e      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e01a      	b.n	8005282 <UART_SetConfig+0x2e6>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e016      	b.n	8005282 <UART_SetConfig+0x2e6>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e012      	b.n	8005282 <UART_SetConfig+0x2e6>
 800525c:	efff69f3 	.word	0xefff69f3
 8005260:	40008000 	.word	0x40008000
 8005264:	40013800 	.word	0x40013800
 8005268:	40021000 	.word	0x40021000
 800526c:	40004400 	.word	0x40004400
 8005270:	40004800 	.word	0x40004800
 8005274:	40004c00 	.word	0x40004c00
 8005278:	40005000 	.word	0x40005000
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a9f      	ldr	r2, [pc, #636]	; (8005504 <UART_SetConfig+0x568>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d17a      	bne.n	8005382 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005290:	2b08      	cmp	r3, #8
 8005292:	d824      	bhi.n	80052de <UART_SetConfig+0x342>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x300>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052df 	.word	0x080052df
 80052ac:	080052cf 	.word	0x080052cf
 80052b0:	080052df 	.word	0x080052df
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052df 	.word	0x080052df
 80052bc:	080052d7 	.word	0x080052d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fd3e 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e010      	b.n	80052ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c8:	4b8f      	ldr	r3, [pc, #572]	; (8005508 <UART_SetConfig+0x56c>)
 80052ca:	61fb      	str	r3, [r7, #28]
        break;
 80052cc:	e00d      	b.n	80052ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ce:	f7fe fc9f 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 80052d2:	61f8      	str	r0, [r7, #28]
        break;
 80052d4:	e009      	b.n	80052ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	61fb      	str	r3, [r7, #28]
        break;
 80052dc:	e005      	b.n	80052ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80fb 	beq.w	80054e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d305      	bcc.n	800530e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	429a      	cmp	r2, r3
 800530c:	d903      	bls.n	8005316 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005314:	e0e8      	b.n	80054e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2200      	movs	r2, #0
 800531a:	461c      	mov	r4, r3
 800531c:	4615      	mov	r5, r2
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	022b      	lsls	r3, r5, #8
 8005328:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800532c:	0222      	lsls	r2, r4, #8
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	6849      	ldr	r1, [r1, #4]
 8005332:	0849      	lsrs	r1, r1, #1
 8005334:	2000      	movs	r0, #0
 8005336:	4688      	mov	r8, r1
 8005338:	4681      	mov	r9, r0
 800533a:	eb12 0a08 	adds.w	sl, r2, r8
 800533e:	eb43 0b09 	adc.w	fp, r3, r9
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005350:	4650      	mov	r0, sl
 8005352:	4659      	mov	r1, fp
 8005354:	f7fb fbf8 	bl	8000b48 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4613      	mov	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005366:	d308      	bcc.n	800537a <UART_SetConfig+0x3de>
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536e:	d204      	bcs.n	800537a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e0b6      	b.n	80054e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005380:	e0b2      	b.n	80054e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538a:	d15e      	bne.n	800544a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800538c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005390:	2b08      	cmp	r3, #8
 8005392:	d828      	bhi.n	80053e6 <UART_SetConfig+0x44a>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x400>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e7 	.word	0x080053e7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053e7 	.word	0x080053e7
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	080053df 	.word	0x080053df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7fe fcbe 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 80053c4:	61f8      	str	r0, [r7, #28]
        break;
 80053c6:	e014      	b.n	80053f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe fcd0 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 80053cc:	61f8      	str	r0, [r7, #28]
        break;
 80053ce:	e010      	b.n	80053f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b4d      	ldr	r3, [pc, #308]	; (8005508 <UART_SetConfig+0x56c>)
 80053d2:	61fb      	str	r3, [r7, #28]
        break;
 80053d4:	e00d      	b.n	80053f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7fe fc1b 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 80053da:	61f8      	str	r0, [r7, #28]
        break;
 80053dc:	e009      	b.n	80053f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e2:	61fb      	str	r3, [r7, #28]
        break;
 80053e4:	e005      	b.n	80053f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d077      	beq.n	80054e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005a      	lsls	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b0f      	cmp	r3, #15
 8005412:	d916      	bls.n	8005442 <UART_SetConfig+0x4a6>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541a:	d212      	bcs.n	8005442 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f023 030f 	bic.w	r3, r3, #15
 8005424:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	b29b      	uxth	r3, r3
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	b29a      	uxth	r2, r3
 8005432:	8afb      	ldrh	r3, [r7, #22]
 8005434:	4313      	orrs	r3, r2
 8005436:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	8afa      	ldrh	r2, [r7, #22]
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	e052      	b.n	80054e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005448:	e04e      	b.n	80054e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800544a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800544e:	2b08      	cmp	r3, #8
 8005450:	d827      	bhi.n	80054a2 <UART_SetConfig+0x506>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0x4bc>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	0800547d 	.word	0x0800547d
 800545c:	08005485 	.word	0x08005485
 8005460:	0800548d 	.word	0x0800548d
 8005464:	080054a3 	.word	0x080054a3
 8005468:	08005493 	.word	0x08005493
 800546c:	080054a3 	.word	0x080054a3
 8005470:	080054a3 	.word	0x080054a3
 8005474:	080054a3 	.word	0x080054a3
 8005478:	0800549b 	.word	0x0800549b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800547c:	f7fe fc60 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8005480:	61f8      	str	r0, [r7, #28]
        break;
 8005482:	e014      	b.n	80054ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005484:	f7fe fc72 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 8005488:	61f8      	str	r0, [r7, #28]
        break;
 800548a:	e010      	b.n	80054ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800548c:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <UART_SetConfig+0x56c>)
 800548e:	61fb      	str	r3, [r7, #28]
        break;
 8005490:	e00d      	b.n	80054ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7fe fbbd 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8005496:	61f8      	str	r0, [r7, #28]
        break;
 8005498:	e009      	b.n	80054ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	61fb      	str	r3, [r7, #28]
        break;
 80054a0:	e005      	b.n	80054ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054ac:	bf00      	nop
    }

    if (pclk != 0U)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d019      	beq.n	80054e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	085a      	lsrs	r2, r3, #1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d909      	bls.n	80054e2 <UART_SetConfig+0x546>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d205      	bcs.n	80054e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e002      	b.n	80054e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3728      	adds	r7, #40	; 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005502:	bf00      	nop
 8005504:	40008000 	.word	0x40008000
 8005508:	00f42400 	.word	0x00f42400

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d10a      	bne.n	8005622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005660:	f7fc fc54 	bl	8001f0c <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d10e      	bne.n	8005692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f82d 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e023      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d10e      	bne.n	80056be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f817 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00d      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b09c      	sub	sp, #112	; 0x70
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	e0a5      	b.n	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	f000 80a1 	beq.w	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fc fc05 	bl	8001f0c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <UART_WaitOnFlagUntilTimeout+0x32>
 800570e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005710:	2b00      	cmp	r3, #0
 8005712:	d13e      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005728:	667b      	str	r3, [r7, #100]	; 0x64
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005734:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e6      	bne.n	8005714 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	663b      	str	r3, [r7, #96]	; 0x60
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005766:	64ba      	str	r2, [r7, #72]	; 0x48
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800576c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e067      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d04f      	beq.n	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ae:	d147      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
 80057da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	66bb      	str	r3, [r7, #104]	; 0x68
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800580c:	623a      	str	r2, [r7, #32]
 800580e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	61bb      	str	r3, [r7, #24]
   return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e010      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	bf0c      	ite	eq
 8005850:	2301      	moveq	r3, #1
 8005852:	2300      	movne	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	429a      	cmp	r2, r3
 800585c:	f43f af4a 	beq.w	80056f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3770      	adds	r7, #112	; 0x70
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <siprintf>:
 800586c:	b40e      	push	{r1, r2, r3}
 800586e:	b500      	push	{lr}
 8005870:	b09c      	sub	sp, #112	; 0x70
 8005872:	ab1d      	add	r3, sp, #116	; 0x74
 8005874:	9002      	str	r0, [sp, #8]
 8005876:	9006      	str	r0, [sp, #24]
 8005878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800587c:	4809      	ldr	r0, [pc, #36]	; (80058a4 <siprintf+0x38>)
 800587e:	9107      	str	r1, [sp, #28]
 8005880:	9104      	str	r1, [sp, #16]
 8005882:	4909      	ldr	r1, [pc, #36]	; (80058a8 <siprintf+0x3c>)
 8005884:	f853 2b04 	ldr.w	r2, [r3], #4
 8005888:	9105      	str	r1, [sp, #20]
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	a902      	add	r1, sp, #8
 8005890:	f000 f992 	bl	8005bb8 <_svfiprintf_r>
 8005894:	9b02      	ldr	r3, [sp, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	b01c      	add	sp, #112	; 0x70
 800589c:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a0:	b003      	add	sp, #12
 80058a2:	4770      	bx	lr
 80058a4:	200000c0 	.word	0x200000c0
 80058a8:	ffff0208 	.word	0xffff0208

080058ac <memset>:
 80058ac:	4402      	add	r2, r0
 80058ae:	4603      	mov	r3, r0
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d100      	bne.n	80058b6 <memset+0xa>
 80058b4:	4770      	bx	lr
 80058b6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ba:	e7f9      	b.n	80058b0 <memset+0x4>

080058bc <__errno>:
 80058bc:	4b01      	ldr	r3, [pc, #4]	; (80058c4 <__errno+0x8>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	200000c0 	.word	0x200000c0

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4d0d      	ldr	r5, [pc, #52]	; (8005900 <__libc_init_array+0x38>)
 80058cc:	4c0d      	ldr	r4, [pc, #52]	; (8005904 <__libc_init_array+0x3c>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	2600      	movs	r6, #0
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	4d0b      	ldr	r5, [pc, #44]	; (8005908 <__libc_init_array+0x40>)
 80058da:	4c0c      	ldr	r4, [pc, #48]	; (800590c <__libc_init_array+0x44>)
 80058dc:	f001 fbce 	bl	800707c <_init>
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	2600      	movs	r6, #0
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	08007178 	.word	0x08007178
 8005904:	08007178 	.word	0x08007178
 8005908:	08007178 	.word	0x08007178
 800590c:	0800717c 	.word	0x0800717c

08005910 <__retarget_lock_acquire_recursive>:
 8005910:	4770      	bx	lr

08005912 <__retarget_lock_release_recursive>:
 8005912:	4770      	bx	lr

08005914 <_free_r>:
 8005914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005916:	2900      	cmp	r1, #0
 8005918:	d044      	beq.n	80059a4 <_free_r+0x90>
 800591a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591e:	9001      	str	r0, [sp, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f1a1 0404 	sub.w	r4, r1, #4
 8005926:	bfb8      	it	lt
 8005928:	18e4      	addlt	r4, r4, r3
 800592a:	f000 f8df 	bl	8005aec <__malloc_lock>
 800592e:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <_free_r+0x94>)
 8005930:	9801      	ldr	r0, [sp, #4]
 8005932:	6813      	ldr	r3, [r2, #0]
 8005934:	b933      	cbnz	r3, 8005944 <_free_r+0x30>
 8005936:	6063      	str	r3, [r4, #4]
 8005938:	6014      	str	r4, [r2, #0]
 800593a:	b003      	add	sp, #12
 800593c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005940:	f000 b8da 	b.w	8005af8 <__malloc_unlock>
 8005944:	42a3      	cmp	r3, r4
 8005946:	d908      	bls.n	800595a <_free_r+0x46>
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1961      	adds	r1, r4, r5
 800594c:	428b      	cmp	r3, r1
 800594e:	bf01      	itttt	eq
 8005950:	6819      	ldreq	r1, [r3, #0]
 8005952:	685b      	ldreq	r3, [r3, #4]
 8005954:	1949      	addeq	r1, r1, r5
 8005956:	6021      	streq	r1, [r4, #0]
 8005958:	e7ed      	b.n	8005936 <_free_r+0x22>
 800595a:	461a      	mov	r2, r3
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	b10b      	cbz	r3, 8005964 <_free_r+0x50>
 8005960:	42a3      	cmp	r3, r4
 8005962:	d9fa      	bls.n	800595a <_free_r+0x46>
 8005964:	6811      	ldr	r1, [r2, #0]
 8005966:	1855      	adds	r5, r2, r1
 8005968:	42a5      	cmp	r5, r4
 800596a:	d10b      	bne.n	8005984 <_free_r+0x70>
 800596c:	6824      	ldr	r4, [r4, #0]
 800596e:	4421      	add	r1, r4
 8005970:	1854      	adds	r4, r2, r1
 8005972:	42a3      	cmp	r3, r4
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	d1e0      	bne.n	800593a <_free_r+0x26>
 8005978:	681c      	ldr	r4, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	6053      	str	r3, [r2, #4]
 800597e:	440c      	add	r4, r1
 8005980:	6014      	str	r4, [r2, #0]
 8005982:	e7da      	b.n	800593a <_free_r+0x26>
 8005984:	d902      	bls.n	800598c <_free_r+0x78>
 8005986:	230c      	movs	r3, #12
 8005988:	6003      	str	r3, [r0, #0]
 800598a:	e7d6      	b.n	800593a <_free_r+0x26>
 800598c:	6825      	ldr	r5, [r4, #0]
 800598e:	1961      	adds	r1, r4, r5
 8005990:	428b      	cmp	r3, r1
 8005992:	bf04      	itt	eq
 8005994:	6819      	ldreq	r1, [r3, #0]
 8005996:	685b      	ldreq	r3, [r3, #4]
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	bf04      	itt	eq
 800599c:	1949      	addeq	r1, r1, r5
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	6054      	str	r4, [r2, #4]
 80059a2:	e7ca      	b.n	800593a <_free_r+0x26>
 80059a4:	b003      	add	sp, #12
 80059a6:	bd30      	pop	{r4, r5, pc}
 80059a8:	20000368 	.word	0x20000368

080059ac <sbrk_aligned>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4e0e      	ldr	r6, [pc, #56]	; (80059e8 <sbrk_aligned+0x3c>)
 80059b0:	460c      	mov	r4, r1
 80059b2:	6831      	ldr	r1, [r6, #0]
 80059b4:	4605      	mov	r5, r0
 80059b6:	b911      	cbnz	r1, 80059be <sbrk_aligned+0x12>
 80059b8:	f000 fba6 	bl	8006108 <_sbrk_r>
 80059bc:	6030      	str	r0, [r6, #0]
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 fba1 	bl	8006108 <_sbrk_r>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d00a      	beq.n	80059e0 <sbrk_aligned+0x34>
 80059ca:	1cc4      	adds	r4, r0, #3
 80059cc:	f024 0403 	bic.w	r4, r4, #3
 80059d0:	42a0      	cmp	r0, r4
 80059d2:	d007      	beq.n	80059e4 <sbrk_aligned+0x38>
 80059d4:	1a21      	subs	r1, r4, r0
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 fb96 	bl	8006108 <_sbrk_r>
 80059dc:	3001      	adds	r0, #1
 80059de:	d101      	bne.n	80059e4 <sbrk_aligned+0x38>
 80059e0:	f04f 34ff 	mov.w	r4, #4294967295
 80059e4:	4620      	mov	r0, r4
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	2000036c 	.word	0x2000036c

080059ec <_malloc_r>:
 80059ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f0:	1ccd      	adds	r5, r1, #3
 80059f2:	f025 0503 	bic.w	r5, r5, #3
 80059f6:	3508      	adds	r5, #8
 80059f8:	2d0c      	cmp	r5, #12
 80059fa:	bf38      	it	cc
 80059fc:	250c      	movcc	r5, #12
 80059fe:	2d00      	cmp	r5, #0
 8005a00:	4607      	mov	r7, r0
 8005a02:	db01      	blt.n	8005a08 <_malloc_r+0x1c>
 8005a04:	42a9      	cmp	r1, r5
 8005a06:	d905      	bls.n	8005a14 <_malloc_r+0x28>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	4630      	mov	r0, r6
 8005a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ae8 <_malloc_r+0xfc>
 8005a18:	f000 f868 	bl	8005aec <__malloc_lock>
 8005a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a20:	461c      	mov	r4, r3
 8005a22:	bb5c      	cbnz	r4, 8005a7c <_malloc_r+0x90>
 8005a24:	4629      	mov	r1, r5
 8005a26:	4638      	mov	r0, r7
 8005a28:	f7ff ffc0 	bl	80059ac <sbrk_aligned>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	4604      	mov	r4, r0
 8005a30:	d155      	bne.n	8005ade <_malloc_r+0xf2>
 8005a32:	f8d8 4000 	ldr.w	r4, [r8]
 8005a36:	4626      	mov	r6, r4
 8005a38:	2e00      	cmp	r6, #0
 8005a3a:	d145      	bne.n	8005ac8 <_malloc_r+0xdc>
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	d048      	beq.n	8005ad2 <_malloc_r+0xe6>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	4631      	mov	r1, r6
 8005a44:	4638      	mov	r0, r7
 8005a46:	eb04 0903 	add.w	r9, r4, r3
 8005a4a:	f000 fb5d 	bl	8006108 <_sbrk_r>
 8005a4e:	4581      	cmp	r9, r0
 8005a50:	d13f      	bne.n	8005ad2 <_malloc_r+0xe6>
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	1a6d      	subs	r5, r5, r1
 8005a56:	4629      	mov	r1, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7ff ffa7 	bl	80059ac <sbrk_aligned>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d037      	beq.n	8005ad2 <_malloc_r+0xe6>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	442b      	add	r3, r5
 8005a66:	6023      	str	r3, [r4, #0]
 8005a68:	f8d8 3000 	ldr.w	r3, [r8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d038      	beq.n	8005ae2 <_malloc_r+0xf6>
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	42a2      	cmp	r2, r4
 8005a74:	d12b      	bne.n	8005ace <_malloc_r+0xe2>
 8005a76:	2200      	movs	r2, #0
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	e00f      	b.n	8005a9c <_malloc_r+0xb0>
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	1b52      	subs	r2, r2, r5
 8005a80:	d41f      	bmi.n	8005ac2 <_malloc_r+0xd6>
 8005a82:	2a0b      	cmp	r2, #11
 8005a84:	d917      	bls.n	8005ab6 <_malloc_r+0xca>
 8005a86:	1961      	adds	r1, r4, r5
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	6025      	str	r5, [r4, #0]
 8005a8c:	bf18      	it	ne
 8005a8e:	6059      	strne	r1, [r3, #4]
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	bf08      	it	eq
 8005a94:	f8c8 1000 	streq.w	r1, [r8]
 8005a98:	5162      	str	r2, [r4, r5]
 8005a9a:	604b      	str	r3, [r1, #4]
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f104 060b 	add.w	r6, r4, #11
 8005aa2:	f000 f829 	bl	8005af8 <__malloc_unlock>
 8005aa6:	f026 0607 	bic.w	r6, r6, #7
 8005aaa:	1d23      	adds	r3, r4, #4
 8005aac:	1af2      	subs	r2, r6, r3
 8005aae:	d0ae      	beq.n	8005a0e <_malloc_r+0x22>
 8005ab0:	1b9b      	subs	r3, r3, r6
 8005ab2:	50a3      	str	r3, [r4, r2]
 8005ab4:	e7ab      	b.n	8005a0e <_malloc_r+0x22>
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	6862      	ldr	r2, [r4, #4]
 8005aba:	d1dd      	bne.n	8005a78 <_malloc_r+0x8c>
 8005abc:	f8c8 2000 	str.w	r2, [r8]
 8005ac0:	e7ec      	b.n	8005a9c <_malloc_r+0xb0>
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	6864      	ldr	r4, [r4, #4]
 8005ac6:	e7ac      	b.n	8005a22 <_malloc_r+0x36>
 8005ac8:	4634      	mov	r4, r6
 8005aca:	6876      	ldr	r6, [r6, #4]
 8005acc:	e7b4      	b.n	8005a38 <_malloc_r+0x4c>
 8005ace:	4613      	mov	r3, r2
 8005ad0:	e7cc      	b.n	8005a6c <_malloc_r+0x80>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f000 f80e 	bl	8005af8 <__malloc_unlock>
 8005adc:	e797      	b.n	8005a0e <_malloc_r+0x22>
 8005ade:	6025      	str	r5, [r4, #0]
 8005ae0:	e7dc      	b.n	8005a9c <_malloc_r+0xb0>
 8005ae2:	605b      	str	r3, [r3, #4]
 8005ae4:	deff      	udf	#255	; 0xff
 8005ae6:	bf00      	nop
 8005ae8:	20000368 	.word	0x20000368

08005aec <__malloc_lock>:
 8005aec:	4801      	ldr	r0, [pc, #4]	; (8005af4 <__malloc_lock+0x8>)
 8005aee:	f7ff bf0f 	b.w	8005910 <__retarget_lock_acquire_recursive>
 8005af2:	bf00      	nop
 8005af4:	20000364 	.word	0x20000364

08005af8 <__malloc_unlock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_unlock+0x8>)
 8005afa:	f7ff bf0a 	b.w	8005912 <__retarget_lock_release_recursive>
 8005afe:	bf00      	nop
 8005b00:	20000364 	.word	0x20000364

08005b04 <__ssputs_r>:
 8005b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	688e      	ldr	r6, [r1, #8]
 8005b0a:	461f      	mov	r7, r3
 8005b0c:	42be      	cmp	r6, r7
 8005b0e:	680b      	ldr	r3, [r1, #0]
 8005b10:	4682      	mov	sl, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	4690      	mov	r8, r2
 8005b16:	d82c      	bhi.n	8005b72 <__ssputs_r+0x6e>
 8005b18:	898a      	ldrh	r2, [r1, #12]
 8005b1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b1e:	d026      	beq.n	8005b6e <__ssputs_r+0x6a>
 8005b20:	6965      	ldr	r5, [r4, #20]
 8005b22:	6909      	ldr	r1, [r1, #16]
 8005b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b28:	eba3 0901 	sub.w	r9, r3, r1
 8005b2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b30:	1c7b      	adds	r3, r7, #1
 8005b32:	444b      	add	r3, r9
 8005b34:	106d      	asrs	r5, r5, #1
 8005b36:	429d      	cmp	r5, r3
 8005b38:	bf38      	it	cc
 8005b3a:	461d      	movcc	r5, r3
 8005b3c:	0553      	lsls	r3, r2, #21
 8005b3e:	d527      	bpl.n	8005b90 <__ssputs_r+0x8c>
 8005b40:	4629      	mov	r1, r5
 8005b42:	f7ff ff53 	bl	80059ec <_malloc_r>
 8005b46:	4606      	mov	r6, r0
 8005b48:	b360      	cbz	r0, 8005ba4 <__ssputs_r+0xa0>
 8005b4a:	6921      	ldr	r1, [r4, #16]
 8005b4c:	464a      	mov	r2, r9
 8005b4e:	f000 faeb 	bl	8006128 <memcpy>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	6126      	str	r6, [r4, #16]
 8005b60:	6165      	str	r5, [r4, #20]
 8005b62:	444e      	add	r6, r9
 8005b64:	eba5 0509 	sub.w	r5, r5, r9
 8005b68:	6026      	str	r6, [r4, #0]
 8005b6a:	60a5      	str	r5, [r4, #8]
 8005b6c:	463e      	mov	r6, r7
 8005b6e:	42be      	cmp	r6, r7
 8005b70:	d900      	bls.n	8005b74 <__ssputs_r+0x70>
 8005b72:	463e      	mov	r6, r7
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	4632      	mov	r2, r6
 8005b78:	4641      	mov	r1, r8
 8005b7a:	f000 faab 	bl	80060d4 <memmove>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	1b9b      	subs	r3, r3, r6
 8005b82:	60a3      	str	r3, [r4, #8]
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	4433      	add	r3, r6
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	462a      	mov	r2, r5
 8005b92:	f000 fad7 	bl	8006144 <_realloc_r>
 8005b96:	4606      	mov	r6, r0
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d1e0      	bne.n	8005b5e <__ssputs_r+0x5a>
 8005b9c:	6921      	ldr	r1, [r4, #16]
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7ff feb8 	bl	8005914 <_free_r>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	f8ca 3000 	str.w	r3, [sl]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	e7e9      	b.n	8005b8c <__ssputs_r+0x88>

08005bb8 <_svfiprintf_r>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	4698      	mov	r8, r3
 8005bbe:	898b      	ldrh	r3, [r1, #12]
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	b09d      	sub	sp, #116	; 0x74
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	d50e      	bpl.n	8005bea <_svfiprintf_r+0x32>
 8005bcc:	690b      	ldr	r3, [r1, #16]
 8005bce:	b963      	cbnz	r3, 8005bea <_svfiprintf_r+0x32>
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	f7ff ff0b 	bl	80059ec <_malloc_r>
 8005bd6:	6028      	str	r0, [r5, #0]
 8005bd8:	6128      	str	r0, [r5, #16]
 8005bda:	b920      	cbnz	r0, 8005be6 <_svfiprintf_r+0x2e>
 8005bdc:	230c      	movs	r3, #12
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e0d0      	b.n	8005d88 <_svfiprintf_r+0x1d0>
 8005be6:	2340      	movs	r3, #64	; 0x40
 8005be8:	616b      	str	r3, [r5, #20]
 8005bea:	2300      	movs	r3, #0
 8005bec:	9309      	str	r3, [sp, #36]	; 0x24
 8005bee:	2320      	movs	r3, #32
 8005bf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bf8:	2330      	movs	r3, #48	; 0x30
 8005bfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005da0 <_svfiprintf_r+0x1e8>
 8005bfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c02:	f04f 0901 	mov.w	r9, #1
 8005c06:	4623      	mov	r3, r4
 8005c08:	469a      	mov	sl, r3
 8005c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c0e:	b10a      	cbz	r2, 8005c14 <_svfiprintf_r+0x5c>
 8005c10:	2a25      	cmp	r2, #37	; 0x25
 8005c12:	d1f9      	bne.n	8005c08 <_svfiprintf_r+0x50>
 8005c14:	ebba 0b04 	subs.w	fp, sl, r4
 8005c18:	d00b      	beq.n	8005c32 <_svfiprintf_r+0x7a>
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	4638      	mov	r0, r7
 8005c22:	f7ff ff6f 	bl	8005b04 <__ssputs_r>
 8005c26:	3001      	adds	r0, #1
 8005c28:	f000 80a9 	beq.w	8005d7e <_svfiprintf_r+0x1c6>
 8005c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c2e:	445a      	add	r2, fp
 8005c30:	9209      	str	r2, [sp, #36]	; 0x24
 8005c32:	f89a 3000 	ldrb.w	r3, [sl]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80a1 	beq.w	8005d7e <_svfiprintf_r+0x1c6>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c46:	f10a 0a01 	add.w	sl, sl, #1
 8005c4a:	9304      	str	r3, [sp, #16]
 8005c4c:	9307      	str	r3, [sp, #28]
 8005c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c52:	931a      	str	r3, [sp, #104]	; 0x68
 8005c54:	4654      	mov	r4, sl
 8005c56:	2205      	movs	r2, #5
 8005c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5c:	4850      	ldr	r0, [pc, #320]	; (8005da0 <_svfiprintf_r+0x1e8>)
 8005c5e:	f7fa fab7 	bl	80001d0 <memchr>
 8005c62:	9a04      	ldr	r2, [sp, #16]
 8005c64:	b9d8      	cbnz	r0, 8005c9e <_svfiprintf_r+0xe6>
 8005c66:	06d0      	lsls	r0, r2, #27
 8005c68:	bf44      	itt	mi
 8005c6a:	2320      	movmi	r3, #32
 8005c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c70:	0711      	lsls	r1, r2, #28
 8005c72:	bf44      	itt	mi
 8005c74:	232b      	movmi	r3, #43	; 0x2b
 8005c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d015      	beq.n	8005cae <_svfiprintf_r+0xf6>
 8005c82:	9a07      	ldr	r2, [sp, #28]
 8005c84:	4654      	mov	r4, sl
 8005c86:	2000      	movs	r0, #0
 8005c88:	f04f 0c0a 	mov.w	ip, #10
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c92:	3b30      	subs	r3, #48	; 0x30
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d94d      	bls.n	8005d34 <_svfiprintf_r+0x17c>
 8005c98:	b1b0      	cbz	r0, 8005cc8 <_svfiprintf_r+0x110>
 8005c9a:	9207      	str	r2, [sp, #28]
 8005c9c:	e014      	b.n	8005cc8 <_svfiprintf_r+0x110>
 8005c9e:	eba0 0308 	sub.w	r3, r0, r8
 8005ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	46a2      	mov	sl, r4
 8005cac:	e7d2      	b.n	8005c54 <_svfiprintf_r+0x9c>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	1d19      	adds	r1, r3, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	9103      	str	r1, [sp, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfbb      	ittet	lt
 8005cba:	425b      	neglt	r3, r3
 8005cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8005cc0:	9307      	strge	r3, [sp, #28]
 8005cc2:	9307      	strlt	r3, [sp, #28]
 8005cc4:	bfb8      	it	lt
 8005cc6:	9204      	strlt	r2, [sp, #16]
 8005cc8:	7823      	ldrb	r3, [r4, #0]
 8005cca:	2b2e      	cmp	r3, #46	; 0x2e
 8005ccc:	d10c      	bne.n	8005ce8 <_svfiprintf_r+0x130>
 8005cce:	7863      	ldrb	r3, [r4, #1]
 8005cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cd2:	d134      	bne.n	8005d3e <_svfiprintf_r+0x186>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	9203      	str	r2, [sp, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bfb8      	it	lt
 8005ce0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ce4:	3402      	adds	r4, #2
 8005ce6:	9305      	str	r3, [sp, #20]
 8005ce8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005db0 <_svfiprintf_r+0x1f8>
 8005cec:	7821      	ldrb	r1, [r4, #0]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	f7fa fa6d 	bl	80001d0 <memchr>
 8005cf6:	b138      	cbz	r0, 8005d08 <_svfiprintf_r+0x150>
 8005cf8:	9b04      	ldr	r3, [sp, #16]
 8005cfa:	eba0 000a 	sub.w	r0, r0, sl
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	4082      	lsls	r2, r0
 8005d02:	4313      	orrs	r3, r2
 8005d04:	3401      	adds	r4, #1
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0c:	4825      	ldr	r0, [pc, #148]	; (8005da4 <_svfiprintf_r+0x1ec>)
 8005d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d12:	2206      	movs	r2, #6
 8005d14:	f7fa fa5c 	bl	80001d0 <memchr>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d038      	beq.n	8005d8e <_svfiprintf_r+0x1d6>
 8005d1c:	4b22      	ldr	r3, [pc, #136]	; (8005da8 <_svfiprintf_r+0x1f0>)
 8005d1e:	bb1b      	cbnz	r3, 8005d68 <_svfiprintf_r+0x1b0>
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	3307      	adds	r3, #7
 8005d24:	f023 0307 	bic.w	r3, r3, #7
 8005d28:	3308      	adds	r3, #8
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2e:	4433      	add	r3, r6
 8005d30:	9309      	str	r3, [sp, #36]	; 0x24
 8005d32:	e768      	b.n	8005c06 <_svfiprintf_r+0x4e>
 8005d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d38:	460c      	mov	r4, r1
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7a6      	b.n	8005c8c <_svfiprintf_r+0xd4>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	3401      	adds	r4, #1
 8005d42:	9305      	str	r3, [sp, #20]
 8005d44:	4619      	mov	r1, r3
 8005d46:	f04f 0c0a 	mov.w	ip, #10
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d50:	3a30      	subs	r2, #48	; 0x30
 8005d52:	2a09      	cmp	r2, #9
 8005d54:	d903      	bls.n	8005d5e <_svfiprintf_r+0x1a6>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0c6      	beq.n	8005ce8 <_svfiprintf_r+0x130>
 8005d5a:	9105      	str	r1, [sp, #20]
 8005d5c:	e7c4      	b.n	8005ce8 <_svfiprintf_r+0x130>
 8005d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d62:	4604      	mov	r4, r0
 8005d64:	2301      	movs	r3, #1
 8005d66:	e7f0      	b.n	8005d4a <_svfiprintf_r+0x192>
 8005d68:	ab03      	add	r3, sp, #12
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	462a      	mov	r2, r5
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <_svfiprintf_r+0x1f4>)
 8005d70:	a904      	add	r1, sp, #16
 8005d72:	4638      	mov	r0, r7
 8005d74:	f3af 8000 	nop.w
 8005d78:	1c42      	adds	r2, r0, #1
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	d1d6      	bne.n	8005d2c <_svfiprintf_r+0x174>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	065b      	lsls	r3, r3, #25
 8005d82:	f53f af2d 	bmi.w	8005be0 <_svfiprintf_r+0x28>
 8005d86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d88:	b01d      	add	sp, #116	; 0x74
 8005d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8e:	ab03      	add	r3, sp, #12
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	462a      	mov	r2, r5
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <_svfiprintf_r+0x1f4>)
 8005d96:	a904      	add	r1, sp, #16
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f000 f879 	bl	8005e90 <_printf_i>
 8005d9e:	e7eb      	b.n	8005d78 <_svfiprintf_r+0x1c0>
 8005da0:	0800710c 	.word	0x0800710c
 8005da4:	08007116 	.word	0x08007116
 8005da8:	00000000 	.word	0x00000000
 8005dac:	08005b05 	.word	0x08005b05
 8005db0:	08007112 	.word	0x08007112

08005db4 <_printf_common>:
 8005db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	4616      	mov	r6, r2
 8005dba:	4699      	mov	r9, r3
 8005dbc:	688a      	ldr	r2, [r1, #8]
 8005dbe:	690b      	ldr	r3, [r1, #16]
 8005dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	bfb8      	it	lt
 8005dc8:	4613      	movlt	r3, r2
 8005dca:	6033      	str	r3, [r6, #0]
 8005dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	b10a      	cbz	r2, 8005dda <_printf_common+0x26>
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	6033      	str	r3, [r6, #0]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	0699      	lsls	r1, r3, #26
 8005dde:	bf42      	ittt	mi
 8005de0:	6833      	ldrmi	r3, [r6, #0]
 8005de2:	3302      	addmi	r3, #2
 8005de4:	6033      	strmi	r3, [r6, #0]
 8005de6:	6825      	ldr	r5, [r4, #0]
 8005de8:	f015 0506 	ands.w	r5, r5, #6
 8005dec:	d106      	bne.n	8005dfc <_printf_common+0x48>
 8005dee:	f104 0a19 	add.w	sl, r4, #25
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	6832      	ldr	r2, [r6, #0]
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	42ab      	cmp	r3, r5
 8005dfa:	dc26      	bgt.n	8005e4a <_printf_common+0x96>
 8005dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e00:	1e13      	subs	r3, r2, #0
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	bf18      	it	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	0692      	lsls	r2, r2, #26
 8005e0a:	d42b      	bmi.n	8005e64 <_printf_common+0xb0>
 8005e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e10:	4649      	mov	r1, r9
 8005e12:	4638      	mov	r0, r7
 8005e14:	47c0      	blx	r8
 8005e16:	3001      	adds	r0, #1
 8005e18:	d01e      	beq.n	8005e58 <_printf_common+0xa4>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	6922      	ldr	r2, [r4, #16]
 8005e1e:	f003 0306 	and.w	r3, r3, #6
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	bf02      	ittt	eq
 8005e26:	68e5      	ldreq	r5, [r4, #12]
 8005e28:	6833      	ldreq	r3, [r6, #0]
 8005e2a:	1aed      	subeq	r5, r5, r3
 8005e2c:	68a3      	ldr	r3, [r4, #8]
 8005e2e:	bf0c      	ite	eq
 8005e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e34:	2500      	movne	r5, #0
 8005e36:	4293      	cmp	r3, r2
 8005e38:	bfc4      	itt	gt
 8005e3a:	1a9b      	subgt	r3, r3, r2
 8005e3c:	18ed      	addgt	r5, r5, r3
 8005e3e:	2600      	movs	r6, #0
 8005e40:	341a      	adds	r4, #26
 8005e42:	42b5      	cmp	r5, r6
 8005e44:	d11a      	bne.n	8005e7c <_printf_common+0xc8>
 8005e46:	2000      	movs	r0, #0
 8005e48:	e008      	b.n	8005e5c <_printf_common+0xa8>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4652      	mov	r2, sl
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4638      	mov	r0, r7
 8005e52:	47c0      	blx	r8
 8005e54:	3001      	adds	r0, #1
 8005e56:	d103      	bne.n	8005e60 <_printf_common+0xac>
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e60:	3501      	adds	r5, #1
 8005e62:	e7c6      	b.n	8005df2 <_printf_common+0x3e>
 8005e64:	18e1      	adds	r1, r4, r3
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	2030      	movs	r0, #48	; 0x30
 8005e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e6e:	4422      	add	r2, r4
 8005e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e78:	3302      	adds	r3, #2
 8005e7a:	e7c7      	b.n	8005e0c <_printf_common+0x58>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4622      	mov	r2, r4
 8005e80:	4649      	mov	r1, r9
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c0      	blx	r8
 8005e86:	3001      	adds	r0, #1
 8005e88:	d0e6      	beq.n	8005e58 <_printf_common+0xa4>
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	e7d9      	b.n	8005e42 <_printf_common+0x8e>
	...

08005e90 <_printf_i>:
 8005e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	7e0f      	ldrb	r7, [r1, #24]
 8005e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e98:	2f78      	cmp	r7, #120	; 0x78
 8005e9a:	4691      	mov	r9, r2
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	469a      	mov	sl, r3
 8005ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ea6:	d807      	bhi.n	8005eb8 <_printf_i+0x28>
 8005ea8:	2f62      	cmp	r7, #98	; 0x62
 8005eaa:	d80a      	bhi.n	8005ec2 <_printf_i+0x32>
 8005eac:	2f00      	cmp	r7, #0
 8005eae:	f000 80d4 	beq.w	800605a <_printf_i+0x1ca>
 8005eb2:	2f58      	cmp	r7, #88	; 0x58
 8005eb4:	f000 80c0 	beq.w	8006038 <_printf_i+0x1a8>
 8005eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ec0:	e03a      	b.n	8005f38 <_printf_i+0xa8>
 8005ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ec6:	2b15      	cmp	r3, #21
 8005ec8:	d8f6      	bhi.n	8005eb8 <_printf_i+0x28>
 8005eca:	a101      	add	r1, pc, #4	; (adr r1, 8005ed0 <_printf_i+0x40>)
 8005ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f3d 	.word	0x08005f3d
 8005ed8:	08005eb9 	.word	0x08005eb9
 8005edc:	08005eb9 	.word	0x08005eb9
 8005ee0:	08005eb9 	.word	0x08005eb9
 8005ee4:	08005eb9 	.word	0x08005eb9
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005eb9 	.word	0x08005eb9
 8005ef0:	08005eb9 	.word	0x08005eb9
 8005ef4:	08005eb9 	.word	0x08005eb9
 8005ef8:	08005eb9 	.word	0x08005eb9
 8005efc:	08006041 	.word	0x08006041
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ffb 	.word	0x08005ffb
 8005f08:	08005eb9 	.word	0x08005eb9
 8005f0c:	08005eb9 	.word	0x08005eb9
 8005f10:	08006063 	.word	0x08006063
 8005f14:	08005eb9 	.word	0x08005eb9
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	08005eb9 	.word	0x08005eb9
 8005f20:	08005eb9 	.word	0x08005eb9
 8005f24:	08006003 	.word	0x08006003
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e09f      	b.n	800607c <_printf_i+0x1ec>
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	0607      	lsls	r7, r0, #24
 8005f42:	f103 0104 	add.w	r1, r3, #4
 8005f46:	6029      	str	r1, [r5, #0]
 8005f48:	d501      	bpl.n	8005f4e <_printf_i+0xbe>
 8005f4a:	681e      	ldr	r6, [r3, #0]
 8005f4c:	e003      	b.n	8005f56 <_printf_i+0xc6>
 8005f4e:	0646      	lsls	r6, r0, #25
 8005f50:	d5fb      	bpl.n	8005f4a <_printf_i+0xba>
 8005f52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	da03      	bge.n	8005f62 <_printf_i+0xd2>
 8005f5a:	232d      	movs	r3, #45	; 0x2d
 8005f5c:	4276      	negs	r6, r6
 8005f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f62:	485a      	ldr	r0, [pc, #360]	; (80060cc <_printf_i+0x23c>)
 8005f64:	230a      	movs	r3, #10
 8005f66:	e012      	b.n	8005f8e <_printf_i+0xfe>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	6820      	ldr	r0, [r4, #0]
 8005f6c:	1d19      	adds	r1, r3, #4
 8005f6e:	6029      	str	r1, [r5, #0]
 8005f70:	0605      	lsls	r5, r0, #24
 8005f72:	d501      	bpl.n	8005f78 <_printf_i+0xe8>
 8005f74:	681e      	ldr	r6, [r3, #0]
 8005f76:	e002      	b.n	8005f7e <_printf_i+0xee>
 8005f78:	0641      	lsls	r1, r0, #25
 8005f7a:	d5fb      	bpl.n	8005f74 <_printf_i+0xe4>
 8005f7c:	881e      	ldrh	r6, [r3, #0]
 8005f7e:	4853      	ldr	r0, [pc, #332]	; (80060cc <_printf_i+0x23c>)
 8005f80:	2f6f      	cmp	r7, #111	; 0x6f
 8005f82:	bf0c      	ite	eq
 8005f84:	2308      	moveq	r3, #8
 8005f86:	230a      	movne	r3, #10
 8005f88:	2100      	movs	r1, #0
 8005f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f8e:	6865      	ldr	r5, [r4, #4]
 8005f90:	60a5      	str	r5, [r4, #8]
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	bfa2      	ittt	ge
 8005f96:	6821      	ldrge	r1, [r4, #0]
 8005f98:	f021 0104 	bicge.w	r1, r1, #4
 8005f9c:	6021      	strge	r1, [r4, #0]
 8005f9e:	b90e      	cbnz	r6, 8005fa4 <_printf_i+0x114>
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	d04b      	beq.n	800603c <_printf_i+0x1ac>
 8005fa4:	4615      	mov	r5, r2
 8005fa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005faa:	fb03 6711 	mls	r7, r3, r1, r6
 8005fae:	5dc7      	ldrb	r7, [r0, r7]
 8005fb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fb4:	4637      	mov	r7, r6
 8005fb6:	42bb      	cmp	r3, r7
 8005fb8:	460e      	mov	r6, r1
 8005fba:	d9f4      	bls.n	8005fa6 <_printf_i+0x116>
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d10b      	bne.n	8005fd8 <_printf_i+0x148>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	07de      	lsls	r6, r3, #31
 8005fc4:	d508      	bpl.n	8005fd8 <_printf_i+0x148>
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	6861      	ldr	r1, [r4, #4]
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	bfde      	ittt	le
 8005fce:	2330      	movle	r3, #48	; 0x30
 8005fd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fd8:	1b52      	subs	r2, r2, r5
 8005fda:	6122      	str	r2, [r4, #16]
 8005fdc:	f8cd a000 	str.w	sl, [sp]
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	aa03      	add	r2, sp, #12
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	f7ff fee4 	bl	8005db4 <_printf_common>
 8005fec:	3001      	adds	r0, #1
 8005fee:	d14a      	bne.n	8006086 <_printf_i+0x1f6>
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	b004      	add	sp, #16
 8005ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	f043 0320 	orr.w	r3, r3, #32
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	4833      	ldr	r0, [pc, #204]	; (80060d0 <_printf_i+0x240>)
 8006004:	2778      	movs	r7, #120	; 0x78
 8006006:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	6829      	ldr	r1, [r5, #0]
 800600e:	061f      	lsls	r7, r3, #24
 8006010:	f851 6b04 	ldr.w	r6, [r1], #4
 8006014:	d402      	bmi.n	800601c <_printf_i+0x18c>
 8006016:	065f      	lsls	r7, r3, #25
 8006018:	bf48      	it	mi
 800601a:	b2b6      	uxthmi	r6, r6
 800601c:	07df      	lsls	r7, r3, #31
 800601e:	bf48      	it	mi
 8006020:	f043 0320 	orrmi.w	r3, r3, #32
 8006024:	6029      	str	r1, [r5, #0]
 8006026:	bf48      	it	mi
 8006028:	6023      	strmi	r3, [r4, #0]
 800602a:	b91e      	cbnz	r6, 8006034 <_printf_i+0x1a4>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f023 0320 	bic.w	r3, r3, #32
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	2310      	movs	r3, #16
 8006036:	e7a7      	b.n	8005f88 <_printf_i+0xf8>
 8006038:	4824      	ldr	r0, [pc, #144]	; (80060cc <_printf_i+0x23c>)
 800603a:	e7e4      	b.n	8006006 <_printf_i+0x176>
 800603c:	4615      	mov	r5, r2
 800603e:	e7bd      	b.n	8005fbc <_printf_i+0x12c>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	6826      	ldr	r6, [r4, #0]
 8006044:	6961      	ldr	r1, [r4, #20]
 8006046:	1d18      	adds	r0, r3, #4
 8006048:	6028      	str	r0, [r5, #0]
 800604a:	0635      	lsls	r5, r6, #24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	d501      	bpl.n	8006054 <_printf_i+0x1c4>
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	e002      	b.n	800605a <_printf_i+0x1ca>
 8006054:	0670      	lsls	r0, r6, #25
 8006056:	d5fb      	bpl.n	8006050 <_printf_i+0x1c0>
 8006058:	8019      	strh	r1, [r3, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	4615      	mov	r5, r2
 8006060:	e7bc      	b.n	8005fdc <_printf_i+0x14c>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	602a      	str	r2, [r5, #0]
 8006068:	681d      	ldr	r5, [r3, #0]
 800606a:	6862      	ldr	r2, [r4, #4]
 800606c:	2100      	movs	r1, #0
 800606e:	4628      	mov	r0, r5
 8006070:	f7fa f8ae 	bl	80001d0 <memchr>
 8006074:	b108      	cbz	r0, 800607a <_printf_i+0x1ea>
 8006076:	1b40      	subs	r0, r0, r5
 8006078:	6060      	str	r0, [r4, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	2300      	movs	r3, #0
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006084:	e7aa      	b.n	8005fdc <_printf_i+0x14c>
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	462a      	mov	r2, r5
 800608a:	4649      	mov	r1, r9
 800608c:	4640      	mov	r0, r8
 800608e:	47d0      	blx	sl
 8006090:	3001      	adds	r0, #1
 8006092:	d0ad      	beq.n	8005ff0 <_printf_i+0x160>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	079b      	lsls	r3, r3, #30
 8006098:	d413      	bmi.n	80060c2 <_printf_i+0x232>
 800609a:	68e0      	ldr	r0, [r4, #12]
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	4298      	cmp	r0, r3
 80060a0:	bfb8      	it	lt
 80060a2:	4618      	movlt	r0, r3
 80060a4:	e7a6      	b.n	8005ff4 <_printf_i+0x164>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4632      	mov	r2, r6
 80060aa:	4649      	mov	r1, r9
 80060ac:	4640      	mov	r0, r8
 80060ae:	47d0      	blx	sl
 80060b0:	3001      	adds	r0, #1
 80060b2:	d09d      	beq.n	8005ff0 <_printf_i+0x160>
 80060b4:	3501      	adds	r5, #1
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	9903      	ldr	r1, [sp, #12]
 80060ba:	1a5b      	subs	r3, r3, r1
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dcf2      	bgt.n	80060a6 <_printf_i+0x216>
 80060c0:	e7eb      	b.n	800609a <_printf_i+0x20a>
 80060c2:	2500      	movs	r5, #0
 80060c4:	f104 0619 	add.w	r6, r4, #25
 80060c8:	e7f5      	b.n	80060b6 <_printf_i+0x226>
 80060ca:	bf00      	nop
 80060cc:	0800711d 	.word	0x0800711d
 80060d0:	0800712e 	.word	0x0800712e

080060d4 <memmove>:
 80060d4:	4288      	cmp	r0, r1
 80060d6:	b510      	push	{r4, lr}
 80060d8:	eb01 0402 	add.w	r4, r1, r2
 80060dc:	d902      	bls.n	80060e4 <memmove+0x10>
 80060de:	4284      	cmp	r4, r0
 80060e0:	4623      	mov	r3, r4
 80060e2:	d807      	bhi.n	80060f4 <memmove+0x20>
 80060e4:	1e43      	subs	r3, r0, #1
 80060e6:	42a1      	cmp	r1, r4
 80060e8:	d008      	beq.n	80060fc <memmove+0x28>
 80060ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060f2:	e7f8      	b.n	80060e6 <memmove+0x12>
 80060f4:	4402      	add	r2, r0
 80060f6:	4601      	mov	r1, r0
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d100      	bne.n	80060fe <memmove+0x2a>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006106:	e7f7      	b.n	80060f8 <memmove+0x24>

08006108 <_sbrk_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d06      	ldr	r5, [pc, #24]	; (8006124 <_sbrk_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fb fa30 	bl	8001578 <_sbrk>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_sbrk_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_sbrk_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20000360 	.word	0x20000360

08006128 <memcpy>:
 8006128:	440a      	add	r2, r1
 800612a:	4291      	cmp	r1, r2
 800612c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006130:	d100      	bne.n	8006134 <memcpy+0xc>
 8006132:	4770      	bx	lr
 8006134:	b510      	push	{r4, lr}
 8006136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800613e:	4291      	cmp	r1, r2
 8006140:	d1f9      	bne.n	8006136 <memcpy+0xe>
 8006142:	bd10      	pop	{r4, pc}

08006144 <_realloc_r>:
 8006144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006148:	4680      	mov	r8, r0
 800614a:	4614      	mov	r4, r2
 800614c:	460e      	mov	r6, r1
 800614e:	b921      	cbnz	r1, 800615a <_realloc_r+0x16>
 8006150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	4611      	mov	r1, r2
 8006156:	f7ff bc49 	b.w	80059ec <_malloc_r>
 800615a:	b92a      	cbnz	r2, 8006168 <_realloc_r+0x24>
 800615c:	f7ff fbda 	bl	8005914 <_free_r>
 8006160:	4625      	mov	r5, r4
 8006162:	4628      	mov	r0, r5
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	f000 f81b 	bl	80061a2 <_malloc_usable_size_r>
 800616c:	4284      	cmp	r4, r0
 800616e:	4607      	mov	r7, r0
 8006170:	d802      	bhi.n	8006178 <_realloc_r+0x34>
 8006172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006176:	d812      	bhi.n	800619e <_realloc_r+0x5a>
 8006178:	4621      	mov	r1, r4
 800617a:	4640      	mov	r0, r8
 800617c:	f7ff fc36 	bl	80059ec <_malloc_r>
 8006180:	4605      	mov	r5, r0
 8006182:	2800      	cmp	r0, #0
 8006184:	d0ed      	beq.n	8006162 <_realloc_r+0x1e>
 8006186:	42bc      	cmp	r4, r7
 8006188:	4622      	mov	r2, r4
 800618a:	4631      	mov	r1, r6
 800618c:	bf28      	it	cs
 800618e:	463a      	movcs	r2, r7
 8006190:	f7ff ffca 	bl	8006128 <memcpy>
 8006194:	4631      	mov	r1, r6
 8006196:	4640      	mov	r0, r8
 8006198:	f7ff fbbc 	bl	8005914 <_free_r>
 800619c:	e7e1      	b.n	8006162 <_realloc_r+0x1e>
 800619e:	4635      	mov	r5, r6
 80061a0:	e7df      	b.n	8006162 <_realloc_r+0x1e>

080061a2 <_malloc_usable_size_r>:
 80061a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a6:	1f18      	subs	r0, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfbc      	itt	lt
 80061ac:	580b      	ldrlt	r3, [r1, r0]
 80061ae:	18c0      	addlt	r0, r0, r3
 80061b0:	4770      	bx	lr
	...

080061b4 <pow>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	ed2d 8b02 	vpush	{d8}
 80061ba:	eeb0 8a40 	vmov.f32	s16, s0
 80061be:	eef0 8a60 	vmov.f32	s17, s1
 80061c2:	ec55 4b11 	vmov	r4, r5, d1
 80061c6:	f000 f977 	bl	80064b8 <__ieee754_pow>
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	ec57 6b10 	vmov	r6, r7, d0
 80061d6:	f7fa fca1 	bl	8000b1c <__aeabi_dcmpun>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d13b      	bne.n	8006256 <pow+0xa2>
 80061de:	ec51 0b18 	vmov	r0, r1, d8
 80061e2:	2200      	movs	r2, #0
 80061e4:	2300      	movs	r3, #0
 80061e6:	f7fa fc67 	bl	8000ab8 <__aeabi_dcmpeq>
 80061ea:	b1b8      	cbz	r0, 800621c <pow+0x68>
 80061ec:	2200      	movs	r2, #0
 80061ee:	2300      	movs	r3, #0
 80061f0:	4620      	mov	r0, r4
 80061f2:	4629      	mov	r1, r5
 80061f4:	f7fa fc60 	bl	8000ab8 <__aeabi_dcmpeq>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d146      	bne.n	800628a <pow+0xd6>
 80061fc:	ec45 4b10 	vmov	d0, r4, r5
 8006200:	f000 f874 	bl	80062ec <finite>
 8006204:	b338      	cbz	r0, 8006256 <pow+0xa2>
 8006206:	2200      	movs	r2, #0
 8006208:	2300      	movs	r3, #0
 800620a:	4620      	mov	r0, r4
 800620c:	4629      	mov	r1, r5
 800620e:	f7fa fc5d 	bl	8000acc <__aeabi_dcmplt>
 8006212:	b300      	cbz	r0, 8006256 <pow+0xa2>
 8006214:	f7ff fb52 	bl	80058bc <__errno>
 8006218:	2322      	movs	r3, #34	; 0x22
 800621a:	e01b      	b.n	8006254 <pow+0xa0>
 800621c:	ec47 6b10 	vmov	d0, r6, r7
 8006220:	f000 f864 	bl	80062ec <finite>
 8006224:	b9e0      	cbnz	r0, 8006260 <pow+0xac>
 8006226:	eeb0 0a48 	vmov.f32	s0, s16
 800622a:	eef0 0a68 	vmov.f32	s1, s17
 800622e:	f000 f85d 	bl	80062ec <finite>
 8006232:	b1a8      	cbz	r0, 8006260 <pow+0xac>
 8006234:	ec45 4b10 	vmov	d0, r4, r5
 8006238:	f000 f858 	bl	80062ec <finite>
 800623c:	b180      	cbz	r0, 8006260 <pow+0xac>
 800623e:	4632      	mov	r2, r6
 8006240:	463b      	mov	r3, r7
 8006242:	4630      	mov	r0, r6
 8006244:	4639      	mov	r1, r7
 8006246:	f7fa fc69 	bl	8000b1c <__aeabi_dcmpun>
 800624a:	2800      	cmp	r0, #0
 800624c:	d0e2      	beq.n	8006214 <pow+0x60>
 800624e:	f7ff fb35 	bl	80058bc <__errno>
 8006252:	2321      	movs	r3, #33	; 0x21
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	ecbd 8b02 	vpop	{d8}
 800625a:	ec47 6b10 	vmov	d0, r6, r7
 800625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006260:	2200      	movs	r2, #0
 8006262:	2300      	movs	r3, #0
 8006264:	4630      	mov	r0, r6
 8006266:	4639      	mov	r1, r7
 8006268:	f7fa fc26 	bl	8000ab8 <__aeabi_dcmpeq>
 800626c:	2800      	cmp	r0, #0
 800626e:	d0f2      	beq.n	8006256 <pow+0xa2>
 8006270:	eeb0 0a48 	vmov.f32	s0, s16
 8006274:	eef0 0a68 	vmov.f32	s1, s17
 8006278:	f000 f838 	bl	80062ec <finite>
 800627c:	2800      	cmp	r0, #0
 800627e:	d0ea      	beq.n	8006256 <pow+0xa2>
 8006280:	ec45 4b10 	vmov	d0, r4, r5
 8006284:	f000 f832 	bl	80062ec <finite>
 8006288:	e7c3      	b.n	8006212 <pow+0x5e>
 800628a:	4f01      	ldr	r7, [pc, #4]	; (8006290 <pow+0xdc>)
 800628c:	2600      	movs	r6, #0
 800628e:	e7e2      	b.n	8006256 <pow+0xa2>
 8006290:	3ff00000 	.word	0x3ff00000

08006294 <sqrt>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	ed2d 8b02 	vpush	{d8}
 800629a:	ec55 4b10 	vmov	r4, r5, d0
 800629e:	f000 f831 	bl	8006304 <__ieee754_sqrt>
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	eeb0 8a40 	vmov.f32	s16, s0
 80062ae:	eef0 8a60 	vmov.f32	s17, s1
 80062b2:	f7fa fc33 	bl	8000b1c <__aeabi_dcmpun>
 80062b6:	b990      	cbnz	r0, 80062de <sqrt+0x4a>
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	4629      	mov	r1, r5
 80062c0:	f7fa fc04 	bl	8000acc <__aeabi_dcmplt>
 80062c4:	b158      	cbz	r0, 80062de <sqrt+0x4a>
 80062c6:	f7ff faf9 	bl	80058bc <__errno>
 80062ca:	2321      	movs	r3, #33	; 0x21
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2300      	movs	r3, #0
 80062d2:	4610      	mov	r0, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	f7fa fab1 	bl	800083c <__aeabi_ddiv>
 80062da:	ec41 0b18 	vmov	d8, r0, r1
 80062de:	eeb0 0a48 	vmov.f32	s0, s16
 80062e2:	eef0 0a68 	vmov.f32	s1, s17
 80062e6:	ecbd 8b02 	vpop	{d8}
 80062ea:	bd38      	pop	{r3, r4, r5, pc}

080062ec <finite>:
 80062ec:	b082      	sub	sp, #8
 80062ee:	ed8d 0b00 	vstr	d0, [sp]
 80062f2:	9801      	ldr	r0, [sp, #4]
 80062f4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80062f8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80062fc:	0fc0      	lsrs	r0, r0, #31
 80062fe:	b002      	add	sp, #8
 8006300:	4770      	bx	lr
	...

08006304 <__ieee754_sqrt>:
 8006304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	ec55 4b10 	vmov	r4, r5, d0
 800630c:	4e67      	ldr	r6, [pc, #412]	; (80064ac <__ieee754_sqrt+0x1a8>)
 800630e:	43ae      	bics	r6, r5
 8006310:	ee10 0a10 	vmov	r0, s0
 8006314:	ee10 2a10 	vmov	r2, s0
 8006318:	4629      	mov	r1, r5
 800631a:	462b      	mov	r3, r5
 800631c:	d10d      	bne.n	800633a <__ieee754_sqrt+0x36>
 800631e:	f7fa f963 	bl	80005e8 <__aeabi_dmul>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7f9 ffa7 	bl	800027c <__adddf3>
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	ec45 4b10 	vmov	d0, r4, r5
 8006336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633a:	2d00      	cmp	r5, #0
 800633c:	dc0b      	bgt.n	8006356 <__ieee754_sqrt+0x52>
 800633e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006342:	4326      	orrs	r6, r4
 8006344:	d0f5      	beq.n	8006332 <__ieee754_sqrt+0x2e>
 8006346:	b135      	cbz	r5, 8006356 <__ieee754_sqrt+0x52>
 8006348:	f7f9 ff96 	bl	8000278 <__aeabi_dsub>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	f7fa fa74 	bl	800083c <__aeabi_ddiv>
 8006354:	e7eb      	b.n	800632e <__ieee754_sqrt+0x2a>
 8006356:	1509      	asrs	r1, r1, #20
 8006358:	f000 808d 	beq.w	8006476 <__ieee754_sqrt+0x172>
 800635c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006360:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006368:	07c9      	lsls	r1, r1, #31
 800636a:	bf5c      	itt	pl
 800636c:	005b      	lslpl	r3, r3, #1
 800636e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006372:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006376:	bf58      	it	pl
 8006378:	0052      	lslpl	r2, r2, #1
 800637a:	2500      	movs	r5, #0
 800637c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006380:	1076      	asrs	r6, r6, #1
 8006382:	0052      	lsls	r2, r2, #1
 8006384:	f04f 0e16 	mov.w	lr, #22
 8006388:	46ac      	mov	ip, r5
 800638a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800638e:	eb0c 0001 	add.w	r0, ip, r1
 8006392:	4298      	cmp	r0, r3
 8006394:	bfde      	ittt	le
 8006396:	1a1b      	suble	r3, r3, r0
 8006398:	eb00 0c01 	addle.w	ip, r0, r1
 800639c:	186d      	addle	r5, r5, r1
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	f1be 0e01 	subs.w	lr, lr, #1
 80063a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80063a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80063ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80063b0:	d1ed      	bne.n	800638e <__ieee754_sqrt+0x8a>
 80063b2:	4674      	mov	r4, lr
 80063b4:	2720      	movs	r7, #32
 80063b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80063ba:	4563      	cmp	r3, ip
 80063bc:	eb01 000e 	add.w	r0, r1, lr
 80063c0:	dc02      	bgt.n	80063c8 <__ieee754_sqrt+0xc4>
 80063c2:	d113      	bne.n	80063ec <__ieee754_sqrt+0xe8>
 80063c4:	4290      	cmp	r0, r2
 80063c6:	d811      	bhi.n	80063ec <__ieee754_sqrt+0xe8>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	eb00 0e01 	add.w	lr, r0, r1
 80063ce:	da57      	bge.n	8006480 <__ieee754_sqrt+0x17c>
 80063d0:	f1be 0f00 	cmp.w	lr, #0
 80063d4:	db54      	blt.n	8006480 <__ieee754_sqrt+0x17c>
 80063d6:	f10c 0801 	add.w	r8, ip, #1
 80063da:	eba3 030c 	sub.w	r3, r3, ip
 80063de:	4290      	cmp	r0, r2
 80063e0:	bf88      	it	hi
 80063e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80063e6:	1a12      	subs	r2, r2, r0
 80063e8:	440c      	add	r4, r1
 80063ea:	46c4      	mov	ip, r8
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	3f01      	subs	r7, #1
 80063f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80063f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80063f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80063fc:	d1dd      	bne.n	80063ba <__ieee754_sqrt+0xb6>
 80063fe:	4313      	orrs	r3, r2
 8006400:	d01b      	beq.n	800643a <__ieee754_sqrt+0x136>
 8006402:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80064b0 <__ieee754_sqrt+0x1ac>
 8006406:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80064b4 <__ieee754_sqrt+0x1b0>
 800640a:	e9da 0100 	ldrd	r0, r1, [sl]
 800640e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006412:	f7f9 ff31 	bl	8000278 <__aeabi_dsub>
 8006416:	e9da 8900 	ldrd	r8, r9, [sl]
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7fa fb5d 	bl	8000ae0 <__aeabi_dcmple>
 8006426:	b140      	cbz	r0, 800643a <__ieee754_sqrt+0x136>
 8006428:	f1b4 3fff 	cmp.w	r4, #4294967295
 800642c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006430:	e9db 2300 	ldrd	r2, r3, [fp]
 8006434:	d126      	bne.n	8006484 <__ieee754_sqrt+0x180>
 8006436:	3501      	adds	r5, #1
 8006438:	463c      	mov	r4, r7
 800643a:	106a      	asrs	r2, r5, #1
 800643c:	0863      	lsrs	r3, r4, #1
 800643e:	07e9      	lsls	r1, r5, #31
 8006440:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006444:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006448:	bf48      	it	mi
 800644a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800644e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006452:	461c      	mov	r4, r3
 8006454:	e76d      	b.n	8006332 <__ieee754_sqrt+0x2e>
 8006456:	0ad3      	lsrs	r3, r2, #11
 8006458:	3815      	subs	r0, #21
 800645a:	0552      	lsls	r2, r2, #21
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0fa      	beq.n	8006456 <__ieee754_sqrt+0x152>
 8006460:	02dc      	lsls	r4, r3, #11
 8006462:	d50a      	bpl.n	800647a <__ieee754_sqrt+0x176>
 8006464:	f1c1 0420 	rsb	r4, r1, #32
 8006468:	fa22 f404 	lsr.w	r4, r2, r4
 800646c:	1e4d      	subs	r5, r1, #1
 800646e:	408a      	lsls	r2, r1
 8006470:	4323      	orrs	r3, r4
 8006472:	1b41      	subs	r1, r0, r5
 8006474:	e772      	b.n	800635c <__ieee754_sqrt+0x58>
 8006476:	4608      	mov	r0, r1
 8006478:	e7f0      	b.n	800645c <__ieee754_sqrt+0x158>
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	3101      	adds	r1, #1
 800647e:	e7ef      	b.n	8006460 <__ieee754_sqrt+0x15c>
 8006480:	46e0      	mov	r8, ip
 8006482:	e7aa      	b.n	80063da <__ieee754_sqrt+0xd6>
 8006484:	f7f9 fefa 	bl	800027c <__adddf3>
 8006488:	e9da 8900 	ldrd	r8, r9, [sl]
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4640      	mov	r0, r8
 8006492:	4649      	mov	r1, r9
 8006494:	f7fa fb1a 	bl	8000acc <__aeabi_dcmplt>
 8006498:	b120      	cbz	r0, 80064a4 <__ieee754_sqrt+0x1a0>
 800649a:	1ca0      	adds	r0, r4, #2
 800649c:	bf08      	it	eq
 800649e:	3501      	addeq	r5, #1
 80064a0:	3402      	adds	r4, #2
 80064a2:	e7ca      	b.n	800643a <__ieee754_sqrt+0x136>
 80064a4:	3401      	adds	r4, #1
 80064a6:	f024 0401 	bic.w	r4, r4, #1
 80064aa:	e7c6      	b.n	800643a <__ieee754_sqrt+0x136>
 80064ac:	7ff00000 	.word	0x7ff00000
 80064b0:	200000c8 	.word	0x200000c8
 80064b4:	200000d0 	.word	0x200000d0

080064b8 <__ieee754_pow>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ed2d 8b06 	vpush	{d8-d10}
 80064c0:	b089      	sub	sp, #36	; 0x24
 80064c2:	ed8d 1b00 	vstr	d1, [sp]
 80064c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80064ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80064ce:	ea58 0102 	orrs.w	r1, r8, r2
 80064d2:	ec57 6b10 	vmov	r6, r7, d0
 80064d6:	d115      	bne.n	8006504 <__ieee754_pow+0x4c>
 80064d8:	19b3      	adds	r3, r6, r6
 80064da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80064de:	4152      	adcs	r2, r2
 80064e0:	4299      	cmp	r1, r3
 80064e2:	4b89      	ldr	r3, [pc, #548]	; (8006708 <__ieee754_pow+0x250>)
 80064e4:	4193      	sbcs	r3, r2
 80064e6:	f080 84d1 	bcs.w	8006e8c <__ieee754_pow+0x9d4>
 80064ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7f9 fec3 	bl	800027c <__adddf3>
 80064f6:	ec41 0b10 	vmov	d0, r0, r1
 80064fa:	b009      	add	sp, #36	; 0x24
 80064fc:	ecbd 8b06 	vpop	{d8-d10}
 8006500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	4b81      	ldr	r3, [pc, #516]	; (800670c <__ieee754_pow+0x254>)
 8006506:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800650a:	429c      	cmp	r4, r3
 800650c:	ee10 aa10 	vmov	sl, s0
 8006510:	463d      	mov	r5, r7
 8006512:	dc06      	bgt.n	8006522 <__ieee754_pow+0x6a>
 8006514:	d101      	bne.n	800651a <__ieee754_pow+0x62>
 8006516:	2e00      	cmp	r6, #0
 8006518:	d1e7      	bne.n	80064ea <__ieee754_pow+0x32>
 800651a:	4598      	cmp	r8, r3
 800651c:	dc01      	bgt.n	8006522 <__ieee754_pow+0x6a>
 800651e:	d10f      	bne.n	8006540 <__ieee754_pow+0x88>
 8006520:	b172      	cbz	r2, 8006540 <__ieee754_pow+0x88>
 8006522:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006526:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800652a:	ea55 050a 	orrs.w	r5, r5, sl
 800652e:	d1dc      	bne.n	80064ea <__ieee754_pow+0x32>
 8006530:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006534:	18db      	adds	r3, r3, r3
 8006536:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800653a:	4152      	adcs	r2, r2
 800653c:	429d      	cmp	r5, r3
 800653e:	e7d0      	b.n	80064e2 <__ieee754_pow+0x2a>
 8006540:	2d00      	cmp	r5, #0
 8006542:	da3b      	bge.n	80065bc <__ieee754_pow+0x104>
 8006544:	4b72      	ldr	r3, [pc, #456]	; (8006710 <__ieee754_pow+0x258>)
 8006546:	4598      	cmp	r8, r3
 8006548:	dc51      	bgt.n	80065ee <__ieee754_pow+0x136>
 800654a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800654e:	4598      	cmp	r8, r3
 8006550:	f340 84ab 	ble.w	8006eaa <__ieee754_pow+0x9f2>
 8006554:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006558:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800655c:	2b14      	cmp	r3, #20
 800655e:	dd0f      	ble.n	8006580 <__ieee754_pow+0xc8>
 8006560:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006564:	fa22 f103 	lsr.w	r1, r2, r3
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	4293      	cmp	r3, r2
 800656e:	f040 849c 	bne.w	8006eaa <__ieee754_pow+0x9f2>
 8006572:	f001 0101 	and.w	r1, r1, #1
 8006576:	f1c1 0302 	rsb	r3, r1, #2
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	b182      	cbz	r2, 80065a0 <__ieee754_pow+0xe8>
 800657e:	e05f      	b.n	8006640 <__ieee754_pow+0x188>
 8006580:	2a00      	cmp	r2, #0
 8006582:	d15b      	bne.n	800663c <__ieee754_pow+0x184>
 8006584:	f1c3 0314 	rsb	r3, r3, #20
 8006588:	fa48 f103 	asr.w	r1, r8, r3
 800658c:	fa01 f303 	lsl.w	r3, r1, r3
 8006590:	4543      	cmp	r3, r8
 8006592:	f040 8487 	bne.w	8006ea4 <__ieee754_pow+0x9ec>
 8006596:	f001 0101 	and.w	r1, r1, #1
 800659a:	f1c1 0302 	rsb	r3, r1, #2
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	4b5c      	ldr	r3, [pc, #368]	; (8006714 <__ieee754_pow+0x25c>)
 80065a2:	4598      	cmp	r8, r3
 80065a4:	d132      	bne.n	800660c <__ieee754_pow+0x154>
 80065a6:	f1b9 0f00 	cmp.w	r9, #0
 80065aa:	f280 8477 	bge.w	8006e9c <__ieee754_pow+0x9e4>
 80065ae:	4959      	ldr	r1, [pc, #356]	; (8006714 <__ieee754_pow+0x25c>)
 80065b0:	4632      	mov	r2, r6
 80065b2:	463b      	mov	r3, r7
 80065b4:	2000      	movs	r0, #0
 80065b6:	f7fa f941 	bl	800083c <__aeabi_ddiv>
 80065ba:	e79c      	b.n	80064f6 <__ieee754_pow+0x3e>
 80065bc:	2300      	movs	r3, #0
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d13d      	bne.n	8006640 <__ieee754_pow+0x188>
 80065c4:	4b51      	ldr	r3, [pc, #324]	; (800670c <__ieee754_pow+0x254>)
 80065c6:	4598      	cmp	r8, r3
 80065c8:	d1ea      	bne.n	80065a0 <__ieee754_pow+0xe8>
 80065ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80065ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80065d2:	ea53 030a 	orrs.w	r3, r3, sl
 80065d6:	f000 8459 	beq.w	8006e8c <__ieee754_pow+0x9d4>
 80065da:	4b4f      	ldr	r3, [pc, #316]	; (8006718 <__ieee754_pow+0x260>)
 80065dc:	429c      	cmp	r4, r3
 80065de:	dd08      	ble.n	80065f2 <__ieee754_pow+0x13a>
 80065e0:	f1b9 0f00 	cmp.w	r9, #0
 80065e4:	f2c0 8456 	blt.w	8006e94 <__ieee754_pow+0x9dc>
 80065e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ec:	e783      	b.n	80064f6 <__ieee754_pow+0x3e>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e7e5      	b.n	80065be <__ieee754_pow+0x106>
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	f04f 0000 	mov.w	r0, #0
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	f6bf af7a 	bge.w	80064f6 <__ieee754_pow+0x3e>
 8006602:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006606:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800660a:	e774      	b.n	80064f6 <__ieee754_pow+0x3e>
 800660c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006610:	d106      	bne.n	8006620 <__ieee754_pow+0x168>
 8006612:	4632      	mov	r2, r6
 8006614:	463b      	mov	r3, r7
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7f9 ffe5 	bl	80005e8 <__aeabi_dmul>
 800661e:	e76a      	b.n	80064f6 <__ieee754_pow+0x3e>
 8006620:	4b3e      	ldr	r3, [pc, #248]	; (800671c <__ieee754_pow+0x264>)
 8006622:	4599      	cmp	r9, r3
 8006624:	d10c      	bne.n	8006640 <__ieee754_pow+0x188>
 8006626:	2d00      	cmp	r5, #0
 8006628:	db0a      	blt.n	8006640 <__ieee754_pow+0x188>
 800662a:	ec47 6b10 	vmov	d0, r6, r7
 800662e:	b009      	add	sp, #36	; 0x24
 8006630:	ecbd 8b06 	vpop	{d8-d10}
 8006634:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006638:	f7ff be64 	b.w	8006304 <__ieee754_sqrt>
 800663c:	2300      	movs	r3, #0
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	ec47 6b10 	vmov	d0, r6, r7
 8006644:	f000 fc62 	bl	8006f0c <fabs>
 8006648:	ec51 0b10 	vmov	r0, r1, d0
 800664c:	f1ba 0f00 	cmp.w	sl, #0
 8006650:	d129      	bne.n	80066a6 <__ieee754_pow+0x1ee>
 8006652:	b124      	cbz	r4, 800665e <__ieee754_pow+0x1a6>
 8006654:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <__ieee754_pow+0x25c>)
 8006656:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800665a:	429a      	cmp	r2, r3
 800665c:	d123      	bne.n	80066a6 <__ieee754_pow+0x1ee>
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	da05      	bge.n	8006670 <__ieee754_pow+0x1b8>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	2000      	movs	r0, #0
 800666a:	492a      	ldr	r1, [pc, #168]	; (8006714 <__ieee754_pow+0x25c>)
 800666c:	f7fa f8e6 	bl	800083c <__aeabi_ddiv>
 8006670:	2d00      	cmp	r5, #0
 8006672:	f6bf af40 	bge.w	80064f6 <__ieee754_pow+0x3e>
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800667c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006680:	431c      	orrs	r4, r3
 8006682:	d108      	bne.n	8006696 <__ieee754_pow+0x1de>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	f7f9 fdf4 	bl	8000278 <__aeabi_dsub>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	e78f      	b.n	80065b6 <__ieee754_pow+0xfe>
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	2b01      	cmp	r3, #1
 800669a:	f47f af2c 	bne.w	80064f6 <__ieee754_pow+0x3e>
 800669e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066a2:	4619      	mov	r1, r3
 80066a4:	e727      	b.n	80064f6 <__ieee754_pow+0x3e>
 80066a6:	0feb      	lsrs	r3, r5, #31
 80066a8:	3b01      	subs	r3, #1
 80066aa:	9306      	str	r3, [sp, #24]
 80066ac:	9a06      	ldr	r2, [sp, #24]
 80066ae:	9b04      	ldr	r3, [sp, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	d102      	bne.n	80066ba <__ieee754_pow+0x202>
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	e7e6      	b.n	8006688 <__ieee754_pow+0x1d0>
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <__ieee754_pow+0x268>)
 80066bc:	4598      	cmp	r8, r3
 80066be:	f340 80fb 	ble.w	80068b8 <__ieee754_pow+0x400>
 80066c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80066c6:	4598      	cmp	r8, r3
 80066c8:	4b13      	ldr	r3, [pc, #76]	; (8006718 <__ieee754_pow+0x260>)
 80066ca:	dd0c      	ble.n	80066e6 <__ieee754_pow+0x22e>
 80066cc:	429c      	cmp	r4, r3
 80066ce:	dc0f      	bgt.n	80066f0 <__ieee754_pow+0x238>
 80066d0:	f1b9 0f00 	cmp.w	r9, #0
 80066d4:	da0f      	bge.n	80066f6 <__ieee754_pow+0x23e>
 80066d6:	2000      	movs	r0, #0
 80066d8:	b009      	add	sp, #36	; 0x24
 80066da:	ecbd 8b06 	vpop	{d8-d10}
 80066de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e2:	f000 bcc2 	b.w	800706a <__math_oflow>
 80066e6:	429c      	cmp	r4, r3
 80066e8:	dbf2      	blt.n	80066d0 <__ieee754_pow+0x218>
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <__ieee754_pow+0x25c>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	dd19      	ble.n	8006724 <__ieee754_pow+0x26c>
 80066f0:	f1b9 0f00 	cmp.w	r9, #0
 80066f4:	dcef      	bgt.n	80066d6 <__ieee754_pow+0x21e>
 80066f6:	2000      	movs	r0, #0
 80066f8:	b009      	add	sp, #36	; 0x24
 80066fa:	ecbd 8b06 	vpop	{d8-d10}
 80066fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006702:	f000 bca9 	b.w	8007058 <__math_uflow>
 8006706:	bf00      	nop
 8006708:	fff00000 	.word	0xfff00000
 800670c:	7ff00000 	.word	0x7ff00000
 8006710:	433fffff 	.word	0x433fffff
 8006714:	3ff00000 	.word	0x3ff00000
 8006718:	3fefffff 	.word	0x3fefffff
 800671c:	3fe00000 	.word	0x3fe00000
 8006720:	41e00000 	.word	0x41e00000
 8006724:	4b60      	ldr	r3, [pc, #384]	; (80068a8 <__ieee754_pow+0x3f0>)
 8006726:	2200      	movs	r2, #0
 8006728:	f7f9 fda6 	bl	8000278 <__aeabi_dsub>
 800672c:	a354      	add	r3, pc, #336	; (adr r3, 8006880 <__ieee754_pow+0x3c8>)
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	4604      	mov	r4, r0
 8006734:	460d      	mov	r5, r1
 8006736:	f7f9 ff57 	bl	80005e8 <__aeabi_dmul>
 800673a:	a353      	add	r3, pc, #332	; (adr r3, 8006888 <__ieee754_pow+0x3d0>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	4606      	mov	r6, r0
 8006742:	460f      	mov	r7, r1
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 ff4e 	bl	80005e8 <__aeabi_dmul>
 800674c:	4b57      	ldr	r3, [pc, #348]	; (80068ac <__ieee754_pow+0x3f4>)
 800674e:	4682      	mov	sl, r0
 8006750:	468b      	mov	fp, r1
 8006752:	2200      	movs	r2, #0
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	f7f9 ff46 	bl	80005e8 <__aeabi_dmul>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	a14b      	add	r1, pc, #300	; (adr r1, 8006890 <__ieee754_pow+0x3d8>)
 8006762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006766:	f7f9 fd87 	bl	8000278 <__aeabi_dsub>
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f7f9 ff3b 	bl	80005e8 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	2000      	movs	r0, #0
 8006778:	494d      	ldr	r1, [pc, #308]	; (80068b0 <__ieee754_pow+0x3f8>)
 800677a:	f7f9 fd7d 	bl	8000278 <__aeabi_dsub>
 800677e:	4622      	mov	r2, r4
 8006780:	4680      	mov	r8, r0
 8006782:	4689      	mov	r9, r1
 8006784:	462b      	mov	r3, r5
 8006786:	4620      	mov	r0, r4
 8006788:	4629      	mov	r1, r5
 800678a:	f7f9 ff2d 	bl	80005e8 <__aeabi_dmul>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4640      	mov	r0, r8
 8006794:	4649      	mov	r1, r9
 8006796:	f7f9 ff27 	bl	80005e8 <__aeabi_dmul>
 800679a:	a33f      	add	r3, pc, #252	; (adr r3, 8006898 <__ieee754_pow+0x3e0>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 ff22 	bl	80005e8 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4650      	mov	r0, sl
 80067aa:	4659      	mov	r1, fp
 80067ac:	f7f9 fd64 	bl	8000278 <__aeabi_dsub>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4680      	mov	r8, r0
 80067b6:	4689      	mov	r9, r1
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7f9 fd5e 	bl	800027c <__adddf3>
 80067c0:	2000      	movs	r0, #0
 80067c2:	4632      	mov	r2, r6
 80067c4:	463b      	mov	r3, r7
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	f7f9 fd55 	bl	8000278 <__aeabi_dsub>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4640      	mov	r0, r8
 80067d4:	4649      	mov	r1, r9
 80067d6:	f7f9 fd4f 	bl	8000278 <__aeabi_dsub>
 80067da:	9b04      	ldr	r3, [sp, #16]
 80067dc:	9a06      	ldr	r2, [sp, #24]
 80067de:	3b01      	subs	r3, #1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	4682      	mov	sl, r0
 80067e4:	468b      	mov	fp, r1
 80067e6:	f040 81e7 	bne.w	8006bb8 <__ieee754_pow+0x700>
 80067ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80068a0 <__ieee754_pow+0x3e8>
 80067ee:	eeb0 8a47 	vmov.f32	s16, s14
 80067f2:	eef0 8a67 	vmov.f32	s17, s15
 80067f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80067fa:	2600      	movs	r6, #0
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006804:	f7f9 fd38 	bl	8000278 <__aeabi_dsub>
 8006808:	4622      	mov	r2, r4
 800680a:	462b      	mov	r3, r5
 800680c:	f7f9 feec 	bl	80005e8 <__aeabi_dmul>
 8006810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006814:	4680      	mov	r8, r0
 8006816:	4689      	mov	r9, r1
 8006818:	4650      	mov	r0, sl
 800681a:	4659      	mov	r1, fp
 800681c:	f7f9 fee4 	bl	80005e8 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7f9 fd28 	bl	800027c <__adddf3>
 800682c:	4632      	mov	r2, r6
 800682e:	463b      	mov	r3, r7
 8006830:	4680      	mov	r8, r0
 8006832:	4689      	mov	r9, r1
 8006834:	4620      	mov	r0, r4
 8006836:	4629      	mov	r1, r5
 8006838:	f7f9 fed6 	bl	80005e8 <__aeabi_dmul>
 800683c:	460b      	mov	r3, r1
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	4602      	mov	r2, r0
 8006844:	4649      	mov	r1, r9
 8006846:	4640      	mov	r0, r8
 8006848:	f7f9 fd18 	bl	800027c <__adddf3>
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <__ieee754_pow+0x3fc>)
 800684e:	4299      	cmp	r1, r3
 8006850:	ec45 4b19 	vmov	d9, r4, r5
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	468b      	mov	fp, r1
 800685a:	f340 82f0 	ble.w	8006e3e <__ieee754_pow+0x986>
 800685e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006862:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006866:	4303      	orrs	r3, r0
 8006868:	f000 81e4 	beq.w	8006c34 <__ieee754_pow+0x77c>
 800686c:	ec51 0b18 	vmov	r0, r1, d8
 8006870:	2200      	movs	r2, #0
 8006872:	2300      	movs	r3, #0
 8006874:	f7fa f92a 	bl	8000acc <__aeabi_dcmplt>
 8006878:	3800      	subs	r0, #0
 800687a:	bf18      	it	ne
 800687c:	2001      	movne	r0, #1
 800687e:	e72b      	b.n	80066d8 <__ieee754_pow+0x220>
 8006880:	60000000 	.word	0x60000000
 8006884:	3ff71547 	.word	0x3ff71547
 8006888:	f85ddf44 	.word	0xf85ddf44
 800688c:	3e54ae0b 	.word	0x3e54ae0b
 8006890:	55555555 	.word	0x55555555
 8006894:	3fd55555 	.word	0x3fd55555
 8006898:	652b82fe 	.word	0x652b82fe
 800689c:	3ff71547 	.word	0x3ff71547
 80068a0:	00000000 	.word	0x00000000
 80068a4:	bff00000 	.word	0xbff00000
 80068a8:	3ff00000 	.word	0x3ff00000
 80068ac:	3fd00000 	.word	0x3fd00000
 80068b0:	3fe00000 	.word	0x3fe00000
 80068b4:	408fffff 	.word	0x408fffff
 80068b8:	4bd5      	ldr	r3, [pc, #852]	; (8006c10 <__ieee754_pow+0x758>)
 80068ba:	402b      	ands	r3, r5
 80068bc:	2200      	movs	r2, #0
 80068be:	b92b      	cbnz	r3, 80068cc <__ieee754_pow+0x414>
 80068c0:	4bd4      	ldr	r3, [pc, #848]	; (8006c14 <__ieee754_pow+0x75c>)
 80068c2:	f7f9 fe91 	bl	80005e8 <__aeabi_dmul>
 80068c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80068ca:	460c      	mov	r4, r1
 80068cc:	1523      	asrs	r3, r4, #20
 80068ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068d2:	4413      	add	r3, r2
 80068d4:	9305      	str	r3, [sp, #20]
 80068d6:	4bd0      	ldr	r3, [pc, #832]	; (8006c18 <__ieee754_pow+0x760>)
 80068d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80068dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80068e0:	429c      	cmp	r4, r3
 80068e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80068e6:	dd08      	ble.n	80068fa <__ieee754_pow+0x442>
 80068e8:	4bcc      	ldr	r3, [pc, #816]	; (8006c1c <__ieee754_pow+0x764>)
 80068ea:	429c      	cmp	r4, r3
 80068ec:	f340 8162 	ble.w	8006bb4 <__ieee754_pow+0x6fc>
 80068f0:	9b05      	ldr	r3, [sp, #20]
 80068f2:	3301      	adds	r3, #1
 80068f4:	9305      	str	r3, [sp, #20]
 80068f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80068fa:	2400      	movs	r4, #0
 80068fc:	00e3      	lsls	r3, r4, #3
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	4bc7      	ldr	r3, [pc, #796]	; (8006c20 <__ieee754_pow+0x768>)
 8006902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006906:	ed93 7b00 	vldr	d7, [r3]
 800690a:	4629      	mov	r1, r5
 800690c:	ec53 2b17 	vmov	r2, r3, d7
 8006910:	eeb0 9a47 	vmov.f32	s18, s14
 8006914:	eef0 9a67 	vmov.f32	s19, s15
 8006918:	4682      	mov	sl, r0
 800691a:	f7f9 fcad 	bl	8000278 <__aeabi_dsub>
 800691e:	4652      	mov	r2, sl
 8006920:	4606      	mov	r6, r0
 8006922:	460f      	mov	r7, r1
 8006924:	462b      	mov	r3, r5
 8006926:	ec51 0b19 	vmov	r0, r1, d9
 800692a:	f7f9 fca7 	bl	800027c <__adddf3>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	2000      	movs	r0, #0
 8006934:	49bb      	ldr	r1, [pc, #748]	; (8006c24 <__ieee754_pow+0x76c>)
 8006936:	f7f9 ff81 	bl	800083c <__aeabi_ddiv>
 800693a:	ec41 0b1a 	vmov	d10, r0, r1
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4630      	mov	r0, r6
 8006944:	4639      	mov	r1, r7
 8006946:	f7f9 fe4f 	bl	80005e8 <__aeabi_dmul>
 800694a:	2300      	movs	r3, #0
 800694c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006956:	46ab      	mov	fp, r5
 8006958:	106d      	asrs	r5, r5, #1
 800695a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800695e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006962:	ec41 0b18 	vmov	d8, r0, r1
 8006966:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800696a:	2200      	movs	r2, #0
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	f7f9 fe38 	bl	80005e8 <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fc7a 	bl	8000278 <__aeabi_dsub>
 8006984:	ec53 2b19 	vmov	r2, r3, d9
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fc72 	bl	8000278 <__aeabi_dsub>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4650      	mov	r0, sl
 800699a:	4659      	mov	r1, fp
 800699c:	f7f9 fc6c 	bl	8000278 <__aeabi_dsub>
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	f7f9 fe20 	bl	80005e8 <__aeabi_dmul>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 fc62 	bl	8000278 <__aeabi_dsub>
 80069b4:	ec53 2b1a 	vmov	r2, r3, d10
 80069b8:	f7f9 fe16 	bl	80005e8 <__aeabi_dmul>
 80069bc:	ec53 2b18 	vmov	r2, r3, d8
 80069c0:	ec41 0b19 	vmov	d9, r0, r1
 80069c4:	ec51 0b18 	vmov	r0, r1, d8
 80069c8:	f7f9 fe0e 	bl	80005e8 <__aeabi_dmul>
 80069cc:	a37c      	add	r3, pc, #496	; (adr r3, 8006bc0 <__ieee754_pow+0x708>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	4604      	mov	r4, r0
 80069d4:	460d      	mov	r5, r1
 80069d6:	f7f9 fe07 	bl	80005e8 <__aeabi_dmul>
 80069da:	a37b      	add	r3, pc, #492	; (adr r3, 8006bc8 <__ieee754_pow+0x710>)
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f7f9 fc4c 	bl	800027c <__adddf3>
 80069e4:	4622      	mov	r2, r4
 80069e6:	462b      	mov	r3, r5
 80069e8:	f7f9 fdfe 	bl	80005e8 <__aeabi_dmul>
 80069ec:	a378      	add	r3, pc, #480	; (adr r3, 8006bd0 <__ieee754_pow+0x718>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fc43 	bl	800027c <__adddf3>
 80069f6:	4622      	mov	r2, r4
 80069f8:	462b      	mov	r3, r5
 80069fa:	f7f9 fdf5 	bl	80005e8 <__aeabi_dmul>
 80069fe:	a376      	add	r3, pc, #472	; (adr r3, 8006bd8 <__ieee754_pow+0x720>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f7f9 fc3a 	bl	800027c <__adddf3>
 8006a08:	4622      	mov	r2, r4
 8006a0a:	462b      	mov	r3, r5
 8006a0c:	f7f9 fdec 	bl	80005e8 <__aeabi_dmul>
 8006a10:	a373      	add	r3, pc, #460	; (adr r3, 8006be0 <__ieee754_pow+0x728>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fc31 	bl	800027c <__adddf3>
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	f7f9 fde3 	bl	80005e8 <__aeabi_dmul>
 8006a22:	a371      	add	r3, pc, #452	; (adr r3, 8006be8 <__ieee754_pow+0x730>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fc28 	bl	800027c <__adddf3>
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	462b      	mov	r3, r5
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fdd6 	bl	80005e8 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7f9 fdd0 	bl	80005e8 <__aeabi_dmul>
 8006a48:	4642      	mov	r2, r8
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	464b      	mov	r3, r9
 8006a50:	ec51 0b18 	vmov	r0, r1, d8
 8006a54:	f7f9 fc12 	bl	800027c <__adddf3>
 8006a58:	ec53 2b19 	vmov	r2, r3, d9
 8006a5c:	f7f9 fdc4 	bl	80005e8 <__aeabi_dmul>
 8006a60:	4622      	mov	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	f7f9 fc0a 	bl	800027c <__adddf3>
 8006a68:	4642      	mov	r2, r8
 8006a6a:	4682      	mov	sl, r0
 8006a6c:	468b      	mov	fp, r1
 8006a6e:	464b      	mov	r3, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	4649      	mov	r1, r9
 8006a74:	f7f9 fdb8 	bl	80005e8 <__aeabi_dmul>
 8006a78:	4b6b      	ldr	r3, [pc, #428]	; (8006c28 <__ieee754_pow+0x770>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	f7f9 fbfc 	bl	800027c <__adddf3>
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	f7f9 fbf8 	bl	800027c <__adddf3>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4640      	mov	r0, r8
 8006a98:	4649      	mov	r1, r9
 8006a9a:	f7f9 fda5 	bl	80005e8 <__aeabi_dmul>
 8006a9e:	4b62      	ldr	r3, [pc, #392]	; (8006c28 <__ieee754_pow+0x770>)
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	4689      	mov	r9, r1
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7f9 fbe5 	bl	8000278 <__aeabi_dsub>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fbe1 	bl	8000278 <__aeabi_dsub>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4650      	mov	r0, sl
 8006abc:	4659      	mov	r1, fp
 8006abe:	f7f9 fbdb 	bl	8000278 <__aeabi_dsub>
 8006ac2:	ec53 2b18 	vmov	r2, r3, d8
 8006ac6:	f7f9 fd8f 	bl	80005e8 <__aeabi_dmul>
 8006aca:	4622      	mov	r2, r4
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	ec51 0b19 	vmov	r0, r1, d9
 8006ad6:	f7f9 fd87 	bl	80005e8 <__aeabi_dmul>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7f9 fbcb 	bl	800027c <__adddf3>
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	460f      	mov	r7, r1
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4640      	mov	r0, r8
 8006af0:	4649      	mov	r1, r9
 8006af2:	f7f9 fbc3 	bl	800027c <__adddf3>
 8006af6:	a33e      	add	r3, pc, #248	; (adr r3, 8006bf0 <__ieee754_pow+0x738>)
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	2000      	movs	r0, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	f7f9 fd71 	bl	80005e8 <__aeabi_dmul>
 8006b06:	4642      	mov	r2, r8
 8006b08:	ec41 0b18 	vmov	d8, r0, r1
 8006b0c:	464b      	mov	r3, r9
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f7f9 fbb1 	bl	8000278 <__aeabi_dsub>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	f7f9 fbab 	bl	8000278 <__aeabi_dsub>
 8006b22:	a335      	add	r3, pc, #212	; (adr r3, 8006bf8 <__ieee754_pow+0x740>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fd5e 	bl	80005e8 <__aeabi_dmul>
 8006b2c:	a334      	add	r3, pc, #208	; (adr r3, 8006c00 <__ieee754_pow+0x748>)
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	4606      	mov	r6, r0
 8006b34:	460f      	mov	r7, r1
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7f9 fd55 	bl	80005e8 <__aeabi_dmul>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4630      	mov	r0, r6
 8006b44:	4639      	mov	r1, r7
 8006b46:	f7f9 fb99 	bl	800027c <__adddf3>
 8006b4a:	9a07      	ldr	r2, [sp, #28]
 8006b4c:	4b37      	ldr	r3, [pc, #220]	; (8006c2c <__ieee754_pow+0x774>)
 8006b4e:	4413      	add	r3, r2
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fb92 	bl	800027c <__adddf3>
 8006b58:	4682      	mov	sl, r0
 8006b5a:	9805      	ldr	r0, [sp, #20]
 8006b5c:	468b      	mov	fp, r1
 8006b5e:	f7f9 fcd9 	bl	8000514 <__aeabi_i2d>
 8006b62:	9a07      	ldr	r2, [sp, #28]
 8006b64:	4b32      	ldr	r3, [pc, #200]	; (8006c30 <__ieee754_pow+0x778>)
 8006b66:	4413      	add	r3, r2
 8006b68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	460f      	mov	r7, r1
 8006b70:	4652      	mov	r2, sl
 8006b72:	465b      	mov	r3, fp
 8006b74:	ec51 0b18 	vmov	r0, r1, d8
 8006b78:	f7f9 fb80 	bl	800027c <__adddf3>
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f7f9 fb7c 	bl	800027c <__adddf3>
 8006b84:	4632      	mov	r2, r6
 8006b86:	463b      	mov	r3, r7
 8006b88:	f7f9 fb78 	bl	800027c <__adddf3>
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4632      	mov	r2, r6
 8006b90:	463b      	mov	r3, r7
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1
 8006b96:	f7f9 fb6f 	bl	8000278 <__aeabi_dsub>
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	f7f9 fb6b 	bl	8000278 <__aeabi_dsub>
 8006ba2:	ec53 2b18 	vmov	r2, r3, d8
 8006ba6:	f7f9 fb67 	bl	8000278 <__aeabi_dsub>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4650      	mov	r0, sl
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	e610      	b.n	80067d6 <__ieee754_pow+0x31e>
 8006bb4:	2401      	movs	r4, #1
 8006bb6:	e6a1      	b.n	80068fc <__ieee754_pow+0x444>
 8006bb8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006c08 <__ieee754_pow+0x750>
 8006bbc:	e617      	b.n	80067ee <__ieee754_pow+0x336>
 8006bbe:	bf00      	nop
 8006bc0:	4a454eef 	.word	0x4a454eef
 8006bc4:	3fca7e28 	.word	0x3fca7e28
 8006bc8:	93c9db65 	.word	0x93c9db65
 8006bcc:	3fcd864a 	.word	0x3fcd864a
 8006bd0:	a91d4101 	.word	0xa91d4101
 8006bd4:	3fd17460 	.word	0x3fd17460
 8006bd8:	518f264d 	.word	0x518f264d
 8006bdc:	3fd55555 	.word	0x3fd55555
 8006be0:	db6fabff 	.word	0xdb6fabff
 8006be4:	3fdb6db6 	.word	0x3fdb6db6
 8006be8:	33333303 	.word	0x33333303
 8006bec:	3fe33333 	.word	0x3fe33333
 8006bf0:	e0000000 	.word	0xe0000000
 8006bf4:	3feec709 	.word	0x3feec709
 8006bf8:	dc3a03fd 	.word	0xdc3a03fd
 8006bfc:	3feec709 	.word	0x3feec709
 8006c00:	145b01f5 	.word	0x145b01f5
 8006c04:	be3e2fe0 	.word	0xbe3e2fe0
 8006c08:	00000000 	.word	0x00000000
 8006c0c:	3ff00000 	.word	0x3ff00000
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	43400000 	.word	0x43400000
 8006c18:	0003988e 	.word	0x0003988e
 8006c1c:	000bb679 	.word	0x000bb679
 8006c20:	08007140 	.word	0x08007140
 8006c24:	3ff00000 	.word	0x3ff00000
 8006c28:	40080000 	.word	0x40080000
 8006c2c:	08007160 	.word	0x08007160
 8006c30:	08007150 	.word	0x08007150
 8006c34:	a3b3      	add	r3, pc, #716	; (adr r3, 8006f04 <__ieee754_pow+0xa4c>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	f7f9 fb1d 	bl	800027c <__adddf3>
 8006c42:	4622      	mov	r2, r4
 8006c44:	ec41 0b1a 	vmov	d10, r0, r1
 8006c48:	462b      	mov	r3, r5
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	f7f9 fb13 	bl	8000278 <__aeabi_dsub>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	ec51 0b1a 	vmov	r0, r1, d10
 8006c5a:	f7f9 ff55 	bl	8000b08 <__aeabi_dcmpgt>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f47f ae04 	bne.w	800686c <__ieee754_pow+0x3b4>
 8006c64:	4aa2      	ldr	r2, [pc, #648]	; (8006ef0 <__ieee754_pow+0xa38>)
 8006c66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f340 8107 	ble.w	8006e7e <__ieee754_pow+0x9c6>
 8006c70:	151b      	asrs	r3, r3, #20
 8006c72:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006c76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006c7a:	fa4a fa03 	asr.w	sl, sl, r3
 8006c7e:	44da      	add	sl, fp
 8006c80:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006c84:	489b      	ldr	r0, [pc, #620]	; (8006ef4 <__ieee754_pow+0xa3c>)
 8006c86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006c8a:	4108      	asrs	r0, r1
 8006c8c:	ea00 030a 	and.w	r3, r0, sl
 8006c90:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006c94:	f1c1 0114 	rsb	r1, r1, #20
 8006c98:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006c9c:	fa4a fa01 	asr.w	sl, sl, r1
 8006ca0:	f1bb 0f00 	cmp.w	fp, #0
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	4620      	mov	r0, r4
 8006caa:	4629      	mov	r1, r5
 8006cac:	bfb8      	it	lt
 8006cae:	f1ca 0a00 	rsblt	sl, sl, #0
 8006cb2:	f7f9 fae1 	bl	8000278 <__aeabi_dsub>
 8006cb6:	ec41 0b19 	vmov	d9, r0, r1
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	ec51 0b19 	vmov	r0, r1, d9
 8006cc2:	f7f9 fadb 	bl	800027c <__adddf3>
 8006cc6:	a37a      	add	r3, pc, #488	; (adr r3, 8006eb0 <__ieee754_pow+0x9f8>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	2000      	movs	r0, #0
 8006cce:	4604      	mov	r4, r0
 8006cd0:	460d      	mov	r5, r1
 8006cd2:	f7f9 fc89 	bl	80005e8 <__aeabi_dmul>
 8006cd6:	ec53 2b19 	vmov	r2, r3, d9
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fac9 	bl	8000278 <__aeabi_dsub>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fac3 	bl	8000278 <__aeabi_dsub>
 8006cf2:	a371      	add	r3, pc, #452	; (adr r3, 8006eb8 <__ieee754_pow+0xa00>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fc76 	bl	80005e8 <__aeabi_dmul>
 8006cfc:	a370      	add	r3, pc, #448	; (adr r3, 8006ec0 <__ieee754_pow+0xa08>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	4680      	mov	r8, r0
 8006d04:	4689      	mov	r9, r1
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fc6d 	bl	80005e8 <__aeabi_dmul>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fab1 	bl	800027c <__adddf3>
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4630      	mov	r0, r6
 8006d24:	4639      	mov	r1, r7
 8006d26:	f7f9 faa9 	bl	800027c <__adddf3>
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	4680      	mov	r8, r0
 8006d30:	4689      	mov	r9, r1
 8006d32:	f7f9 faa1 	bl	8000278 <__aeabi_dsub>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fa9b 	bl	8000278 <__aeabi_dsub>
 8006d42:	4642      	mov	r2, r8
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	464b      	mov	r3, r9
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fc4b 	bl	80005e8 <__aeabi_dmul>
 8006d52:	a35d      	add	r3, pc, #372	; (adr r3, 8006ec8 <__ieee754_pow+0xa10>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	f7f9 fc44 	bl	80005e8 <__aeabi_dmul>
 8006d60:	a35b      	add	r3, pc, #364	; (adr r3, 8006ed0 <__ieee754_pow+0xa18>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fa87 	bl	8000278 <__aeabi_dsub>
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	f7f9 fc3b 	bl	80005e8 <__aeabi_dmul>
 8006d72:	a359      	add	r3, pc, #356	; (adr r3, 8006ed8 <__ieee754_pow+0xa20>)
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f7f9 fa80 	bl	800027c <__adddf3>
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	462b      	mov	r3, r5
 8006d80:	f7f9 fc32 	bl	80005e8 <__aeabi_dmul>
 8006d84:	a356      	add	r3, pc, #344	; (adr r3, 8006ee0 <__ieee754_pow+0xa28>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f7f9 fa75 	bl	8000278 <__aeabi_dsub>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7f9 fc29 	bl	80005e8 <__aeabi_dmul>
 8006d96:	a354      	add	r3, pc, #336	; (adr r3, 8006ee8 <__ieee754_pow+0xa30>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f7f9 fa6e 	bl	800027c <__adddf3>
 8006da0:	4622      	mov	r2, r4
 8006da2:	462b      	mov	r3, r5
 8006da4:	f7f9 fc20 	bl	80005e8 <__aeabi_dmul>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4640      	mov	r0, r8
 8006dae:	4649      	mov	r1, r9
 8006db0:	f7f9 fa62 	bl	8000278 <__aeabi_dsub>
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	f7f9 fc12 	bl	80005e8 <__aeabi_dmul>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	ec41 0b19 	vmov	d9, r0, r1
 8006dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7f9 fa51 	bl	8000278 <__aeabi_dsub>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	ec51 0b19 	vmov	r0, r1, d9
 8006dde:	f7f9 fd2d 	bl	800083c <__aeabi_ddiv>
 8006de2:	4632      	mov	r2, r6
 8006de4:	4604      	mov	r4, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	463b      	mov	r3, r7
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fbfb 	bl	80005e8 <__aeabi_dmul>
 8006df2:	4632      	mov	r2, r6
 8006df4:	463b      	mov	r3, r7
 8006df6:	f7f9 fa41 	bl	800027c <__adddf3>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fa39 	bl	8000278 <__aeabi_dsub>
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	f7f9 fa35 	bl	8000278 <__aeabi_dsub>
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4602      	mov	r2, r0
 8006e12:	4939      	ldr	r1, [pc, #228]	; (8006ef8 <__ieee754_pow+0xa40>)
 8006e14:	2000      	movs	r0, #0
 8006e16:	f7f9 fa2f 	bl	8000278 <__aeabi_dsub>
 8006e1a:	ec41 0b10 	vmov	d0, r0, r1
 8006e1e:	ee10 3a90 	vmov	r3, s1
 8006e22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e2a:	da2b      	bge.n	8006e84 <__ieee754_pow+0x9cc>
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	f000 f877 	bl	8006f20 <scalbn>
 8006e32:	ec51 0b10 	vmov	r0, r1, d0
 8006e36:	ec53 2b18 	vmov	r2, r3, d8
 8006e3a:	f7ff bbee 	b.w	800661a <__ieee754_pow+0x162>
 8006e3e:	4b2f      	ldr	r3, [pc, #188]	; (8006efc <__ieee754_pow+0xa44>)
 8006e40:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e44:	429e      	cmp	r6, r3
 8006e46:	f77f af0d 	ble.w	8006c64 <__ieee754_pow+0x7ac>
 8006e4a:	4b2d      	ldr	r3, [pc, #180]	; (8006f00 <__ieee754_pow+0xa48>)
 8006e4c:	440b      	add	r3, r1
 8006e4e:	4303      	orrs	r3, r0
 8006e50:	d009      	beq.n	8006e66 <__ieee754_pow+0x9ae>
 8006e52:	ec51 0b18 	vmov	r0, r1, d8
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f7f9 fe37 	bl	8000acc <__aeabi_dcmplt>
 8006e5e:	3800      	subs	r0, #0
 8006e60:	bf18      	it	ne
 8006e62:	2001      	movne	r0, #1
 8006e64:	e448      	b.n	80066f8 <__ieee754_pow+0x240>
 8006e66:	4622      	mov	r2, r4
 8006e68:	462b      	mov	r3, r5
 8006e6a:	f7f9 fa05 	bl	8000278 <__aeabi_dsub>
 8006e6e:	4642      	mov	r2, r8
 8006e70:	464b      	mov	r3, r9
 8006e72:	f7f9 fe3f 	bl	8000af4 <__aeabi_dcmpge>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f aef4 	beq.w	8006c64 <__ieee754_pow+0x7ac>
 8006e7c:	e7e9      	b.n	8006e52 <__ieee754_pow+0x99a>
 8006e7e:	f04f 0a00 	mov.w	sl, #0
 8006e82:	e71a      	b.n	8006cba <__ieee754_pow+0x802>
 8006e84:	ec51 0b10 	vmov	r0, r1, d0
 8006e88:	4619      	mov	r1, r3
 8006e8a:	e7d4      	b.n	8006e36 <__ieee754_pow+0x97e>
 8006e8c:	491a      	ldr	r1, [pc, #104]	; (8006ef8 <__ieee754_pow+0xa40>)
 8006e8e:	2000      	movs	r0, #0
 8006e90:	f7ff bb31 	b.w	80064f6 <__ieee754_pow+0x3e>
 8006e94:	2000      	movs	r0, #0
 8006e96:	2100      	movs	r1, #0
 8006e98:	f7ff bb2d 	b.w	80064f6 <__ieee754_pow+0x3e>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7ff bb29 	b.w	80064f6 <__ieee754_pow+0x3e>
 8006ea4:	9204      	str	r2, [sp, #16]
 8006ea6:	f7ff bb7b 	b.w	80065a0 <__ieee754_pow+0xe8>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f7ff bb65 	b.w	800657a <__ieee754_pow+0xc2>
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	3fe62e43 	.word	0x3fe62e43
 8006eb8:	fefa39ef 	.word	0xfefa39ef
 8006ebc:	3fe62e42 	.word	0x3fe62e42
 8006ec0:	0ca86c39 	.word	0x0ca86c39
 8006ec4:	be205c61 	.word	0xbe205c61
 8006ec8:	72bea4d0 	.word	0x72bea4d0
 8006ecc:	3e663769 	.word	0x3e663769
 8006ed0:	c5d26bf1 	.word	0xc5d26bf1
 8006ed4:	3ebbbd41 	.word	0x3ebbbd41
 8006ed8:	af25de2c 	.word	0xaf25de2c
 8006edc:	3f11566a 	.word	0x3f11566a
 8006ee0:	16bebd93 	.word	0x16bebd93
 8006ee4:	3f66c16c 	.word	0x3f66c16c
 8006ee8:	5555553e 	.word	0x5555553e
 8006eec:	3fc55555 	.word	0x3fc55555
 8006ef0:	3fe00000 	.word	0x3fe00000
 8006ef4:	fff00000 	.word	0xfff00000
 8006ef8:	3ff00000 	.word	0x3ff00000
 8006efc:	4090cbff 	.word	0x4090cbff
 8006f00:	3f6f3400 	.word	0x3f6f3400
 8006f04:	652b82fe 	.word	0x652b82fe
 8006f08:	3c971547 	.word	0x3c971547

08006f0c <fabs>:
 8006f0c:	ec51 0b10 	vmov	r0, r1, d0
 8006f10:	ee10 2a10 	vmov	r2, s0
 8006f14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f18:	ec43 2b10 	vmov	d0, r2, r3
 8006f1c:	4770      	bx	lr
	...

08006f20 <scalbn>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	ec55 4b10 	vmov	r4, r5, d0
 8006f26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	b999      	cbnz	r1, 8006f58 <scalbn+0x38>
 8006f30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f34:	4323      	orrs	r3, r4
 8006f36:	d03f      	beq.n	8006fb8 <scalbn+0x98>
 8006f38:	4b35      	ldr	r3, [pc, #212]	; (8007010 <scalbn+0xf0>)
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	ee10 0a10 	vmov	r0, s0
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 fb51 	bl	80005e8 <__aeabi_dmul>
 8006f46:	4b33      	ldr	r3, [pc, #204]	; (8007014 <scalbn+0xf4>)
 8006f48:	429e      	cmp	r6, r3
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	da10      	bge.n	8006f72 <scalbn+0x52>
 8006f50:	a327      	add	r3, pc, #156	; (adr r3, 8006ff0 <scalbn+0xd0>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	e01f      	b.n	8006f98 <scalbn+0x78>
 8006f58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006f5c:	4291      	cmp	r1, r2
 8006f5e:	d10c      	bne.n	8006f7a <scalbn+0x5a>
 8006f60:	ee10 2a10 	vmov	r2, s0
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 f988 	bl	800027c <__adddf3>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	460d      	mov	r5, r1
 8006f70:	e022      	b.n	8006fb8 <scalbn+0x98>
 8006f72:	460b      	mov	r3, r1
 8006f74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006f78:	3936      	subs	r1, #54	; 0x36
 8006f7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006f7e:	4296      	cmp	r6, r2
 8006f80:	dd0d      	ble.n	8006f9e <scalbn+0x7e>
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	a11c      	add	r1, pc, #112	; (adr r1, 8006ff8 <scalbn+0xd8>)
 8006f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f8a:	da02      	bge.n	8006f92 <scalbn+0x72>
 8006f8c:	a11c      	add	r1, pc, #112	; (adr r1, 8007000 <scalbn+0xe0>)
 8006f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f92:	a319      	add	r3, pc, #100	; (adr r3, 8006ff8 <scalbn+0xd8>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 fb26 	bl	80005e8 <__aeabi_dmul>
 8006f9c:	e7e6      	b.n	8006f6c <scalbn+0x4c>
 8006f9e:	1872      	adds	r2, r6, r1
 8006fa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006fa4:	428a      	cmp	r2, r1
 8006fa6:	dcec      	bgt.n	8006f82 <scalbn+0x62>
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	dd08      	ble.n	8006fbe <scalbn+0x9e>
 8006fac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fb8:	ec45 4b10 	vmov	d0, r4, r5
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
 8006fbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006fc2:	da08      	bge.n	8006fd6 <scalbn+0xb6>
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	a10a      	add	r1, pc, #40	; (adr r1, 8006ff0 <scalbn+0xd0>)
 8006fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fcc:	dac0      	bge.n	8006f50 <scalbn+0x30>
 8006fce:	a10e      	add	r1, pc, #56	; (adr r1, 8007008 <scalbn+0xe8>)
 8006fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd4:	e7bc      	b.n	8006f50 <scalbn+0x30>
 8006fd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fda:	3236      	adds	r2, #54	; 0x36
 8006fdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fe0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <scalbn+0xf8>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	e7d5      	b.n	8006f98 <scalbn+0x78>
 8006fec:	f3af 8000 	nop.w
 8006ff0:	c2f8f359 	.word	0xc2f8f359
 8006ff4:	01a56e1f 	.word	0x01a56e1f
 8006ff8:	8800759c 	.word	0x8800759c
 8006ffc:	7e37e43c 	.word	0x7e37e43c
 8007000:	8800759c 	.word	0x8800759c
 8007004:	fe37e43c 	.word	0xfe37e43c
 8007008:	c2f8f359 	.word	0xc2f8f359
 800700c:	81a56e1f 	.word	0x81a56e1f
 8007010:	43500000 	.word	0x43500000
 8007014:	ffff3cb0 	.word	0xffff3cb0
 8007018:	3c900000 	.word	0x3c900000

0800701c <with_errno>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4604      	mov	r4, r0
 8007020:	460d      	mov	r5, r1
 8007022:	4616      	mov	r6, r2
 8007024:	f7fe fc4a 	bl	80058bc <__errno>
 8007028:	4629      	mov	r1, r5
 800702a:	6006      	str	r6, [r0, #0]
 800702c:	4620      	mov	r0, r4
 800702e:	bd70      	pop	{r4, r5, r6, pc}

08007030 <xflow>:
 8007030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007032:	4614      	mov	r4, r2
 8007034:	461d      	mov	r5, r3
 8007036:	b108      	cbz	r0, 800703c <xflow+0xc>
 8007038:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800703c:	e9cd 2300 	strd	r2, r3, [sp]
 8007040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 face 	bl	80005e8 <__aeabi_dmul>
 800704c:	2222      	movs	r2, #34	; 0x22
 800704e:	b003      	add	sp, #12
 8007050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007054:	f7ff bfe2 	b.w	800701c <with_errno>

08007058 <__math_uflow>:
 8007058:	b508      	push	{r3, lr}
 800705a:	2200      	movs	r2, #0
 800705c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007060:	f7ff ffe6 	bl	8007030 <xflow>
 8007064:	ec41 0b10 	vmov	d0, r0, r1
 8007068:	bd08      	pop	{r3, pc}

0800706a <__math_oflow>:
 800706a:	b508      	push	{r3, lr}
 800706c:	2200      	movs	r2, #0
 800706e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007072:	f7ff ffdd 	bl	8007030 <xflow>
 8007076:	ec41 0b10 	vmov	d0, r0, r1
 800707a:	bd08      	pop	{r3, pc}

0800707c <_init>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr

08007088 <_fini>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr
